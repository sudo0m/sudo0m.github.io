<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Express 解决中文乱码</title>
    <url>/page/20230615095154/</url>
    <content><![CDATA[<p>当调用 <code>res.end()</code> 方法，向客户端发送中文内容时，就会出现乱码问题，此时需要手动设置发送内容编码格式</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 发送的内容包含中文</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">`您的请求的url<span class="subst">$&#123;req.url&#125;</span>,请求的method类型是<span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">    <span class="comment">// 为了防止中文显示乱码问题需要设置相应头</span></span><br><span class="line">    <span class="comment">// Content-Type 的值为 text/html;charset=utf-8</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;text/html;charseutf-8&quot;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>node</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>Element resetFields()重置表单不生效的问题</title>
    <url>/page/20230714191841/</url>
    <content><![CDATA[<p><strong>问题重现：进入列表页后，先打开编辑框，然后打开新增框，新增框会填充第一次打开的编辑框内容</strong></p>
<p><strong>代码流程：打开编辑页面给编辑框传入值，然后调用 <code>this.$refs[forName].resetFields()</code></strong></p>
<h2 id="resetFields-方法官网的解释"><a href="#resetFields-方法官网的解释" class="headerlink" title="resetFields()方法官网的解释"></a>resetFields()方法官网的解释</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230714/Snipaste_2023-07-14_19-05-52.5ktfv7n6ybo0.jpg"
                      alt="Snipaste_2023-07-14_19-05-52"
                ></p>
<p>也就是说在调用弹窗传入值的时候就把初始值更改了，那么后面调用resetFields()都是无效的，因为form表单的初始值已经在 mounted 之前就被赋值了</p>
<p>所以我们要在 form 表单 mounted之后再进行赋值操作这样就可以完美解决问题了</p>
<p>可以使用 nextTick()方法</p>
<p><strong>错误代码</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230714/Snipaste_2023-07-14_19-14-23.3ni5z2u1gdk0.jpg"
                      alt="Snipaste_2023-07-14_19-14-23"
                ></p>
<p><strong>正确代码：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230714/Snipaste_2023-07-14_19-12-21.5eoagm32yvg0.jpg"
                      alt="Snipaste_2023-07-14_19-12-21"
                ></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Express 生成器</title>
    <url>/page/20230615094219/</url>
    <content><![CDATA[<p>使用应用程序生成器工具 <code>express-generator</code> 快速创建应用程序骨架。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/QHrtBYLjxnK46qg.3q8moef2llg0.webp"
                      alt="QHrtBYLjxnK46qg"
                ></p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ npx express-generator</span><br></pre></td></tr></table></figure></div>

<p>对于较早的 Node 版本，将应用程序生成器安装为全局 npm 包，然后启动它：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install -g express-generator</span><br><span class="line">$ express</span><br></pre></td></tr></table></figure></div>

<p>显示带有 <code>-h</code> 选项的命令选项：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ express -h</span><br><span class="line"></span><br><span class="line">  Usage: express [options] [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --<span class="built_in">help</span>          output usage information</span><br><span class="line">        --version       output the version number</span><br><span class="line">    -e, --ejs           add ejs engine support</span><br><span class="line">        --hbs           add handlebars engine support</span><br><span class="line">        --pug           add pug engine support</span><br><span class="line">    -H, --hogan         add hogan.js engine support</span><br><span class="line">        --no-view       generate without view engine</span><br><span class="line">    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)</span><br><span class="line">    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)</span><br><span class="line">        --git           add .gitignore</span><br><span class="line">    -f, --force         force on non-empty directory</span><br></pre></td></tr></table></figure></div>

<p>例如，以下创建一个名为 myapp 的 Express 应用程序。该应用程序将在当前工作目录中名为 myapp 的文件夹中创建，并且视图引擎将设置为 <code>ejs</code>：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/lfpgAt7ueQqOFRm.426thnc487u0.webp"
                      alt="lfpgAt7ueQqOFRm"
                ></p>
<p>然后安装依赖：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></div>

<p>在 MacOS 或 Linux 上，使用以下命令运行应用程序：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">$ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure></div>

<p>在 Windows 命令提示符上，使用以下命令：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure></div>

<p>然后在浏览器中加载 <code>http://localhost:3000/</code> 以访问该应用程序。</p>
<p>生成的应用程序具有以下目录结构：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/QHrtBYLjxnK46qg.3q8moef2llg0.webp"
                      alt="QHrtBYLjxnK46qg"
                ></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>node</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 笔记</title>
    <url>/page/20230523094704/</url>
    <content><![CDATA[<hr>
<p> 学习目标:</p>
<ul>
<li>了解常用浏览器</li>
<li>掌握WEB标准</li>
<li>理解标签语义化</li>
<li>掌握常用的排版标签</li>
<li>掌握常用的文本格式化图像链接等标签</li>
<li>掌握三种列表标签</li>
<li>掌握表格标签</li>
<li>掌握表格标签</li>
<li>掌握表单标签</li>
<li>掌握H5新增表单和表单属性</li>
</ul>
<hr>
<p><code>项目地址:https://github.com/babbittry/Front-end-notes</code></p>
<h1 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h1><blockquote>
<p>网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</p>
</blockquote>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/HTML-notes/media/mi.png&quot;</span><span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>思考：  网页是如何形成的呢?</p>
</blockquote>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/web.png"
                      
                >

<h1 id="常见浏览器介绍"><a href="#常见浏览器介绍" class="headerlink" title="常见浏览器介绍"></a>常见浏览器介绍</h1><blockquote>
<p>浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</p>
</blockquote>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/b.png"
                      
                >

<h2 id="查看浏览器占有的市场份额（知晓）"><a href="#查看浏览器占有的市场份额（知晓）" class="headerlink" title="查看浏览器占有的市场份额（知晓）"></a>查看浏览器占有的市场份额（知晓）</h2><p>查看网站： <a class="link"   href="http://tongji.baidu.com/data/browser"  target="_blank">http://tongji.baidu.com/data/browser <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/count.png"
                      
                >

<h2 id="浏览器内核（理解）"><a href="#浏览器内核（理解）" class="headerlink" title="浏览器内核（理解）"></a>浏览器内核（理解）</h2><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p>浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。</p>
<p><strong>渲染引擎</strong>： 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</p>
<p><strong>JS 引擎</strong>： 则是解析 JavaScript 语言，执行 JavaScript语言来实现网页的动态效果。</p>
<p>最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：<code>Trident</code>、<code>Gecko</code>、<code>Blink</code>、<code>Webkit</code>。</p>
<ol>
<li>Trident(IE内核)</li>
</ol>
<p>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。</p>
<p>代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。</p>
<p>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。</p>
<ol start="2">
<li>Gecko(Firefox)</li>
</ol>
<p>Gecko(Firefox 内核)： Mozilla Firefox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</p>
<ol start="3">
<li>WebKit (Safari)</li>
</ol>
<p>Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。</p>
<p>现在很多人错误地把 WebKit叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</p>
<p>代表浏览器：傲游浏览器3、 Apple Safari (Win&#x2F;Mac&#x2F;iPhone&#x2F;iPad)、Symbian手机浏览器、Android 默认浏览器，</p>
<ol start="4">
<li>Chromium&#x2F;Bink(chrome)</li>
</ol>
<p>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit的分支。 </p>
<p>大部分国产浏览器最新版都采用Blink内核。</p>
<ol start="5">
<li>Presto(Opera)</li>
</ol>
<p>Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。</p>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/s.jpg"
                      
                >

<h3 id="了解一点："><a href="#了解一点：" class="headerlink" title="了解一点："></a>了解一点：</h3><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p>
<p>目前移动设备浏览器上常用的内核有 WebKit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 WebKit的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p>
<h1 id="Web标准（重点）"><a href="#Web标准（重点）" class="headerlink" title="Web标准（重点）"></a>Web标准（重点）</h1><p>通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">问：  哪个语言再全国基本都可以听得懂？ </span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/bz.png"
                      
                >

<h2 id="Web-标准的好处"><a href="#Web-标准的好处" class="headerlink" title="Web 标准的好处"></a>Web 标准的好处</h2><ol>
<li>让Web的发展前景更广阔 </li>
<li>内容能被更广泛的设备访问</li>
<li>更容易被搜寻引擎搜索</li>
<li>降低网站流量费用</li>
<li>使网站更易于维护</li>
<li>提高页面浏览速度</li>
</ol>
<h2 id="Web-标准构成"><a href="#Web-标准构成" class="headerlink" title="Web 标准构成"></a>Web 标准构成</h2><p> Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p>
<p><strong>结构标准</strong>：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。<br><strong>样式标准</strong>：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。<br><strong>行为标准</strong>：行为是指网页模型的定义及交互的编写，主要包括<code>DOM</code>和<code>ECMAScript</code>两个部分。</p>
<p>理想状态我们的源码： <code>.HTML</code>    <code>.css</code>   <code>.js</code> </p>
<blockquote>
<p>专业的人，写专业的代码</p>
</blockquote>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/wk.png"
                      
                >

<p>直观感受：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/gx.png"
                      
                >

<p>总结WEB标准：</p>
<p>结构标准：   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/hb1.png"
                      
                >  决定你是否有个好天然身体 </p>
<p>样式标准：   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/hb2.png"
                      
                >  决定你是否打扮的美丽外观</p>
<p>行为标准：   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/hb3.jpg"
                       width="420"   
                >  决定你是否有吸引人的行为</p>
<h1 id="HTML-初识"><a href="#HTML-初识" class="headerlink" title="HTML 初识"></a>HTML 初识</h1><p>一般先学习HTML+CSS， 这里我们先定一个小目标，先学HTML,后学习CSS。</p>
<p>HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span> 我是加粗的字体 <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>   注意：体会文本标签语言几个词语</p>
<h2 id="HTML骨架格式"><a href="#HTML骨架格式" class="headerlink" title="HTML骨架格式"></a>HTML骨架格式</h2><p>日常生活的书信，我们要遵循共同的约定。 </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/mess.png"
                      alt=""
                >

<p>同理：HTML 有自己的语言语法骨架格式：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>课堂练习1：    书写我们的第一个HTML 页面！</p>
<ol>
<li>新建一个demo 的 TXT 文件。</li>
<li>里面写入刚才的HTML 骨架。</li>
<li>把后缀名改为 .HTML。</li>
<li>右击–谷歌浏览器打开。</li>
</ol>
<h3 id="HTML标签："><a href="#HTML标签：" class="headerlink" title="HTML标签："></a>HTML标签：</h3><p>作用所有HTML中标签的一个根节点。</p>
<h3 id="head标签："><a href="#head标签：" class="headerlink" title="head标签："></a>head标签：</h3><p>作用：用于存放：</p>
<p><code>title</code>, <code>meta</code>, <code>base</code>, <code>style</code>, <code>script</code>, <code>link</code></p>
<p>注意在head标签中我们必须要设置的标签是<code>title</code></p>
<h3 id="title标签："><a href="#title标签：" class="headerlink" title="title标签："></a>title标签：</h3><p>作用：让页面拥有一个属于自己的标题。</p>
<h3 id="body标签："><a href="#body标签：" class="headerlink" title="body标签："></a>body标签：</h3><p>作用：页面在的主体部分，用于存放所有的HTML标签：</p>
<p><code>p</code>, <code>h</code>, <code>a</code>, <code>b</code>, <code>u</code>, <code>i</code>, <code>s</code>, <code>em</code>, <code>del</code>, <code>ins</code>, <code>strong</code>, <code>img</code></p>
<p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/pig.png"
                      
                >

<h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a>HTML标签分类</h2><p> 在HTML页面中，带有<code>&lt; &gt;</code>符号的元素被称为HTML标签，如上面提到的 <code>&lt;HTML&gt;;</code>、<code>&lt;head&gt;</code>、<code>&lt;body&gt;</code>都是HTML标签。所谓标签就是放在<code>&lt; &gt;</code> 标签符中表示某个功能的编码命令，也称为 HTML 标签或 HTML 元素</p>
<h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;&#x2F;标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“&#x2F;”。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><p>标签的相互关系就分为两种：</p>
<p>1.嵌套关系</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/father.jpg"
                     
                >

<p>2.并列关系</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/xiong.jpg"
                     
                >

<p>测试题：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">请问下列哪个标签是错误的？</span><br><span class="line"></span><br><span class="line">A   &lt;head&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">B   &lt;strong&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">C   &lt;head&gt;</span><br><span class="line">    &lt;title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;/title&gt;</span><br><span class="line"></span><br><span class="line">D   &lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br></pre></td></tr></table></figure></div>

<p> 倡议： 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位。如果是并列关系，最好上下对齐。</p>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p> 这些工具你认识几个？</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/s.png"
                      
                >

<p>  普通青年    Dreamweaver</p>
<p>  文艺青年    sublime</p>
<p>  高手和傻子  用记事本</p>
<p>  其实。。。。</p>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/node.png"
                      
                >

<p>  <a href="key.HTML" target="_blank">sublime 一些常用快捷键  点我查看 </a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">再页面中输入 以下2个单词</span><br><span class="line">1.  html: 5   </span><br><span class="line">2.  !</span><br><span class="line">   在sublime里面然后按下tab键盘即可生成HTML骨架</span><br></pre></td></tr></table></figure></div>



<h1 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型&lt;!DOCTYPE&gt;"></a>文档类型&lt;!DOCTYPE&gt;</h1><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这句话就是告诉我们使用哪个html版本？  我们使用的是 html 5 的版本。  html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。</p>
<!DOCTYPE><p> 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p>
<p>注意：  一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</p>
<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p>
<p>gb2312 简单中文  包括6763个汉字</p>
<p>BIG5   繁体中文 港澳台等用</p>
<p>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</p>
<p>UTF-8则包含全世界所有国家需要用到的字符</p>
<p><strong>记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。</strong></p>
<h1 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p>
<h2 id="为什么要有语义化标签"><a href="#为什么要有语义化标签" class="headerlink" title="为什么要有语义化标签"></a>为什么要有语义化标签</h2><ol>
<li>方便代码的阅读和维护</li>
<li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </li>
<li>使用语义化标签会具有更好地搜索引擎优化</li>
</ol>
<p>核心：合适的地方给一个最为合理的标签。</p>
<p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。</p>
<p>不管是谁都能看懂这块内容是什么。</p>
<p>遵循的原则：先确定语义的HTML ，再选合适的CSS。</p>
<h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><p> 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p>
<p> HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p>
<h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p>
<h3 id="标题标签-熟记"><a href="#标题标签-熟记" class="headerlink" title="标题标签 (熟记)"></a>标题标签 (熟记)</h3><p> 单词缩写：  head   头部. 标题 </p>
<p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;和&lt;h6&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>标题标签语义：</strong>  作为标题使用，并且依据重要性递减</p>
<p>其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">hn</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意：  h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用。</p>
</blockquote>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/dog.gif"
                      
                >

<h3 id="段落标签-熟记"><a href="#段落标签-熟记" class="headerlink" title="段落标签(熟记)"></a>段落标签(熟记)</h3><p>单词缩写：  paragraph  段落</p>
<p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p>
<h3 id="水平线标签-认识"><a href="#水平线标签-认识" class="headerlink" title="水平线标签(认识)"></a>水平线标签(认识)</h3><p>单词缩写：  horizontal  横线</p>
<p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr />就是创建横跨网页水平线的标签。其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure></div>

<p> 在网页中显示默认样式的水平线。</p>
<p>课堂练习2：    新闻页面</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/sh.png"
                      
                > 



<h3 id="换行标签-熟记"><a href="#换行标签-熟记" class="headerlink" title="换行标签(熟记)"></a>换行标签(熟记)</h3><p>单词缩写：  break   打断 ,换行</p>
<p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这时如果还像在word中直接敲回车键换行就不起作用了。</p>
<h3 id="div-span标签-重点"><a href="#div-span标签-重点" class="headerlink" title="div span标签(重点)"></a>div span标签(重点)</h3><p>div  span    是没有语义的     是我们网页布局主要的2个盒子</p>
<p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p>
<p>span, 跨度，跨距；范围    </p>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="文本格式化标签-熟记"><a href="#文本格式化标签-熟记" class="headerlink" title="文本格式化标签(熟记)"></a>文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/tab.png"
                      
                >

<p>  <code>b</code>  <code>i</code>  <code>s</code>  <code>u</code>   只有使用, 没有 强调的意思       <code>strong</code>   <code>em</code>  <code>del</code>   <code>ins</code>  语义更强烈</p>
<h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/ttt.jpg"
                      width="300"  
                >

<p>属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p>
<p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">属性1</span>=<span class="string">&quot;属性值1&quot;</span> <span class="attr">属性2</span>=<span class="string">&quot;属性值2&quot;</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>在上面的语法中，</p>
<p>1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</p>
<p>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</p>
<p>3.任何标签的属性都有默认值，省略该属性则取默认值。</p>
<p>采取键值对的格式, <code>key=&quot;value&quot;</code>  的格式  </p>
<p>比如:  </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>属性  是 宽度  </p>
<p>值    是 400 </p>
<p>提倡：尽量不使用样式属性。   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/sm.jpg"
                      
                > </p>
<h2 id="图像标签img-重点"><a href="#图像标签img-重点" class="headerlink" title="图像标签img (重点)"></a>图像标签img (重点)</h2><p>单词缩写：   image  图像</p>
<p>HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<code>&lt;img /&gt;</code>以及和他相关的属性。其基本语法格式如下：</p>
<p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/img.png"
                      
                >

<h2 id="链接标签-重点"><a href="#链接标签-重点" class="headerlink" title="链接标签(重点)"></a>链接标签(重点)</h2><p>单词缩写：  anchor 的缩写 。基本解释 锚, 铁锚 的</p>
<p>在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</p>
<p>target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p>
<p>注意：</p>
<p>1.外部链接 需要添加 <a class="link"   href="http://www.baidu.com/" >http://www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>2.内部链接 直接链接内部页面名称即可 比如 <code>&lt; a href=&quot;index.html&quot;&gt; 首页 &lt;/a&gt;</code></p>
<p>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href&#x3D;”#”)，表示该链接暂时为一个空链接。</p>
<p>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</p>
<h3 id="锚点定位-（难点）"><a href="#锚点定位-（难点）" class="headerlink" title="锚点定位 （难点）"></a>锚点定位 （难点）</h3><p>通过创建锚点链接，用户能够快速定位到目标内容。<br>创建锚点链接分为两步：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">1.使用“a href=”#id名&gt;“链接文本&quot;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本。</span><br><span class="line"></span><br><span class="line">2.使用相应的id名标注跳转目标的位置。</span><br></pre></td></tr></table></figure></div>

<h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h3><p>base 可以设置整体链接的打开状态   </p>
<p>base 写到  <code>&lt;head&gt;  &lt;/head&gt;</code>之间</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/base.png"
                      
                >



<h2 id="特殊字符标签-（理解）"><a href="#特殊字符标签-（理解）" class="headerlink" title="特殊字符标签 （理解）"></a>特殊字符标签 （理解）</h2> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/zifu.png"
                      
                >

<h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：<br>​        </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p>
<p>注释重要性：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/zs.png"
                      
                >

<h1 id="路径-重点、难点"><a href="#路径-重点、难点" class="headerlink" title="路径(重点、难点)"></a>路径(重点、难点)</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/dt.png"
                      
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/lj.png"
                      
                >

<p>实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。</p>
<p>路径可以分为： 相对路径和绝对路径</p>
<h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><ol>
<li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如<code>&lt;img src=&quot;logo.gif&quot;&gt;</code>。</li>
<li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“&#x2F;”隔开，如<code>&lt;img src=&quot;img/img01/logo.gif&quot; &gt;</code>。</li>
<li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“..&#x2F;” ，如果是上两级，则需要使用 “..&#x2F; ..&#x2F;”，以此类推，如<code>&lt;img src=&quot;../logo.gif&quot; &gt;</code>。</li>
</ol>
<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径</p>
<p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a class="link"   href="http://www.itcast.cn/images/logo.gif%E2%80%9D%E3%80%82" >http://www.itcast.cn/images/logo.gif”。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><p>什么是列表？</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/list.png"
                      
                >

<p>把…制成表,以表显示</p>
<p>容器里面装载着文字或图表的一种形式，叫列表。</p>
<p>列表最大的特点就是  整齐 、整洁、 有序</p>
<h2 id="无序列表-ul-（重点）"><a href="#无序列表-ul-（重点）" class="headerlink" title="无序列表 ul （重点）"></a>无序列表 ul （重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/ul.png"
                      
                >

<p>脚下留心：</p>
<ol>
<li><code>&lt;ul&gt;&lt;/ul&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>，直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li>
<li><code>&lt;li&gt;</code>与<code>&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素。</li>
<li>无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</li>
</ol>
<h2 id="有序列表-ol-（了解）"><a href="#有序列表-ol-（了解）" class="headerlink" title="有序列表 ol （了解）"></a>有序列表 ol （了解）</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/gold.png"
                      
                >

<p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>所有特性基本与ul 一致。  </p>
<p>但是实际工作中， 较少用 ol ，因此我们用一句话来总结下 ol： </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/1.jpg"
                      
                >

<h2 id="自定义列表（理解）"><a href="#自定义列表（理解）" class="headerlink" title="自定义列表（理解）"></a>自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/2.jpg"
                      
                > 

<p>用的还可以：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/mix.png"
                      
                >

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt;</p>
<p>学HTML之前,觉得很神秘  </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/z.png"
                      
                >

<p>等你学完之后忽然发现</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/rh.jpg"
                      width="615" 
                >

<p>总结今天的思路贯穿线：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/a.png"
                      width="1000" 
                >

<h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，常见处理、显示表格式数据。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/table.png"
                      
                >

<h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在上面的语法中包含三对HTML标签，分别为 <code>&lt;table&gt;&lt;/table&gt;</code> <code>&lt;tr&gt;&lt;/tr&gt;</code> <code>&lt;td&gt;&lt;/td&gt;</code>，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释</p>
<ol>
<li>table用于定义一个表格。</li>
<li>tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。</li>
<li>td &#x2F;td：用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中，一对 <code>&lt;tr&gt; &lt;/tr&gt;</code>中包含几对<code>&lt;td&gt;&lt;/td&gt;</code>，就表示该行中有多少列（或多少个单元格）。</li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li><code>&lt;tr&gt;&lt;/tr&gt;</code>中只能嵌套<code>&lt;td&gt;&lt;/td&gt;</code></li>
<li><code>&lt;td&gt;&lt;/td&gt;</code>标签，他就像一个容器，可以容纳所有的元素</li>
</ol>
<h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><table>
<thead>
<tr>
<th>属性名</th>
<th>含义</th>
<th>常用属性值</th>
</tr>
</thead>
<tbody><tr>
<td>border</td>
<td>设置表格的边框 （默认 border &#x3D; “0” 无边框）</td>
<td>像素值</td>
</tr>
<tr>
<td>cellspacing</td>
<td>设置单元格与单元格边框之间的空白间距</td>
<td>像素值(默认为2像素)</td>
</tr>
<tr>
<td>cellpadding</td>
<td>设置单元格内边距</td>
<td>像素值(默认为2像素)</td>
</tr>
<tr>
<td>width</td>
<td>设置表格的宽度</td>
<td>像素值</td>
</tr>
<tr>
<td>height</td>
<td>设置表格的高度</td>
<td>像素值</td>
</tr>
<tr>
<td>align</td>
<td>设置表格在网页中的水平对齐方式</td>
<td>left、center、right</td>
</tr>
</tbody></table>
<h2 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h2><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签<code>&lt;th&gt;&lt;/th&gt;</code>替代相应的单元格标签<code>&lt;td&gt;&lt;/td&gt;</code>即可。</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/th.png"
                      
                >

<h2 id="表格结构（了解）"><a href="#表格结构（了解）" class="headerlink" title="表格结构（了解）"></a>表格结构（了解）</h2><p>在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体如下所示：</p>
<p><code>&lt;thead&gt;&lt;/thead&gt;</code>：用于定义表格的头部。</p>
<p>必须位于<code>&lt;table&gt;&lt;/table&gt;</code> 标签中，一般包含网页的logo和导航等头部信息。</p>
<p><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：用于定义表格的主体。</p>
<p>位于<code>&lt;table&gt;&lt;/table&gt;</code>标签中，一般包含网页中除头部和底部之外的其他内容。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/thead.png"
                      
                >

<h2 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h2><p><strong>表格的标题： <code>caption</code></strong></p>
<p><strong>定义和用法</strong></p>
<p>caption 元素定义表格标题。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>caption</code> 标签必须紧随 <code>table</code> 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p>
<h2 id="合并单元格-难点"><a href="#合并单元格-难点" class="headerlink" title="合并单元格(难点)"></a>合并单元格(难点)</h2><p>跨行合并：<code>rowspan</code>    跨列合并：<code>colspan</code></p>
<p>合并单元格的思想：</p>
<p>​     将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。</p>
<p>​     公式：  删除的个数  &#x3D;  合并的个数  - 1   </p>
<p>   合并的顺序 先上   先左 </p>
<h2 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h2><ol>
<li><p>表格提供了HTML 中定义表格式数据的方法。</p>
</li>
<li><p>表格中由行中的单元格组成。</p>
</li>
<li><p>表格中没有列元素，列的个数取决于行的单元格个数。</p>
</li>
<li><p>表格不要纠结于外观，那是CSS 的作用。</p>
<p><strong>表格的学习要求：  能手写表格结构，并且能合并单元格。</strong></p>
</li>
</ol>
<h1 id="表单标签-掌握"><a href="#表单标签-掌握" class="headerlink" title="表单标签(掌握)"></a>表单标签(掌握)</h1><p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/car.jpg"
                       width="500" 
                >

<p>目的是为了收集用户信息。</p>
<p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p>
<p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/bd.png"
                      
                >

<h2 id="表单控件："><a href="#表单控件：" class="headerlink" title="表单控件："></a>表单控件：</h2><p>包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p>
<h2 id="提示信息："><a href="#提示信息：" class="headerlink" title="提示信息："></a>提示信息：</h2><p>一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p>
<h2 id="表单域："><a href="#表单域：" class="headerlink" title="表单域："></a>表单域：</h2><p>他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p>
<h2 id="input-控件-重点"><a href="#input-控件-重点" class="headerlink" title="input 控件(重点)"></a>input 控件(重点)</h2><p>在上面的语法中，<code>&lt;input &gt;</code>标签为单标签，<code>type</code>属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了<code>type</code>属性之外，<code>&lt;input&gt;</code>标签还可以定义很多其他的属性，其常用属性如下表所示。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/input.png"
                      
                >

<h2 id="label标签-理解"><a href="#label标签-理解" class="headerlink" title="label标签(理解)"></a>label标签(理解)</h2><p><code>label</code> 标签为 <code>input</code> 元素定义标注（标签）。</p>
<p>作用：用于绑定一个表单元素, 当点击<code>label</code>标签的时候, 被绑定的表单元素就会获得输入焦点</p>
<p>如何绑定元素呢？</p>
<p><code>for</code> 属性规定 <code>label</code> 与哪个表单元素绑定。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h2><p>如果需要输入大量的信息，就需要用到<code>&lt;textarea&gt;&lt;/textarea&gt;</code>标签。通过<code>textarea</code>控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;每行中的字符数&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;显示的行数&quot;</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/textarea.png"
                      
                >

<h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>使用select控件定义下拉菜单的基本语法格式如下</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<ol>
<li><code>&lt;select&gt;&lt;/select&gt;</code>中至少应包含一对<code>&lt;option&gt;&lt;/option&gt;</code>。</li>
<li>在option 中定义selected &#x3D;” selected “时，当前项即为默认选中项。</li>
</ol>
<h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>常用属性：</p>
<ol>
<li><strong>Action</strong>  在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li>
<li><strong>method</strong>  用于设置表单数据的提交方式，其取值为get或post。</li>
<li><strong>name</strong>  用于指定表单的名称，以区分同一个页面中的多个表单。</li>
</ol>
<p>注意：  每个表单都应该有自己表单域。</p>
<h1 id="HTML5新标签与特性"><a href="#HTML5新标签与特性" class="headerlink" title="HTML5新标签与特性"></a>HTML5新标签与特性</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/html.jpg"
                      
                >

<h2 id="文档类型设定"><a href="#文档类型设定" class="headerlink" title="文档类型设定"></a>文档类型设定</h2><ul>
<li>document<ul>
<li>HTML:        sublime 输入  html:4s</li>
<li>XHTML:      sublime 输入  html:xt</li>
<li>HTML5        sublime 输入  html:5       <code>&lt;!DOCTYPE html&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="字符设定"><a href="#字符设定" class="headerlink" title="字符设定"></a>字符设定</h2><ul>
<li><code>&lt;meta http-equiv=&quot;charset&quot; content=&quot;utf-8&quot;&gt;</code>：HTML与XHTML中建议这样去写</li>
<li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>：HTML5的标签中建议这样去写</li>
</ul>
<h2 id="常用新标签"><a href="#常用新标签" class="headerlink" title="常用新标签"></a>常用新标签</h2><p> w3c  手册中文官网     :   <a class="link"   href="http://w3school.com.cn/" >http://w3school.com.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><p>header：定义文档的页眉 头部</p>
</li>
<li><p>nav：定义导航链接的部分</p>
</li>
<li><p>footer：定义文档或节的页脚 底部</p>
</li>
<li><p>article：定义文章。</p>
</li>
<li><p>section：定义文档中的节（section、区段）</p>
</li>
<li><p>aside：定义其所处内容之外的内容 侧边</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span> 语义 :定义页面的头部  页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>  语义 :定义导航栏 <span class="tag">&lt;/<span class="name">nav</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span> 语义: 定义 页面底部 页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span> 语义:  定义文章<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> 语义： 定义区域<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span> 语义： 定义其所处内容之外的内容 侧边<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>datalist   标签定义选项列表。请与 input 元素配合使用该元素</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入明星&quot;</span> <span class="attr">list</span>=<span class="string">&quot;star&quot;</span>/&gt;</span> <span class="comment">&lt;!--  input里面用 list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;star&quot;</span>&gt;</span>   <span class="comment">&lt;!-- datalist 里面用 id  来实现和 input 链接 --&gt;</span>  </span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>刘若英<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>刘晓庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>郭郭<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>fieldset</code> 元素可将表单内的相关元素分组，打包 <code>legend</code> 搭配使用</p>
</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>  标题</span><br><span class="line">    		用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    		密　码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="新增的input-type属性值："><a href="#新增的input-type属性值：" class="headerlink" title="新增的input type属性值："></a>新增的input type属性值：</h2><table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>使用示例</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>email</strong></td>
<td><code>&lt;input type=&quot;email&quot;&gt;</code></td>
<td>输入邮箱格式</td>
</tr>
<tr>
<td><strong>tel</strong></td>
<td><code>&lt;input type=&quot;tel&quot;&gt;</code></td>
<td>输入手机号码格式</td>
</tr>
<tr>
<td><strong>url</strong></td>
<td><code>&lt;input type=&quot;url&quot;&gt;</code></td>
<td>输入url格式</td>
</tr>
<tr>
<td><strong>number</strong></td>
<td><code>&lt;input type=&quot;number&quot;&gt;</code></td>
<td>输入数字格式</td>
</tr>
<tr>
<td><strong>search</strong></td>
<td><code>&lt;input type=&quot;search&quot;&gt;</code></td>
<td>搜索框（体现语义化）</td>
</tr>
<tr>
<td><strong>range</strong></td>
<td><code>&lt;input type=&quot;range&quot;&gt;</code></td>
<td>自由拖动滑块</td>
</tr>
<tr>
<td><strong>time</strong></td>
<td><code>&lt;input type=&quot;time&quot;&gt;</code></td>
<td>小时分钟</td>
</tr>
<tr>
<td><strong>date</strong></td>
<td><code>&lt;input type=&quot;date&quot;&gt;</code></td>
<td>年月日</td>
</tr>
<tr>
<td><strong>datetime</strong></td>
<td><code>&lt;input type=&quot;datetime&quot;&gt;</code></td>
<td>时间</td>
</tr>
<tr>
<td><strong>month</strong></td>
<td><code>&lt;input type=&quot;month&quot;&gt;</code></td>
<td>月年</td>
</tr>
<tr>
<td><strong>week</strong></td>
<td><code>&lt;input type=&quot;week&quot;&gt;</code></td>
<td>星期 年</td>
</tr>
</tbody></table>
<h2 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h2><table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>用法</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>placeholder</strong></td>
<td><code>&lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名&quot;&gt;</code></td>
<td>占位符  当用户输入的时候 里面的文字消失  删除所有文字，自动返回</td>
</tr>
<tr>
<td><strong>autofocus</strong></td>
<td><code>&lt;input type=&quot;text&quot; autofocus&gt;</code></td>
<td>规定当页面加载时 input 元素应该自动获得焦点</td>
</tr>
<tr>
<td><strong>multiple</strong></td>
<td><code>&lt;input type=&quot;file&quot; multiple&gt;</code></td>
<td>多文件上传</td>
</tr>
<tr>
<td><strong>autocomplete</strong></td>
<td><code>&lt;input type=&quot;text&quot; autocomplete=&quot;off&quot;&gt;</code></td>
<td>规定表单是否应该启用自动完成功能  有2个值，一个是on 一个是off      on 代表记录已经输入的值  1.autocomplete 首先需要提交按钮 <br/>2.这个表单您必须给他名字</td>
</tr>
<tr>
<td><strong>required</strong></td>
<td><code>&lt;input type=&quot;text&quot; required&gt;</code></td>
<td>必填项  内容不能为空</td>
</tr>
<tr>
<td><strong>accesskey</strong></td>
<td><code>&lt;input type=&quot;text&quot; accesskey=&quot;s&quot;&gt;</code></td>
<td>规定激活（使元素获得焦点）元素的快捷键   采用 alt + s的形式</td>
</tr>
</tbody></table>
<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userPhone&quot;</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPhone&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPhone&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^1\d&#123;10&#125;$&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮箱地址:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;collage&quot;</span>&gt;</span>所属学院:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;collage&quot;</span> <span class="attr">id</span>=<span class="string">&quot;collage&quot;</span> <span class="attr">list</span>=<span class="string">&quot;cList&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;cList&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;前端与移动开发学院&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;java学院&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;c++学院&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;score&quot;</span>&gt;</span>入学成绩:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案思密达<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入学生名字&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span>&gt;</span>所属学院:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择学院&quot;</span> <span class="attr">list</span>=<span class="string">&quot;xueyuan&quot;</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;xueyuan&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>java学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>前端学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>php学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">option</span>&gt;</span>设计学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    	<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span>&gt;</span>出生日期:   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span>&gt;</span>成绩:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span>&gt;</span>毕业时间:  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inTime&quot;</span>&gt;</span>入学日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inTime&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inTime&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;leaveTime&quot;</span>&gt;</span>毕业日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;leaveTime&quot;</span> <span class="attr">name</span>=<span class="string">&quot;leaveTime&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><ul>
<li>embed：标签定义嵌入的内容</li>
<li>audio：播放音频</li>
<li>video：播放视频</li>
</ul>
<h3 id="多媒体-embed（会使用）"><a href="#多媒体-embed（会使用）" class="headerlink" title="多媒体 embed（会使用）"></a>多媒体 embed（会使用）</h3><p>embed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。</p>
<p>因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA==/v.swf&quot;</span> <span class="attr">allowFullScreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">allowScriptAccess</span>=<span class="string">&quot;always&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/embed.png"
                      
                >

<p> 优酷，土豆，爱奇艺，腾讯、乐视等等</p>
<ol>
<li>先上传   </li>
<li>在分享</li>
</ol>
<h3 id="多媒体-audio"><a href="#多媒体-audio" class="headerlink" title="多媒体 audio"></a>多媒体 audio</h3><p>HTML5通过<code>&lt;audio&gt;</code>标签来解决音频播放的问题。</p>
<p>使用相当简单，如下图所示</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/1498468026526.png"
                      alt="1498468026526"
                > </p>
<p>并且可以通过附加属性可以更友好控制音频的播放，如：</p>
<p><code>autoplay</code> 自动播放</p>
<p><code>controls</code> 是否显不默认播放控件</p>
<p><code>loop</code> 循环播放   <code>loop = 2</code> 就是循环2次   <code>loop</code>  或者  <code>loop = &quot;-1&quot;</code>   无限循环</p>
<p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/1498468041058.png"
                      alt="1498468041058"
                > </p>
<p>多浏览器支持的方案，如下图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/1498468052965.png"
                      alt="1498468052965"
                > </p>
<h3 id="多媒体-video"><a href="#多媒体-video" class="headerlink" title="多媒体 video"></a>多媒体 video</h3><p>HTML5通过<code>&lt;audio&gt;</code>标签来解决音频播放的问题。</p>
<p>同音频播放一样，<code>&lt;video&gt;</code>使用也相当简单，如下图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/1498468072194.png"
                      alt="1498468072194"
                > </p>
<p>同样，通过附加属性可以更友好的控制视频的播放</p>
<p><code>autoplay</code> 自动播放</p>
<p><code>controls</code> 是否显示默认播放控件</p>
<p><code>loop</code> 循环播放</p>
<p><code>width</code> 设置播放窗口宽度</p>
<p><code>height</code> 设置播放窗口的高度</p>
<p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/1498468086199.png"
                      alt="1498468086199"
                > </p>
<p><strong>多浏览器支持的方案，如下图</strong>****</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/HTML-notes/media/1498468097509.png"
                      alt="1498468097509"
                ></p>
<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p> HTML 第二天的主题：</p>
<p>  熟悉列表—  会使用表格  —  掌握常用表单 </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 笔记</title>
    <url>/page/20230523094704/</url>
    <content><![CDATA[<hr>
<p>学习目标:</p>
<ul>
<li>掌握编程的基本思维</li>
<li>掌握编程的基本语法</li>
</ul>
<hr>
<p><code>项目地址:https://github.com/babbittry/Front-end-notes</code></p>
<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p>HTML和CSS   京东</p>
<h2 id="网页、网站和应用程序"><a href="#网页、网站和应用程序" class="headerlink" title="网页、网站和应用程序"></a>网页、网站和应用程序</h2><p>网页：单独的一个页面<br>网站：一些列相关的页面组成到一起<br>应用程序：可以和用户产生交互，并实现某种功能。</p>
<h2 id="演示JavaScript的强大"><a href="#演示JavaScript的强大" class="headerlink" title="演示JavaScript的强大"></a>演示JavaScript的强大</h2><p><a class="link"   href="http://impress.github.io/impress.js/" >http://impress.github.io/impress.js/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://naotu.baidu.com/" >http://naotu.baidu.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://codecombat.com/" >https://codecombat.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://ide.codemao.cn/" >https://ide.codemao.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>需要翻墙<br><a class="link"   href="https://developers.google.com/blockly/" >https://developers.google.com/blockly/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>blockly迷宫<br><a class="link"   href="https://blockly-games.appspot.com/" >https://blockly-games.appspot.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>blockly迷宫不需要翻墙<br><a class="link"   href="https://blockly.uieee.com/" >https://blockly.uieee.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><p>HTML CSS </p>
<p>JavaScript 编程语言   流程控制</p>
<p>Netscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。Java和JavaScript的关系就像张雨和张雨生的关系，只是名字很像。</p>
<p>​	Java  服务器端的编程语言</p>
<p>​	JavaScript  运行在客户端(浏览器)的编程语言</p>
<blockquote>
<p>JavaScript是一种运行在<em><strong>客户端</strong></em> 的<em><strong>脚本语言</strong></em><br>JavaScript的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p>
</blockquote>
<h3 id="JavaScript最初的目的"><a href="#JavaScript最初的目的" class="headerlink" title="JavaScript最初的目的"></a>JavaScript最初的目的</h3><p>演示：<a class="link"   href="http://baixiu.uieee.com/admin/login.php" >http://baixiu.uieee.com/admin/login.php <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>最初的目的是为了处理表单的验证操作。</p>
<h3 id="JavaScript现在的意义-应用场景"><a href="#JavaScript现在的意义-应用场景" class="headerlink" title="JavaScript现在的意义(应用场景)"></a>JavaScript现在的意义(应用场景)</h3><p>JavaScript 发展到现在几乎无所不能。</p>
<ol>
<li>网页特效</li>
<li>服务端开发(Node.js)</li>
<li>命令行工具(Node.js)</li>
<li>桌面程序(Electron)</li>
<li>App(Cordova)</li>
<li>控制硬件-物联网(Ruff)</li>
<li>游戏开发(cocos2d-js)</li>
</ol>
<h3 id="JavaScript和HTML、CSS的区别"><a href="#JavaScript和HTML、CSS的区别" class="headerlink" title="JavaScript和HTML、CSS的区别"></a>JavaScript和HTML、CSS的区别</h3><ol>
<li>HTML：提供网页的结构，提供网页中的内容</li>
<li>CSS: 用来美化网页</li>
<li>JavaScript: 可以用来控制网页内容，给网页增加动态的效果</li>
</ol>
<h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/1496912475691.png"
                      alt="1496912475691"
                ></p>
<h3 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h3><p>ECMA 欧洲计算机制造联合会</p>
<p>网景：JavaScript</p>
<p>微软：JScript</p>
<p>定义了JavaScript的语法规范  </p>
<p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p>
<h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h3><p>一套操作浏览器功能的API</p>
<p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p>
<h3 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h3><p>一套操作页面元素的API</p>
<p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p>
<h2 id="JavaScript初体验"><a href="#JavaScript初体验" class="headerlink" title="JavaScript初体验"></a>JavaScript初体验</h2><p>CSS：行内样式、嵌入样式、外部样式</p>
<h3 id="JavaScript的书写位置"><a href="#JavaScript的书写位置" class="headerlink" title="JavaScript的书写位置"></a>JavaScript的书写位置</h3><ul>
<li>写在行内</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World&#x27;)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>写在script标签中</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>写在外部js文件中，在页面引入</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>注意点</p>
<p><em><strong>引用外部 js 文件的script标签中不可以写JavaScript代码</strong></em></p>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><ul>
<li><p>什么是变量</p>
<p>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</p>
</li>
<li><p>为什么要使用变量</p>
<p>使用变量可以方便的获取或者修改内存中的数据</p>
</li>
</ul>
<h3 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h3><ul>
<li>var声明变量</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>变量的赋值</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line">age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>同时声明多个变量（字符串用引号引起来，推荐使用单引号）</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age, name, sex;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">name = <span class="string">&#x27;zs&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>同时声明多个变量并赋值</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>, name = <span class="string">&#x27;zs&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/1496981558575.png"
                      alt="1496981558575"
                ></p>
<h3 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h3><ul>
<li><p>规则 - 必须遵守的，不遵守会报错</p>
<ul>
<li><p>由字母、数字、下划线、$符号组成，不能以数字开头</p>
</li>
<li><p>不能是关键字和保留字，例如：for、while。</p>
</li>
<li><p>区分大小写</p>
</li>
</ul>
</li>
<li><p>规范 - 建议遵守的，不遵守不会报错</p>
<ul>
<li>变量名必须有意义</li>
<li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword</li>
</ul>
</li>
<li><p>下面哪些变量名不合法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a	    </span><br><span class="line">1</span><br><span class="line">age18</span><br><span class="line">18age</span><br><span class="line">name</span><br><span class="line">$name</span><br><span class="line">_sex</span><br><span class="line">&amp;sex</span><br><span class="line">theworld  theWorld</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ol>
<li>交换两个变量的值</li>
<li>不使用临时变量，交换两个数值变量的值</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code></p>
<h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><ul>
<li><p>数值字面量：数值的固定值的表示法</p>
<p>110 1024  60.5</p>
</li>
<li><p>进制</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">十进制</span><br><span class="line">	var num = 9;</span><br><span class="line">	进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。</span><br><span class="line">十六进制</span><br><span class="line">	var num = 0xA;</span><br><span class="line">	数字序列范围：0~9以及A~F</span><br><span class="line">八进制</span><br><span class="line">    var num1 = 07;   // 对应十进制的7</span><br><span class="line">    var num2 = 019;  // 对应十进制的19</span><br><span class="line">    var num3 = 08;   // 对应十进制的8</span><br><span class="line">    数字序列范围：0~7</span><br><span class="line">    如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>浮点数</p>
<ul>
<li>浮点数的精度问题</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">浮点数</span><br><span class="line">	var n = 5e-324;   // 科学计数法  5乘以10的-324次方  </span><br><span class="line">浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数</span><br><span class="line">   var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004</span><br><span class="line">   console.log(0.07 * 100);</span><br><span class="line">   不要判断两个浮点数是否相等</span><br></pre></td></tr></table></figure></div>

<ul>
<li>数值范围</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">最小值：Number.MIN_VALUE，这个值为： 5e-324</span><br><span class="line">最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</span><br><span class="line">无穷大：Infinity</span><br><span class="line">无穷小：-Infinity</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>数值判断</p>
<ul>
<li>NaN：not a number<ul>
<li>NaN 与任何值都不相等，包括他本身</li>
</ul>
</li>
<li>isNaN: is not a number（结果是一个boolean值）</li>
</ul>
</li>
</ul>
<h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>‘abc’   “abc”</p>
<ul>
<li><p>字符串字面量</p>
<p>‘程序猿’，’程序媛’, “黑马程序猿”</p>
<p>思考：如何打印以下字符串。<br>我是一个”正直”的人<br>我很喜欢”黑马’程序猿’”</p>
</li>
<li><p>转义符</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/1498289626813.png"
                      alt="1498289626813"
                ></p>
</li>
<li><p>字符串长度</p>
<p>length属性用来获取字符串的长度</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;黑马程序猿 Hello World&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>字符串拼接</p>
<p>字符串拼接使用 + 连接</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> + <span class="number">11</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;100&#x27;</span> + <span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span> + <span class="number">11</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;male:&#x27;</span> + <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<ol>
<li>两边只要有一个是字符串，那么+就是字符串拼接功能</li>
<li>两边如果都是数字，那么就是算术功能。</li>
</ol>
</li>
</ul>
<h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><ul>
<li><code>Boolean</code>字面量： <code> true</code>和<code>false</code>，区分大小写</li>
<li>计算机内部存储：true为1，false为0</li>
</ul>
<h4 id="Undefined和Null"><a href="#Undefined和Null" class="headerlink" title="Undefined和Null"></a>Undefined和Null</h4><ol>
<li>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined</li>
<li>null表示一个空，变量的值如果想为null，必须手动设置</li>
</ol>
<h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>​	Object</p>
<h3 id="获取变量的类型"><a href="#获取变量的类型" class="headerlink" title="获取变量的类型"></a>获取变量的类型</h3><p>typeof</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age);  <span class="comment">// &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>在源代码中一个固定值的表示法。</p>
<p>数值字面量：8, 9, 10</p>
<p>字符串字面量：’黑马程序员’, “大前端”</p>
<p>布尔字面量：true，false</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>用来描述下面一个或多行代码的作用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;hm&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>用来注释多条代码</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var age = 18;</span></span><br><span class="line"><span class="comment">var name = &#x27;zs&#x27;;</span></span><br><span class="line"><span class="comment">console.log(name, age);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>如何使用谷歌浏览器，快速的查看数据类型？</p>
<p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的</p>
<h3 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h3><ul>
<li><p>toString()</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num = 5;</span><br><span class="line">console.log(num.toString());</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>String()</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>拼接字符串方式</p>
<p>num  +  “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p>
</li>
</ul>
<h3 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h3><ul>
<li><p>Number()</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>parseInt()</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;12.3abc&quot;</span>);  <span class="comment">// 返回12，如果第一个字符是数字会解析知道遇到非数字结束</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;abc123&quot;</span>);   <span class="comment">// 返回NaN，如果第一个字符不是数字或者符号就返回NaN</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>parseFloat()</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">parseFloat()把字符串转换成浮点数</span><br><span class="line">parseFloat()和parseInt非常相似，不同之处在与</span><br><span class="line">	parseFloat会解析第一个. 遇到第二个.或者非数字结束</span><br><span class="line">	如果解析的内容里只有整数，解析成整数</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>+，-0等运算</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;500&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+str);		<span class="comment">// 取正</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-str);		<span class="comment">// 取负</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str - <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h3><ul>
<li>Boolean()</li>
</ul>
<p>0  ‘’(空字符串) null undefined NaN 会转换成false  （只有这5种情况转化成false）</p>
<p>其它都会转换成true</p>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>运算符  operator </p>
<p>5 + 6   </p>
<p>表达式    组成：操作数和操作符，会有一个结果</p>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ - * / %（取余数）  </span><br></pre></td></tr></table></figure></div>

<h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>一元运算符：只有一个操作数的运算符</p>
<p>二元运算符：5 + 6  两个操作数的运算符 </p>
<p>++  自身加1</p>
<p>– 自身减1</p>
<ul>
<li><p>前置++</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line">++ num1; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">6</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + ++ num2);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>后置++</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line">num1 ++;    </span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">6</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2 ++);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>猜猜看</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = ++a + ++a; <span class="variable language_">console</span>.<span class="title function_">log</span>(b);    </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = a++ + ++a; <span class="variable language_">console</span>.<span class="title function_">log</span>(b);    </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = a++ + a++; <span class="variable language_">console</span>.<span class="title function_">log</span>(b);    </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; <span class="keyword">var</span> b = ++a + a++; <span class="variable language_">console</span>.<span class="title function_">log</span>(b);  </span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="逻辑运算符-布尔运算符"><a href="#逻辑运算符-布尔运算符" class="headerlink" title="逻辑运算符(布尔运算符)"></a>逻辑运算符(布尔运算符)</h3><pre><code>&amp;&amp; 与 两个操作数同时为true，结果为true，否则都是false
|| 或 两个操作数有一个为true，结果为true，否则为false
!  非  取反
</code></pre>
<h3 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h3><pre><code>&lt;  &gt;  &gt;=  &lt;= == != === !==
</code></pre>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">==与===的区别：==只进行值得比较，===类型和值同时相等，则相等</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;55&#x27;</span> == <span class="number">55</span>;  	<span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">&#x27;55&#x27;</span> === <span class="number">55</span>; 	<span class="comment">// false 值相等，类型不相等</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">55</span> === <span class="number">55</span>; 	<span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>&#x3D;   +&#x3D;   -&#x3D;   *&#x3D;   &#x2F;&#x3D;   %&#x3D;</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 10;</span><br><span class="line">var b = &#x27;10&#x27;;</span><br><span class="line">console.log(a == b);	//true	两个等号是将string转成数值然后比较</span><br><span class="line">console.log(a === b);	//false 三个等号是判断类型和值是否一致</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">num += <span class="number">5</span>;	<span class="comment">//相当于  num = num + 5;</span></span><br></pre></td></tr></table></figure></div>


<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><pre><code>优先级从高到底
    1. ()  优先级最高
    2. 一元运算符  ++   --   !
    3. 算数运算符  先*  /  %   后 +   -
    4. 关系运算符  &gt;   &gt;=   &lt;   &lt;=
    5. 相等运算符   ==   !=    ===    !==
    6. 逻辑运算符 先&amp;&amp;   后||
    7. 赋值运算符
</code></pre>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 练习1：</span></span><br><span class="line"><span class="number">4</span> &gt;= <span class="number">6</span> || <span class="string">&#x27;人&#x27;</span> != <span class="string">&#x27;阿凡达&#x27;</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span></span><br><span class="line"><span class="comment">// 练习2：</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="number">5</span> == num / <span class="number">2</span> &amp;&amp; (<span class="number">2</span> + <span class="number">2</span> * num).<span class="title function_">toString</span>() === <span class="string">&#x27;22&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><blockquote>
<p>一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。</p>
</blockquote>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote>
<p>语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句</p>
</blockquote>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><blockquote>
<p>程序的三种基本结构</p>
</blockquote>
<h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p> 从上到下执行的代码就是顺序结构</p>
<p><strong>程序默认就是由上到下顺序执行的</strong></p>
<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>根据不同的情况，执行对应代码</p>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环结构：重复做一件事情</p>
<h2 id="分支结构-1"><a href="#分支结构-1" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>语法结构</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>) &#123;</span><br><span class="line">  <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 否则执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件1 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件2 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件3 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 最后默认执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>案例：<br>    求两个数的最大数<br>    判断一个数是偶数还是奇数<br>    分数转换，把百分制转换成ABCDE   &lt;60  E  60-70 D  70-80 C  80-90 B  90 - 100 A<br>作业：<br>    判断一个年份是闰年还是平年<br>      闰年：能被4整除，但不能被100整除的年份 或者 能被400整除的年份<br>    判断一个人的年龄是否满18岁(是否成年)</p>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><pre><code>表达式1 ? 表达式2 : 表达式3
是对if……else语句的一种简化写法
</code></pre>
<p>案例：<br>    是否年满18岁<br>    从两个数中找最大值</p>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>语法格式:</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">3</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="attr">n</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<pre><code>break可以省略，如果省略，代码会继续执行下一个case
switch 语句在比较值时使用的是全等操作符（===）, 因此不会发生类型转换（例如，字符串&#39;10&#39; 不等于数值 10）
</code></pre>
<p>案例：<br>    显示星期几<br>    素质教育（把分数变成ABCDE）千万不要写100个case哟</p>
<h3 id="布尔类型的隐式转换"><a href="#布尔类型的隐式转换" class="headerlink" title="布尔类型的隐式转换"></a>布尔类型的隐式转换</h3><p>流程控制语句会把后面的值隐式转换成布尔类型</p>
<pre><code>转换为true   非空字符串  非0数字  true 任何对象
转换成false  空字符串  0  false  null  undefined
</code></pre>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结果是什么？</span></span><br><span class="line"><span class="keyword">var</span> a = !!<span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure></div>



<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br><span class="line"><span class="comment">// 会自动把message转换成false</span></span><br><span class="line"><span class="keyword">if</span> (message) &#123;     </span><br><span class="line">  <span class="comment">// todo...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="循环结构-1"><a href="#循环结构-1" class="headerlink" title="循环结构"></a>循环结构</h2><blockquote>
<p>在javascript中，循环语句有三种，while、do..while、for循环。</p>
</blockquote>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>基本语法：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当循环条件为true时，执行循环体，</span></span><br><span class="line"><span class="comment">// 当循环条件为false时，结束循环。</span></span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>代码示例：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算1-100之间所有数的和</span></span><br><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 判断条件</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">  sum += i;</span><br><span class="line">  <span class="comment">// 自增</span></span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure></div>

<p>案例：<br>    打印100以内 7的倍数<br>    打印100以内所有偶数<br>    打印100以内所有偶数的和<br>作业：<br>    打印100以内的奇数<br>    打印100以内的奇数的和</p>
<h3 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h3><blockquote>
<p>do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。</p>
</blockquote>
<p>基础语法：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体;</span></span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure></div>

<p>代码示例：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化变量</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  sum += i;<span class="comment">//循环体</span></span><br><span class="line">  i++;<span class="comment">//自增</span></span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);<span class="comment">//循环条件</span></span><br></pre></td></tr></table></figure></div>

<p>案例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">求100以内所有3的倍数的和</span><br><span class="line">使用do-while循环：输出询问“我爱你，嫁给我吧？”，选择“你喜欢我吗？(y/n):&quot;，如果输入为y则打印”我们形影不离“，若输入为n,则继续询问 </span><br></pre></td></tr></table></figure></div>

<h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><blockquote>
<p> while和do…while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便</p>
</blockquote>
<p>for循环语法：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for循环的表达式之间用的是;号分隔的，千万不要写成,</span></span><br><span class="line"><span class="keyword">for</span> (初始化表达式<span class="number">1</span>; 判断表达式<span class="number">2</span>; 自增表达式<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环体4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行顺序：1243  —-  243   —–243(直到循环条件变成false)</p>
<ol>
<li>初始化表达式</li>
<li>判断表达式</li>
<li>自增表达式</li>
<li>循环体</li>
</ol>
<p>案例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">打印1-100之间所有数</span><br><span class="line">求1-100之间所有数的和</span><br><span class="line">求1-100之间所有数的平均值</span><br><span class="line">求1-100之间所有偶数的和</span><br><span class="line">同时求1-100之间所有偶数和奇数的和</span><br><span class="line">打印正方形</span><br><span class="line">// 使用拼字符串的方法的原因</span><br><span class="line">// console.log 输出重复内容的问题</span><br><span class="line">// console.log 默认输出内容介绍后有换行</span><br><span class="line">var start = &#x27;&#x27;;</span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  for (var j = 0; j &lt; 10; j++) &#123;</span><br><span class="line">    start += &#x27;* &#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  start += &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(start);</span><br><span class="line">打印直角三角形</span><br><span class="line">var start = &#x27;&#x27;;</span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  for (var j = i; j &lt; 10; j++) &#123;</span><br><span class="line">    start += &#x27;* &#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  start += &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(start);</span><br><span class="line"></span><br><span class="line">打印9*9乘法表</span><br><span class="line">var str = &#x27;&#x27;;</span><br><span class="line">for (var i = 1; i &lt;= 9; i++) &#123;</span><br><span class="line">  for (var j = i; j &lt;=9; j++) &#123;</span><br><span class="line">    str += i + &#x27; * &#x27; + j + &#x27; = &#x27; + i * j + &#x27;\t&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  str += &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">console.log(str);</span><br></pre></td></tr></table></figure></div>

<p>作业：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">求1-100之间所有数的乘积</span><br><span class="line">求1-100之间所有奇数的和</span><br><span class="line">计算1-100之间能3整除的数的和</span><br><span class="line">计算1-100之间不能被7整除的数的和</span><br><span class="line">// 讲解思路。如果不会写程序，可以先把数学公式准备好</span><br><span class="line">本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？</span><br><span class="line">有个人想知道，一年之内一对兔子能繁殖多少对？于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？（兔子的规律为数列，1，1，2，3，5，8，13，21）</span><br></pre></td></tr></table></figure></div>


<h3 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h3><blockquote>
<p>break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）</p>
<p>continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）</p>
</blockquote>
<p>案例：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">求整数<span class="number">1</span>～<span class="number">100</span>的累加值，但要求碰到个位为<span class="number">3</span>的数则停止累加</span><br><span class="line">求整数<span class="number">1</span>～<span class="number">100</span>的累加值，但要求跳过所有个位为<span class="number">3</span>的数</span><br></pre></td></tr></table></figure></div>

<p>作业：</p>
<p>求1-100之间不能被7整除的整数的和（用continue）<br>求200-300之间所有的奇数的和（用continue）<br>求200-300之间第一个能被7整数的数（break）</p>
<h3 id="调试debug"><a href="#调试debug" class="headerlink" title="调试debug"></a>调试debug</h3><p>调试的目的是确定错误的原因和位置，并解决错误</p>
<p>错误</p>
<ul>
<li>语法错误</li>
<li>逻辑错误</li>
</ul>
<p>过去调试JavaScript的方式</p>
<ul>
<li><p>alert()</p>
</li>
<li><p>console.log()</p>
</li>
<li><p>断点调试</p>
</li>
</ul>
<blockquote>
<p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p>
</blockquote>
<ul>
<li>调试步骤</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">浏览器中按<span class="variable constant_">F12</span>--&gt;sources--&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</span><br></pre></td></tr></table></figure></div>

<ul>
<li>调试中的相关操作</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Watch</span>: 监视，通过watch可以监视变量的值的变化，非常的常用。</span><br><span class="line"><span class="attr">F10</span>: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br><span class="line"><span class="variable constant_">F8</span>：跳到下一个断点处，如果后面没有断点了，则程序执行结束。</span><br></pre></td></tr></table></figure></div>

<p>tips: <em><strong>监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。</strong></em></p>
<ol>
<li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li>
<li>今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。</li>
</ol>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="为什么要学习数组"><a href="#为什么要学习数组" class="headerlink" title="为什么要学习数组"></a>为什么要学习数组</h3><blockquote>
<p>之前学习的数据类型，只能存储一个值(比如：Number&#x2F;String。我们想存储班级中所有学生的姓名，此时该如何存储？</p>
</blockquote>
<h3 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h3><blockquote>
<p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。</p>
</blockquote>
<h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><blockquote>
<p>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。</p>
</blockquote>
<p>通过数组字面量创建数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []; </span><br><span class="line"><span class="comment">// 创建一个包含3个数值的数组，多个数组项以逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]; </span><br><span class="line"><span class="comment">// 创建一个包含2个字符串的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过数组的length属性获取数组的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 可以设置length属性改变数组中元素的个数</span></span><br><span class="line">arr3.<span class="property">length</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h3><p>数组的取值</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：数组名[下标]	下标又称索引</span></span><br><span class="line"><span class="comment">// 功能：获取数组对应下标的那个值，如果下标不存在，则返回undefined。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr[<span class="number">0</span>];	<span class="comment">// red</span></span><br><span class="line">arr[<span class="number">2</span>]; <span class="comment">// blue</span></span><br><span class="line">arr[<span class="number">3</span>]; <span class="comment">// 这个数组的最大下标为2,因此返回undefined</span></span><br></pre></td></tr></table></figure></div>


<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><blockquote>
<p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p>
</blockquote>
<p>数组遍历的基本语法：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	<span class="comment">// 数组遍历的固定结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><p>数组的赋值</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：数组名[下标/索引] = 值;</span></span><br><span class="line"><span class="comment">// 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="comment">// 把red替换成了yellow</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"><span class="comment">// 给数组新增加了一个pink的值</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">&quot;pink&quot;</span>;</span><br></pre></td></tr></table></figure></div>
<h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">求一组数中的所有数的和和平均值</span><br><span class="line">求一组数中的最大值和最小值，以及所在位置</span><br><span class="line">将字符串数组用|或其他符号分割</span><br><span class="line">要求将数组中的0项去掉，将不为0的值存入一个新的数组，生成新的数组</span><br><span class="line">翻转数组</span><br><span class="line">冒泡排序，从小到大</span><br></pre></td></tr></table></figure></div>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="为什么要有函数"><a href="#为什么要有函数" class="headerlink" title="为什么要有函数"></a>为什么要有函数</h3><blockquote>
<p>如果要在多个地方求1-100之间所有数的和，应该怎么做？</p>
</blockquote>
<h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><blockquote>
<p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用</p>
<p>函数的作用就是封装一段代码，将来可以重复使用</p>
</blockquote>
<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ul>
<li>函数声明</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>函数表达式</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>特点：</p>
<p>函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。<br>函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 <code>tellStory</code> <code>sayHello</code>等</p>
</li>
</ul>
<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ul>
<li>调用函数的语法：</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>特点：</p>
<p>函数体只有在调用的时候才会执行，调用需要()进行调用。<br>可以调用多次(重复使用)</p>
</li>
</ul>
<p>代码示例：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;吃了没？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1-100之间所有数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span>  i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">getSum</span>();</span><br></pre></td></tr></table></figure></div>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ul>
<li>为什么要有参数</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然上面代码可以重复调用，但是只能计算1-100之间的值</span></span><br><span class="line"><span class="comment">// 如果想要计算n-m之间所有数的和，应该怎么办呢？</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>语法：</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部</span></span><br><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参...)&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>形参和实参</p>
<blockquote>
<ol>
<li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。</li>
<li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li>
</ol>
</blockquote>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>, y = <span class="number">6</span>;</span><br><span class="line"><span class="title function_">fn</span>(x,y); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y</span></span><br></pre></td></tr></table></figure></div>

<p><strong>注意</strong>：调用的时候，只是把实参赋值给形参，所以在函数内部改变形参的值，不会改变外部实参的值</p>
<h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ul>
<li>求1-n之间所有数的和</li>
<li>求n-m之间所有数额和</li>
<li>圆的面积</li>
<li>求2个数中的最大值</li>
<li>求3个数中的最大值</li>
<li>判断一个数是否是素数</li>
</ul>
<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><blockquote>
<p>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值</p>
</blockquote>
<p>返回值语法：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个带返回值的函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参...)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过变量来接收这个返回值</span></span><br><span class="line"><span class="keyword">var</span> 变量 = 函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<p>函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。</p>
<p>返回值详解：<br>    如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined<br>    如果函数使用 return语句，那么跟在return后面的值，就成了函数的返回值<br>    如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined<br>    函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。</p>
<pre><code>推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。
</code></pre>
<h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><ul>
<li>求阶乘</li>
<li>求1!+2!+3!+….+n!</li>
<li>求一组数中的最大值</li>
<li>求一组数中的最小值</li>
</ul>
<h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><blockquote>
<p>JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此及可以进行遍历 </p>
</blockquote>
<p>作用，当实参会发生变化的时候，不写形参，只写一个（）</p>
<ul>
<li>案例<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">求任意个数的最大值</span><br><span class="line">求任意个数的和</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">求斐波那契数列<span class="title class_">Fibonacci</span>中的第n个数是多少？      <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21.</span>..</span><br><span class="line">翻转数组，返回一个新数组</span><br><span class="line">对数组排序，从小到大</span><br><span class="line">输入一个年份，判断是否是闰年[闰年：能被<span class="number">4</span>整数并且不能被<span class="number">100</span>整数，或者能被<span class="number">400</span>整数]</span><br><span class="line">输入某年某月某日，判断这一天是这一年的第几天？</span><br></pre></td></tr></table></figure></div>

<h2 id="函数其它"><a href="#函数其它" class="headerlink" title="函数其它"></a>函数其它</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><blockquote>
<p>匿名函数：没有名字的函数</p>
</blockquote>
<p>匿名函数如何使用：</p>
<pre><code>将匿名函数赋值给一个变量，这样就可以通过变量进行调用
匿名函数自调用
</code></pre>
<p>关于自执行函数（匿名函数自调用）的作用：防止全局变量污染。</p>
<h3 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h3><blockquote>
<p>匿名函数不能通过直接调用来执行，因此可以通过匿名函数的自调用的方式来执行</p>
</blockquote>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="number">123</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></div>
<h3 id="函数是一种数据类型"><a href="#函数是一种数据类型" class="headerlink" title="函数是一种数据类型"></a>函数是一种数据类型</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> fn);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>函数作为参数</li>
</ul>
<p>因为函数也是一种类型，可以把函数作为两一个函数的参数，在两一个函数中调用</p>
<ul>
<li>函数做为返回值</li>
</ul>
<p>因为函数是一种类型，所以可以把函数可以作为返回值从函数内部返回，这种用法在后面很常见。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(a+b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">15</span>)();</span><br></pre></td></tr></table></figure></div>

<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><pre><code>1.命名规范	
    变量、函数的命名必须要有意义
    变量的名称一般是名词
    函数的名称一般是动词
2.变量规范   
    var name = &#39;zs&#39;;	// 操作符的前后加空格
3.注释规范
    // 这里是注释（//和后面的字之间有一个空格）
4.空格规范
    if (true) &#123;
        
    &#125;
    for (var i = 1; i &lt; 100; i++) &#123;
        
    &#125;
5.换行规范
    var arr = [1, 2, 3, 4];
    if (a &gt; b) &#123;
      
    &#125;
    for(var i = 0; i &lt; 10; i++) &#123;
      
    &#125;
    function fn() &#123;
      
    &#125;
</code></pre>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域：变量可以起作用的范围</p>
<h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul>
<li><p>全局变量</p>
<p>在任何地方都可以访问到的变量就是全局变量，对应全局作用域</p>
</li>
<li><p>局部变量</p>
<p>只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">不使用var声明的变量是全局变量，不推荐使用。</span><br><span class="line">变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁</span><br></pre></td></tr></table></figure></div>

<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。<br><strong>在es5之前没有块级作用域的的概念,只有函数作用域</strong>，现阶段可以认为JavaScript没有块级作用域</p>
<h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。</p>
<p><strong>在 js 中词法作用域规则:</strong></p>
<ul>
<li>函数允许访问函数外的数据.</li>
<li>整个代码结构中只有函数可以限定作用域.</li>
<li>作用域规则首先使用提升规则分析</li>
<li>如果当前作用规则中有名字了, 就不考虑外面的名字</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( num );</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="literal">false</span> ) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( num ); <span class="comment">// undefiend</span></span><br></pre></td></tr></table></figure></div>

<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><pre><code>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。

将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。
</code></pre>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例1：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params"></span>) &#123;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/06-1.png"
                      alt="06-1"
                ></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>( num );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/06-2.png"
                      alt="06-2"
                ></p>
<h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><blockquote>
<p>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p>
</blockquote>
<p>预解析过程：</p>
<ol>
<li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li>
<li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li>
<li>先提升var，在提升function</li>
</ol>
<p>JavaScript的执行过程</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(a);<span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">abc</span>();</span><br><span class="line"><span class="comment">// 如果变量和函数同名的话，函数优先</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aaaaa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure></div>



<h3 id="全局解析规则"><a href="#全局解析规则" class="headerlink" title="全局解析规则"></a>全局解析规则</h3><h3 id="函数内部解析规则"><a href="#函数内部解析规则" class="headerlink" title="函数内部解析规则"></a>函数内部解析规则</h3><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><ul>
<li><p>变量提升</p>
<p>定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。</p>
</li>
<li><p>函数提升</p>
<p>JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</p>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、-----------------------------------</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、-----------------------------------</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3、-----------------------------------</span></span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="为什么要有对象"><a href="#为什么要有对象" class="headerlink" title="为什么要有对象"></a>为什么要有对象</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printPerson</span>(<span class="params">name, age, sex....</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的参数如果特别多的话，可以使用对象简化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printPerson</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。</span><br><span class="line">举例： 一部车，一个手机</span><br><span class="line">车是一类事物，门口停的那辆车才是对象</span><br><span class="line">	特征：红色、四个轮子</span><br><span class="line">	行为：驾驶、刹车</span><br></pre></td></tr></table></figure></div>

<h3 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">JavaScript中的对象其实就是生活中对象的一个抽象</span><br><span class="line">JavaScript的对象是无序属性的集合。</span><br><span class="line">	其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。</span><br><span class="line">对象的行为和特征</span><br><span class="line">	特征---属性</span><br><span class="line">	行为---方法</span><br></pre></td></tr></table></figure></div>

<ul>
<li>事物的特征在对象中用属性来表示。</li>
<li>事物的行为在对象中用方法来表示。</li>
<li>如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征</li>
<li>如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能</li>
</ul>
<h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><blockquote>
<p>字面量：11 ‘abc’  true  [] {}等</p>
</blockquote>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs,</span></span><br><span class="line"><span class="string">  age: 18,</span></span><br><span class="line"><span class="string">  sex: true,</span></span><br><span class="line"><span class="string">  sayHi: function () &#123;</span></span><br><span class="line"><span class="string">    console.log(this.name);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure></div>

<p>思考：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">如何把学生对象、老师对象、英雄对象改写成字面量的方式</span><br></pre></td></tr></table></figure></div>
<h3 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h3><ul>
<li>对象字面量</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;   </span><br></pre></td></tr></table></figure></div>

<ul>
<li>new Object()创建对象</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  person.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">  person.<span class="property">age</span> = <span class="number">35</span>;</span><br><span class="line">  person.<span class="property">job</span> = <span class="string">&#x27;actor&#x27;</span>;</span><br><span class="line">  person.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello,everyBody&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>工厂函数创建对象<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  person.<span class="property">name</span> = name;</span><br><span class="line">  person.<span class="property">age</span> = age;</span><br><span class="line">  person.<span class="property">job</span> = job;</span><br><span class="line">  person.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello,everyBody&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="title function_">createPerson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;actor&#x27;</span>);</span><br></pre></td></tr></table></figure></div></li>
<li>自定义构造函数<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,job</span>)&#123;	<span class="comment">//帕斯卡命名，每个字母的首字母都大写，为了和普通函数进行区分</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, everyBody&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;actor&#x27;</span>);</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><blockquote>
<p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p>
</blockquote>
<ol>
<li>构造函数用于创建一类对象，首字母要大写。</li>
<li>构造函数要和new一起使用才有意义。</li>
</ol>
<p>new在执行时会做四件事情</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">new会在内存中创建一个新的空对象</span><br><span class="line">new 会让this指向这个新的对象</span><br><span class="line">执行构造函数  目的：给这个新对象加属性和方法</span><br><span class="line">new会返回这个新对象</span><br></pre></td></tr></table></figure></div>
<h3 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h3><pre><code>JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解
现在我们需要掌握函数内部的this几个特点
    1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定
    2. 一般函数直接执行，内部this指向全局window
    3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象
    4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化
</code></pre>
<h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h3><blockquote>
<p>通过for..in语法可以遍历一个对象</p>
</blockquote>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  obj[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;==&quot;</span> + obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;mm&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">fun</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// mm </span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></div>

<h3 id="简单类型和复杂类型的区别"><a href="#简单类型和复杂类型的区别" class="headerlink" title="简单类型和复杂类型的区别"></a>简单类型和复杂类型的区别</h3><blockquote>
<p>基本类型又叫做值类型，复杂类型又叫做引用类型</p>
<p>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。</p>
<p>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p>
</blockquote>
<p>简单类型：string  number  boolean  null  undefined</p>
<p>复杂类型：比如Object、 array、 date</p>
<p>简单类型存储在内存中的栈中，复杂类型存储在内存中的堆中。</p>
<p>当new Object的时候，在堆上开辟一个空间，并且在栈里开辟一个空间，栈里存储了这个对象的地址。复杂类型赋值的时候，不在堆里开辟新的，只是在栈里开辟一个新的，然后指向堆里的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\shinelon\Desktop\Front-end-notes\JavaScript-notes\media\复杂类型的存储.png"
                     
                ></p>
<ul>
<li>堆和栈</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">堆栈空间分配区别：</span><br><span class="line">　　1、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；</span><br><span class="line">　　2、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收，分配方式倒是类似于链表。</span><br></pre></td></tr></table></figure></div>

<ul>
<li>注意：JavaScript中没有堆和栈的概念，此处我们用堆和栈来讲解，目的方便理解和方便以后的学习。</li>
</ul>
<h4 id="基本类型在内存中的存储"><a href="#基本类型在内存中的存储" class="headerlink" title="基本类型在内存中的存储"></a>基本类型在内存中的存储</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/1498288494687.png"
                      alt="1498288494687"
                ></p>
<h4 id="复杂类型在内存中的存储"><a href="#复杂类型在内存中的存储" class="headerlink" title="复杂类型在内存中的存储"></a>复杂类型在内存中的存储</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/1498700592589.png"
                      alt="1498700592589"
                ></p>
<h4 id="基本类型作为函数的参数"><a href="#基本类型作为函数的参数" class="headerlink" title="基本类型作为函数的参数"></a>基本类型作为函数的参数</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/1497497605587-8288640195.png"
                      alt="1497497605587"
                ></p>
<h4 id="复杂类型作为函数的参数"><a href="#复杂类型作为函数的参数" class="headerlink" title="复杂类型作为函数的参数"></a>复杂类型作为函数的参数</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/Javascript-notes/media/1497497865969.png"
                      alt="1497497865969"
                ></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面代码输出的结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,salary</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">salary</span> = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  person.<span class="property">name</span> = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">  person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">18</span>,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zs&quot;</span>,<span class="number">18</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);</span><br><span class="line"><span class="title function_">f1</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);</span><br></pre></td></tr></table></figure></div>

<p>思考：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. </span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br><span class="line">num1 = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. </span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    num = <span class="number">60</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>(num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. </span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">66</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">num, num1</span>) &#123;</span><br><span class="line">  num = <span class="number">100</span>;</span><br><span class="line">  num1 = <span class="number">100</span>;</span><br><span class="line">  num2 = <span class="number">100</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>(num1, num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure></div>



<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JavaScript中的对象分为3种：内置对象、浏览器对象、自定义对象</p>
<p>JavaScript 提供多个内置对象：Math   Array  Number  String  Boolean…</p>
<p>对象只是带有<strong>属性</strong>和<strong>方法</strong>的特殊数据类型。</p>
<p>学习一个内置对象的使用，只要学会其常用的成员的使用（通过查文档学习）</p>
<p>可以通过MDN&#x2F;W3C来查询</p>
<p>内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p>
<h3 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h3><p>Mozilla 开发者网络（MDN）提供有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p>
<ul>
<li><a class="link"   href="https://developer.mozilla.org/zh-CN/" >MDN <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>通过查询MDN学习Math对象的random()方法的使用</li>
</ul>
<h3 id="如何学习一个方法？"><a href="#如何学习一个方法？" class="headerlink" title="如何学习一个方法？"></a>如何学习一个方法？</h3><ol>
<li>方法的功能</li>
<li>参数的意义和<strong>类型</strong></li>
<li>返回值意义和<strong>类型</strong></li>
<li>demo进行测试</li>
</ol>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math对象不是构造函数，它具有数学常数和函数的属性和方法，都是以静态成员的方式提供</p>
<p>跟数学相关的运算来找Math中的成员（求绝对值，取整）</p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" >Math <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>演示：Math.PI、Math.random()、Math.floor()&#x2F;Math.ceil()、Math.round()、Math.abs()	、Math.max()</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span>						<span class="comment">// 圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()				<span class="comment">// 生成随机数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>()/<span class="title class_">Math</span>.<span class="title function_">ceil</span>()	 <span class="comment">// 向下取整/向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()				<span class="comment">// 取整，四舍五入</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>()					<span class="comment">// 绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="title function_">min</span>()		 <span class="comment">// 求最大和最小值</span></span><br></pre></td></tr></table></figure></div>

<p>Math.sin()&#x2F;Math.cos()		 &#x2F;&#x2F; 正弦&#x2F;余弦<br>Math.power()&#x2F;Math.sqrt()	 &#x2F;&#x2F; 求指数次幂&#x2F;求平方根</p>
<h4 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h4><ul>
<li>求10-20之间的随机数</li>
<li>随机生成颜色RGB</li>
<li>模拟实现max()&#x2F;min()</li>
</ul>
<h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>创建 <code>Date</code> 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">valueOf</span>());	<span class="comment">// 获取距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Date</span>构造函数的参数</span><br><span class="line"><span class="number">1.</span> 毫秒数 <span class="number">1498099000356</span>		<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1498099000356</span>)</span><br><span class="line"><span class="number">2.</span> 日期格式字符串  <span class="string">&#x27;2015-5-1&#x27;</span>	 <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2015-5-1&#x27;</span>)</span><br><span class="line"><span class="number">3.</span> 年、月、日……				  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">1</span>)   <span class="comment">// 月份从0开始</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>获取日期的毫秒形式</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">// valueOf用于获取对象的原始值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>())	</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不支持HTML5的浏览器，可以用下面这种方式</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="title class_">Date</span>();			<span class="comment">// 调用 Date对象的valueOf() </span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>日期格式化方法</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">toString</span>()		<span class="comment">// 转换成字符串</span></span><br><span class="line"><span class="title function_">valueOf</span>()		<span class="comment">// 获取毫秒值</span></span><br><span class="line"><span class="comment">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span></span><br><span class="line"><span class="title function_">toDateString</span>()</span><br><span class="line"><span class="title function_">toTimeString</span>()</span><br><span class="line"><span class="title function_">toLocaleDateString</span>()</span><br><span class="line"><span class="title function_">toLocaleTimeString</span>()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>获取日期指定部分</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getTime</span>()  	  <span class="comment">// 返回毫秒数和valueOf()结果一样，valueOf()内部调用的getTime()</span></span><br><span class="line"><span class="title function_">getMilliseconds</span>() </span><br><span class="line"><span class="title function_">getSeconds</span>()  <span class="comment">// 返回0-59</span></span><br><span class="line"><span class="title function_">getMinutes</span>()  <span class="comment">// 返回0-59</span></span><br><span class="line"><span class="title function_">getHours</span>()    <span class="comment">// 返回0-23</span></span><br><span class="line"><span class="title function_">getDay</span>()      <span class="comment">// 返回星期几 0周日   6周6</span></span><br><span class="line"><span class="title function_">getDate</span>()     <span class="comment">// 返回当前月的第几天</span></span><br><span class="line"><span class="title function_">getMonth</span>()    <span class="comment">// 返回月份，***从0开始***</span></span><br><span class="line"><span class="title function_">getFullYear</span>() <span class="comment">//返回4位的年份  如 2016</span></span><br></pre></td></tr></table></figure></div>

<h4 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h4><ul>
<li>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">d</span>) &#123;</span><br><span class="line">  <span class="comment">//如果date不是日期对象，返回</span></span><br><span class="line">  <span class="keyword">if</span> (!date <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> year = d.<span class="title function_">getFullYear</span>(),</span><br><span class="line">      month = d.<span class="title function_">getMonth</span>() + <span class="number">1</span>, </span><br><span class="line">      date = d.<span class="title function_">getDate</span>(), </span><br><span class="line">      hour = d.<span class="title function_">getHours</span>(), </span><br><span class="line">      minute = d.<span class="title function_">getMinutes</span>(), </span><br><span class="line">      second = d.<span class="title function_">getSeconds</span>();</span><br><span class="line">  month = month &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + month : month;</span><br><span class="line">  date = date &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + date : date;</span><br><span class="line">  hour = hour &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + hour : hour;</span><br><span class="line">  minute = minute &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="attr">minute</span>:minute;</span><br><span class="line">  second = second &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="attr">second</span>:second;</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">&#x27;-&#x27;</span> + month + <span class="string">&#x27;-&#x27;</span> + date + <span class="string">&#x27; &#x27;</span> + hour + <span class="string">&#x27;:&#x27;</span> + minute + <span class="string">&#x27;:&#x27;</span> + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>计算时间差，返回相差的天&#x2F;时&#x2F;分&#x2F;秒</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInterval</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> day, hour, minute, second, interval;</span><br><span class="line">  interval = end - start;</span><br><span class="line">  interval /= <span class="number">1000</span>;</span><br><span class="line">  day = <span class="title class_">Math</span>.<span class="title function_">round</span>(interval / <span class="number">60</span> /<span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">  hour = <span class="title class_">Math</span>.<span class="title function_">round</span>(interval / <span class="number">60</span> /<span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">  minute = <span class="title class_">Math</span>.<span class="title function_">round</span>(interval / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">  second = <span class="title class_">Math</span>.<span class="title function_">round</span>(interval % <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">day</span>: day,</span><br><span class="line">    <span class="attr">hour</span>: hour,</span><br><span class="line">    <span class="attr">minute</span>: minute,</span><br><span class="line">    <span class="attr">second</span>: second</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul>
<li>创建数组对象的两种方式<ul>
<li>字面量方式</li>
<li>new Array()</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 使用构造函数创建数组对象</span></span><br><span class="line"><span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">// 创建了一个数组，里面存放了3个字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建了一个数组，里面存放了4个数字</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用字面量创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中元素的个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>检测一个对象是否是数组</p>
<ul>
<li>instanceof</li>
<li>Array.isArray()     HTML5中提供的方法，有兼容性问题</li>
</ul>
<p>函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断</p>
</li>
<li><p>toString()&#x2F;valueOf()</p>
<ul>
<li>toString()		把数组转换成字符串，逗号分隔每一项</li>
<li>valueOf()         返回数组对象本身</li>
</ul>
</li>
<li><p>数组常用方法</p>
<p>演示：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 栈操作(先进后出)</span></span><br><span class="line"><span class="title function_">push</span>()</span><br><span class="line"><span class="title function_">pop</span>() 		<span class="comment">//取出数组中的最后一项，修改length属性</span></span><br><span class="line"><span class="comment">// 2 队列操作(先进先出)</span></span><br><span class="line"><span class="title function_">push</span>()</span><br><span class="line"><span class="title function_">shift</span>()		<span class="comment">//取出数组中的第一个元素，修改length属性</span></span><br><span class="line"><span class="title function_">unshift</span>() 	<span class="comment">//在数组最前面插入项，返回数组的长度</span></span><br><span class="line"><span class="comment">// 3 排序方法</span></span><br><span class="line"><span class="title function_">reverse</span>()	<span class="comment">//翻转数组</span></span><br><span class="line"><span class="title function_">sort</span>(); 	<span class="comment">//即使是数组sort也是根据字符，从小到大排序</span></span><br><span class="line"><span class="comment">// 带参数的sort是如何实现的？</span></span><br><span class="line"><span class="comment">// 4 操作方法</span></span><br><span class="line"><span class="title function_">concat</span>()  	<span class="comment">//把参数拼接到当前数组</span></span><br><span class="line"><span class="title function_">slice</span>() 	<span class="comment">//从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始</span></span><br><span class="line"><span class="title function_">splice</span>()	<span class="comment">//删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)</span></span><br><span class="line"><span class="comment">// 5 位置方法</span></span><br><span class="line"><span class="title function_">indexOf</span>()、<span class="title function_">lastIndexOf</span>()   <span class="comment">//如果没找到返回-1</span></span><br><span class="line"><span class="comment">// 6 迭代方法 不会修改原数组(可选)</span></span><br><span class="line"><span class="title function_">every</span>()、<span class="title function_">filter</span>()、<span class="title function_">forEach</span>()、<span class="title function_">map</span>()、<span class="title function_">some</span>()</span><br><span class="line"><span class="comment">// 7 方法将数组的所有元素连接到一个字符串中。</span></span><br><span class="line"><span class="title function_">join</span>()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>清空数组</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1 推荐 </span></span><br><span class="line">arr = [];</span><br><span class="line"><span class="comment">// 方式2 </span></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, arr.<span class="property">length</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h4><ul>
<li>将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myJoin</span>(<span class="params">array, seperator</span>) &#123;</span><br><span class="line">  seperator = seperator || <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">  array = array || [];</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> str = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    str += seperator + array[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myJoin</span>(array, <span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<ul>
<li>将一个字符串数组的元素的顺序进行反转。[“a”, “b”, “c”, “d”] -&gt; [ “d”,”c”,”b”,”a”]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myReverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[<span class="variable language_">this</span>.<span class="property">length</span> - i - <span class="number">1</span>];</span><br><span class="line">    arr[arr.<span class="property">length</span> - i - <span class="number">1</span>] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myReverse</span>(array));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">reverse</span>());</span><br></pre></td></tr></table></figure></div>

<ul>
<li>工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>,<span class="number">1200</span>,<span class="number">2000</span>,<span class="number">2100</span>,<span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> tmpArray = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(array[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    tmpArray.<span class="title function_">push</span>(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tmpArray);</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line">array = array.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (item &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>[“c”, “a”, “z”, “a”, “x”, “a”]找到数组中每一个a出现的位置</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> index = array.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>,index + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (index != -<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (index &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>编写一个方法去掉一个数组的重复元素</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = array[i];</span><br><span class="line">    <span class="keyword">if</span> (o[item]) &#123;</span><br><span class="line">      o[item]++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      o[item] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> tmpArray = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o[key] == <span class="number">1</span>) &#123;</span><br><span class="line">      tmpArray.<span class="title function_">push</span>(key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(tmpArray.<span class="title function_">indexOf</span>(key) == -<span class="number">1</span>)&#123;</span><br><span class="line">        tmpArray.<span class="title function_">push</span>(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  returm tmpArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">clear</span>(array));</span><br></pre></td></tr></table></figure></div>



<h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p>基本包装类型：把基本数据类型包装成复杂类型</p>
<p>为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型：String&#x2F;Number&#x2F;Boolean</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面代码的问题？</span></span><br><span class="line"><span class="comment">// s1是基本类型，基本类型是没有方法的</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.<span class="title function_">substring</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = s1.<span class="title function_">substring</span>(<span class="number">5</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建基本包装类型的对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;  				<span class="comment">//数值，基本类型</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="title class_">Number</span>(<span class="string">&#x27;18&#x27;</span>); 	<span class="comment">//类型转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">18</span>); 	<span class="comment">//基本包装类型，对象</span></span><br><span class="line"><span class="comment">// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = b1 &amp;&amp; <span class="literal">true</span>;		<span class="comment">// 结果是什么</span></span><br></pre></td></tr></table></figure></div>

<h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul>
<li>字符串的不可变，虽然看上去是字符串变了，其实是开辟了一块新的内存空间，然后改变了地址</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">// 当重新给str赋值的时候，常量&#x27;abc&#x27;不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建字符串对象</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符串中字符的个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>字符串对象的常用方法</p>
<p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 字符方法</span></span><br><span class="line"><span class="title function_">charAt</span>()    	<span class="comment">//获取指定位置处字符</span></span><br><span class="line"><span class="title function_">charCodeAt</span>()  	<span class="comment">//获取指定位置处字符的ASCII码</span></span><br><span class="line">str[<span class="number">0</span>]   		<span class="comment">//HTML5，IE8+支持 和charAt()等效</span></span><br><span class="line"><span class="comment">// 2 字符串操作方法</span></span><br><span class="line"><span class="title function_">concat</span>()   		<span class="comment">//拼接字符串，等效于+，+更常用</span></span><br><span class="line"><span class="title function_">slice</span>()    		<span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line"><span class="title function_">substring</span>() 	<span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line"><span class="title function_">substr</span>()   		<span class="comment">//从start位置开始，截取length个字符 (重点记这个)</span></span><br><span class="line"><span class="comment">// 3 位置方法</span></span><br><span class="line"><span class="title function_">indexOf</span>()   	<span class="comment">//返回指定内容在元字符串中的位置</span></span><br><span class="line"><span class="title function_">lastIndexOf</span>() 	<span class="comment">//从后往前找，只找第一个匹配的</span></span><br><span class="line"><span class="comment">// 4 去除空白   </span></span><br><span class="line"><span class="title function_">trim</span>()  		<span class="comment">//只能去除字符串前后的空白</span></span><br><span class="line"><span class="comment">// 5 大小写转换方法</span></span><br><span class="line"><span class="title function_">to</span>(<span class="title class_">Locale</span>)<span class="title class_">UpperCase</span>() 	<span class="comment">//转换大写</span></span><br><span class="line"><span class="title function_">to</span>(<span class="title class_">Locale</span>)<span class="title class_">LowerCase</span>() 	<span class="comment">//转换小写</span></span><br><span class="line"><span class="comment">// 6 其它</span></span><br><span class="line"><span class="title function_">search</span>()</span><br><span class="line"><span class="title function_">replace</span>()</span><br><span class="line"><span class="title function_">split</span>()</span><br><span class="line"><span class="title function_">fromCharCode</span>()</span><br><span class="line"><span class="comment">// String.fromCharCode(101, 102, 103);	 //把ASCII码转换成字符串</span></span><br></pre></td></tr></table></figure></div>

<h4 id="案例-9"><a href="#案例-9" class="headerlink" title="案例"></a>案例</h4><ul>
<li>截取字符串”我爱中华人民共和国”，中的”中华”</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;我爱中华人民共和国&quot;</span>;</span><br><span class="line">s = s.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>“abcoefoxyozzopp”查找字符串中所有o出现的位置</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> index = s.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>, index + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">    array.<span class="title function_">push</span>(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (index &gt; -<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>把字符串中所有的o替换成!</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  s = s.<span class="title function_">replace</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (s.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) &gt; -<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">replace</span>(<span class="regexp">/o/ig</span>, <span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>判断一个字符串中出现次数最多的字符，统计这个次数</p>
<ol>
<li><p>核心算法：利用charAt() 遍历这个字符串</p>
</li>
<li><p>把每个字符串都存储给对象，如果对象没有该属性，就为1；如果存在了就+1</p>
</li>
<li><p>遍历对象，得到最大值和该字符</p>
</li>
</ol>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = s.<span class="title function_">charAt</span>(i);</span><br><span class="line">  <span class="keyword">if</span> (o[item]) &#123;</span><br><span class="line">    o[item] ++;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    o[item] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> char ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="keyword">if</span> (max &lt; o[key]) &#123;</span><br><span class="line">    max = o[key];</span><br><span class="line">    char = key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(char);</span><br></pre></td></tr></table></figure></div>



<h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个字符串如：“abaasdffggghhjjkkgfddsssss3444343”问题如下： </span><br><span class="line">1、 字符串的长度 </span><br><span class="line">2、 取出指定位置的字符，如：0,3,5,9等 </span><br><span class="line">3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等 </span><br><span class="line">4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法 </span><br><span class="line">5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串</span><br><span class="line">6、 找出以上字符串中出现次数最多的字符和出现的次数 </span><br><span class="line">7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面。 </span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 笔记</title>
    <url>/page/20230523100221/</url>
    <content><![CDATA[<p>课程目标:</p>
<blockquote>
<ol>
<li>学会使用CSS选择器</li>
<li>熟记CSS样式和外观属性</li>
<li>熟练掌握CSS各种选择器</li>
<li>熟练掌握CSS各种选择器</li>
<li>熟练掌握CSS三种显示模式</li>
<li>熟练掌握CSS背景属性</li>
<li>熟练掌握CSS三大特性</li>
<li>熟练掌握CSS盒子模型</li>
<li>熟练掌握CSS浮动<br>10.熟练掌握CSS定位<br>11.熟练掌握CSS高级技巧强化CSS</li>
</ol>
</blockquote>
<p><code>项目地址:https://github.com/babbittry/Front-end-notes</code></p>
<h1 id="CSS的发展历程"><a href="#CSS的发展历程" class="headerlink" title="CSS的发展历程"></a>CSS的发展历程</h1><p>从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。<br>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。</p>
<h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><p>CSS(Cascading Style Sheets)</p>
<p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p>
<p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p>
<h1 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/gz.png"
                      
                >

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">在上面的样式规则中:</span><br><span class="line"></span><br><span class="line">1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。</span><br><span class="line">2.属性和属性值以“键值对”的形式出现。</span><br><span class="line">3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</span><br><span class="line">4.属性和属性值之间用英文“:”连接。</span><br><span class="line">5.多个“键值对”之间用英文“;”进行区分。</span><br><span class="line">可以用段落 和 表格的对齐的演示。</span><br></pre></td></tr></table></figure></div>



<h1 id="CSS3利用cacl-计算长度"><a href="#CSS3利用cacl-计算长度" class="headerlink" title="CSS3利用cacl()计算长度"></a>CSS3利用cacl()计算长度</h1><p>css3提供了 calc() &#x3D; calc(四则运算)用于动态计算长度值。</p>
<p>需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；</p>
<h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h2><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/dd.png"
                      
                >

<h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：</p>
<p>p{ font-family:”微软雅黑”;}</p>
<p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/good.png"
                      
                >常用技巧：</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 现在网页中普遍使用14px+。</span><br><span class="line">2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</span><br><span class="line">3. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure></div>



<h2 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p>
<p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p>
<p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/shs.png"
                      
                >

<p>可以通过escape()  来测试属于什么字体。</p>
<table>
<thead>
<tr>
<th>字体名称</th>
<th>英文名称</th>
<th>Unicode 编码</th>
</tr>
</thead>
<tbody><tr>
<td>宋体</td>
<td>SimSun</td>
<td>\5B8B\4F53</td>
</tr>
<tr>
<td>新宋体</td>
<td>NSimSun</td>
<td>\65B0\5B8B\4F53</td>
</tr>
<tr>
<td>黑体</td>
<td>SimHei</td>
<td>\9ED1\4F53</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Microsoft YaHei</td>
<td>\5FAE\8F6F\96C5\9ED1</td>
</tr>
<tr>
<td>楷体_GB2312</td>
<td>KaiTi_GB2312</td>
<td>\6977\4F53_GB2312</td>
</tr>
<tr>
<td>隶书</td>
<td>LiSu</td>
<td>\96B6\4E66</td>
</tr>
<tr>
<td>幼园</td>
<td>YouYuan</td>
<td>\5E7C\5706</td>
</tr>
<tr>
<td>华文细黑</td>
<td>STXihei</td>
<td>\534E\6587\7EC6\9ED1</td>
</tr>
<tr>
<td>细明体</td>
<td>MingLiU</td>
<td>\7EC6\660E\4F53</td>
</tr>
<tr>
<td>新细明体</td>
<td>PMingLiU</td>
<td>\65B0\7EC6\660E\4F53</td>
</tr>
</tbody></table>
<p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p>
<h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><p>字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/good.png"
                      
                >小技巧： </p>
 <div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">数字 <span class="number">400</span> 等价于 <span class="attribute">normal</span>，而 <span class="number">700</span> 等价于 bold。  但是我们更喜欢用数字来表示。  </span><br></pre></td></tr></table></figure></div>



<h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><p>字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p>
<p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>
<p>normal：默认值，浏览器会显示标准的字体样式。</p>
<p>italic：浏览器会显示斜体的字体样式。</p>
<p>oblique：浏览器会显示倾斜的字体样式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/good.png"
                      
                >小技巧： </p>
 <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</span><br></pre></td></tr></table></figure></div>



<h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</span><br><span class="line"></span><br><span class="line">注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h1 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h1><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p>
<p>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</p>
<p>菜单：   右击网页空白出—查看 </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/chrome.png"
                      
                >

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/good.png"
                      
                >小技巧：</p>
<ol>
<li>ctrl+滚轮 可以 放大开发者工具代码大小。</li>
<li>左边是HTML元素结构   右边是CSS样式。</li>
<li>右边CSS样式可以改动数值和颜色查看更改后效果。</li>
</ol>
<h1 id="选择器（重点）"><a href="#选择器（重点）" class="headerlink" title="选择器（重点）"></a>选择器（重点）</h1><p>要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/ax.png"
                      
                >

<p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p>
<p>很多， 比如 一只眼睛的一组，剩下的一组  </p>
<p>这就用到基础选择器组：</p>
<h2 id="标签选择器（元素选择器、类型选择器）"><a href="#标签选择器（元素选择器、类型选择器）" class="headerlink" title="标签选择器（元素选择器、类型选择器）"></a>标签选择器（元素选择器、类型选择器）</h2><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;  或者</span><br><span class="line">元素名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure></div>

<p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.类名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">标签调用的时候用 class=“类名”  即可。</span><br></pre></td></tr></table></figure></div>

<p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/good.png"
                      
                >小技巧：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.长名称或词组可以使用中横线来为选择器命名。</span><br><span class="line">2.不建议使用“_”下划线来命名CSS选择器。</span><br></pre></td></tr></table></figure></div>

<p>​    输入的时候少按一个shift键;<br>　浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的)<br>　能良好区分JavaScript变量命名(JS变量命名是用“_”)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</span><br></pre></td></tr></table></figure></div>

<p>命名规范：  见附件（Web前端开发规范手册.doc）</p>
<p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p>
<p>课堂案例：</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/go.png"
                      
                >



<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        	<span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">        	<span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        	<span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>G<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>g<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>l<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>e<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h2><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/lei.png"
                      
                >

<p>注意：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</span><br><span class="line">2. 各个类名中间用空格隔开。</span><br></pre></td></tr></table></figure></div>

<p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pink fontWeight font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20&quot;</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 pink&quot;</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14&quot;</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#id名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure></div>

<p>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p>
<p>用法基本和类选择器相同。</p>
<h2 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h2><p>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。</p>
<p>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</p>
<p>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</p>
<p><em><strong>id选择器和类选择器最大的不同在于 使用次数上。</strong></em></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/zfb.jpg"
                      
                >

<h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure></div>



<p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<p>  这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。 </p>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>  伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 <span class="selector-class">.demo</span> &#123;&#125;   而我们的伪类 用 <span class="number">2</span>个点 就是 冒号  比如  <span class="selector-pseudo">:link</span>&#123;&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><ul>
<li><p>:link      &#x2F;* 未访问的链接 *&#x2F;</p>
</li>
<li><p>:visited   &#x2F;* 已访问的链接 *&#x2F;</p>
</li>
<li><p>:hover     &#x2F;* 鼠标移动到链接上 *&#x2F;</p>
</li>
<li><p>:active    &#x2F;* 选定的链接 *&#x2F;</p>
<p> 注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao</p>
</li>
</ul>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line">			<span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">			<span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">			<span class="attribute">color</span>: gray;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line">			<span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="结构-位置-伪类选择器（CSS3"><a href="#结构-位置-伪类选择器（CSS3" class="headerlink" title="结构(位置)伪类选择器（CSS3)"></a>结构(位置)伪类选择器（CSS3)</h3><ul>
<li>:first-child :选取属于其父元素的首个子元素的指定选择器</li>
<li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li>
<li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li>
<li>:nth-of-type(n)： 简单来说nth-of-type会忽略其它标签的顺序而安装标签自身种类的顺序进行筛选，也就是选择的参照点并不是DOM数，而是自身。</li>
<li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式</li>
</ul>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123; <span class="comment">/*  选择第一个孩子 */</span></span><br><span class="line">        		<span class="attribute">color</span>: pink; </span><br><span class="line">        	&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;   <span class="comment">/* 最后一个孩子 */</span></span><br><span class="line">        		<span class="attribute">color</span>: purple;</span><br><span class="line">        	&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;   <span class="comment">/* 选择第4个孩子  n  代表 第几个的意思 */</span> </span><br><span class="line">				<span class="attribute">color</span>: skyblue;</span><br><span class="line">        	&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="nth-child介绍"><a href="#nth-child介绍" class="headerlink" title="nth-child介绍"></a>nth-child介绍</h2><p>nth-child(n) 选择器匹配属于其父元素的第 n 个子元素。  </p>
<h3 id="使用它的时候需要注意几点："><a href="#使用它的时候需要注意几点：" class="headerlink" title="使用它的时候需要注意几点："></a>使用它的时候需要注意几点：</h3><ul>
<li>第n个子元素的计数是从1开始，不是从0开始的</li>
<li>选择表达式中的字母n代表≥0的整数</li>
</ul>
<h3 id="它有3种常见用法"><a href="#它有3种常见用法" class="headerlink" title="它有3种常见用法"></a>它有3种常见用法</h3><ul>
<li>直接指明n的值：span:nth-child(1)</li>
<li>用even&#x2F;odd分别代表偶数 &#x2F; 奇数：span:nth-child(even) </li>
<li>借助n自定义选择范围：<ul>
<li>nth-child(2n)&#x2F;nth-child(2n + 1)：偶数 &#x2F; 奇数</li>
<li>nth-child(n + 3)：第3个开始到最后</li>
</ul>
</li>
</ul>
<h3 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h3><p>上面的用法中的第三部分，一般都是使用n，而有时候也会用到-n，比如选取前2个元素就是：nth-child(-n + 2)。  </p>
<p>为什么是这样呢？其实运算：-n + 2 ≥ 0，就可以推出n ≤ 2。  由此，结合两者自动取交集，我们就可以限制选择某一范围。</p>
<p>比如选择第6个到第9个，就是：:nth-child(-n+9):nth-child(n+6)  注意：不是nth-child(2 - n)，-n要写在一起！  真正理解“子元素”的含义 还是nth-child选择器，那么下面这段代码的样式是什么呢？</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    span:nth-child(2n) &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;span&gt;3&lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>



<p> 答案是：1是黑色的，2和3都是红色的。</p>
<p>因为<code>&lt;span&gt;2&lt;/span&gt;</code>是其父节点的第2个（偶数）子元素,<code>&lt;span&gt;3&lt;/span&gt;</code>是其父节点的第2个子元素，第一个是<code>&lt;div&gt;&lt;/div&gt;</code></p>
<p>所以辨别是否匹配的关键是：找到父元素，然后再计算在父元素中的位置。</p>
<h3 id="nth-of-type与nth-child的区别"><a href="#nth-of-type与nth-child的区别" class="headerlink" title="nth-of-type与nth-child的区别"></a>nth-of-type与nth-child的区别</h3><p> nth-of-child：</p>
<p>​       它的属性就是按照所有类型标签的所谓整体队列进行排序筛选，也就是说不论你是h1，span还是p标签，使用这个属性你要遵循在DOM树中的顺序来进行操作。</p>
<p>nth-of-type:</p>
<p>​      简单来说nth-of-type会忽略其它标签的顺序而安装标签自身种类的顺序进行筛选，也就是选择的参照点并不是DOM数，而是自身。就是按照类型来计算，碰到一个同类型就加1。</p>
<h3 id="目标伪类选择器-CSS3"><a href="#目标伪类选择器-CSS3" class="headerlink" title="目标伪类选择器(CSS3)"></a>目标伪类选择器(CSS3)</h3><p> :target目标伪类选择器 :选择器可用于选取当前活动的目标元素</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">		<span class="attribute">color</span>: red;</span><br><span class="line">		<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。</span><br></pre></td></tr></table></figure></div>

<p>   例如：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;                 <span class="comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p>
<p>1.预定义的颜色值，如red，green，blue等。</p>
<p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</p>
<p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p>
<p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p>
<h2 id="line-height-行间距（行高）"><a href="#line-height-行间距（行高）" class="headerlink" title="line-height:行间距（行高）"></a>line-height:行间距（行高）</h2><p>ine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</p>
<p>一般情况下，行距比字号大7.8像素左右就可以了。</p>
<h2 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</span><br></pre></td></tr></table></figure></div>

<p>left：左对齐（默认值）</p>
<p>right：右对齐</p>
<p>center：居中对齐</p>
<h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p>
<p>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</p>
<h2 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing:字间距"></a>letter-spacing:字间距</h2><p>letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。</p>
<h2 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing:单词间距"></a>word-spacing:单词间距</h2><p>word-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。</p>
<p>word-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。</p>
<h2 id="颜色半透明-css3"><a href="#颜色半透明-css3" class="headerlink" title="颜色半透明(css3)"></a>颜色半透明(css3)</h2><p>文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(r,g,b,a)  a 是alpha  透明的意思  取值范围 <span class="number">0</span>~<span class="number">1</span>之间   <span class="number">0</span>是全透明，<span class="number">1</span>是不透明</span><br><span class="line">例如：color: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>)  </span><br></pre></td></tr></table></figure></div>



<h2 id="文字阴影-CSS3"><a href="#文字阴影-CSS3" class="headerlink" title="文字阴影(CSS3)"></a>文字阴影(CSS3)</h2><p>以后我们可以给我们的文字添加阴影效果了  Shadow  影子  </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>:水平位置 垂直位置 模糊距离 阴影颜色;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498467502625.png"
                      alt="1498467502625"
                > </p>
<ol>
<li>前两项是必须写的。  后两项可以选写。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498467519665.png"
                      alt="1498467519665"
                >    </p>
<h1 id="sublime快捷方式"><a href="#sublime快捷方式" class="headerlink" title="sublime快捷方式"></a>sublime快捷方式</h1><p>sublime可以快速提高我们代码的书写方式</p>
<ol>
<li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p>
</li>
<li><p>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</p>
</li>
<li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p>
</li>
<li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p>
</li>
<li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p>
</li>
</ol>
<h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><p>CSS可以写到那个位置？ 是不是一定写到html文件里面呢？</p>
<h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/CSS&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    选择器 &#123;属性<span class="number">1</span>:属性值<span class="number">1</span>; 属性<span class="number">2</span>:属性值<span class="number">2</span>; 属性<span class="number">3</span>:属性值<span class="number">3</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。</p>
<p>type&#x3D;”text&#x2F;CSS”  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p>
<h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p>
<h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;CSS文件的路径&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/CSS&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>注意：  link 是个单标签哦!!!</p>
<p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</span><br><span class="line">type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。</span><br><span class="line">rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</span><br></pre></td></tr></table></figure></div>

<h2 id="三种样式表总结"><a href="#三种样式表总结" class="headerlink" title="三种样式表总结"></a>三种样式表总结</h2><table>
<thead>
<tr>
<th>样式表</th>
<th>优点</th>
<th>缺点</th>
<th>使用情况</th>
<th>控制范围</th>
</tr>
</thead>
<tbody><tr>
<td>行内样式表</td>
<td>书写方便，权重高</td>
<td>没有实现样式和结构相分离</td>
<td>较少</td>
<td>控制一个标签（少）</td>
</tr>
<tr>
<td>内部样式表</td>
<td>部分结构和样式相分离</td>
<td>没有彻底分离</td>
<td>较多</td>
<td>控制一个页面（中）</td>
</tr>
<tr>
<td>外部样式表</td>
<td>完全实现结构和样式相分离</td>
<td>需要引入</td>
<td>最多，强烈推荐</td>
<td>控制整个站点（多）</td>
</tr>
</tbody></table>
<h1 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/people.png"
                      
                >

<p>非洲黑人：  皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。</p>
<p>欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少&#96;&#96;所以出现皮肤、发色、瞳晕都呈现浅色</p>
<p>传智黄人：  我中间的。。。  </p>
<p>最重要的总结：  是为了更好的适应环境而完成的自然选择。 </p>
<p>同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p>
<p>标签的类型(显示模式)</p>
<p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p>
<h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure></div>

  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/xtf.jpg"
                      
                >

<p>块级元素的特点：</p>
<p>（1）总是从新行开始</p>
<p>（2）高度，行高、外边距以及内边距都可以控制。</p>
<p>（3）宽度默认是容器的100%</p>
<p>（4）可以容纳内联元素和其他块元素。</p>
<h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</span><br></pre></td></tr></table></figure></div>



<p>行内元素的特点：</p>
<p>（1）和相邻行内元素在一行上。</p>
<p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p>
<p>（3）默认宽度就是它本身内容的宽度。</p>
<p>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p>
<p>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/w.jpg"
                      
                >    注意：</p>
<ol>
<li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>
<li>链接里面不能再放链接。</li>
</ol>
<h2 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">块级元素的特点：</span><br><span class="line">（1）总是从新行开始</span><br><span class="line">（2）高度，行高、外边距以及内边距都可以控制。</span><br><span class="line">（3）宽度默认是容器的100%</span><br><span class="line">（4）可以容纳内联元素和其他块元素。</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">行内元素的特点：</span><br><span class="line">（1）和相邻行内元素在一行上。</span><br><span class="line">（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</span><br><span class="line">（3）默认宽度就是它本身内容的宽度。</span><br><span class="line">（4）行内元素只能容纳文本或则其他行内元素。</span><br></pre></td></tr></table></figure></div>

<h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br><span class="line"></span><br><span class="line">行内块元素的特点：</span><br><span class="line">（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</span><br><span class="line">（2）默认宽度就是它本身内容的宽度。</span><br><span class="line">（3）高度，行高、外边距以及内边距都可以控制。</span><br></pre></td></tr></table></figure></div>



<h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><p>块转行内：display:inline;</p>
<p>行内转块：display:block;</p>
<p>块、行内元素转换为行内块： display: inline-block;</p>
<p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p>
<h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p>
<h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/jiao.png"
                      
                >

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如：   p.one   选择的是： 类名为 .one  的 段落标签。  </span><br></pre></td></tr></table></figure></div>

<p>用的相对来说比较少，不太建议使用。</p>
<h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/bing.png"
                      
                >

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</span><br></pre></td></tr></table></figure></div>



<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/hou.png"
                      
                >

<p>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 </p>
<h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/zi1.png"
                      
                >

<p>白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如：  .demo &gt; h3 &#123;color: red;&#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</span><br></pre></td></tr></table></figure></div>



<h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		    		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		    		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>公司电话<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sitenav&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-l&quot;</span>&gt;</span>左侧侧导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-r&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在不修改以上代码的前提下，完成以下任务：</p>
<ol>
<li><p>链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色     (简单)</p>
</li>
<li><p>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。（中等)</p>
</li>
<li><p>主导航栏里面的一级菜单链接文字颜色为绿色。（难)</p>
</li>
</ol>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p>
<table>
<thead>
<tr>
<th><strong>选择器</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>E[attr]</td>
<td>存在attr属性即可</td>
</tr>
<tr>
<td>E[attr|&#x3D;val]</td>
<td>选择attr属性的值是 <code>val</code> 或值以 <code>val-</code> 开头的元素</td>
</tr>
<tr>
<td>E[attr&#x3D;val]</td>
<td>属性值完全等于val</td>
</tr>
<tr>
<td>E[attr^&#x3D;val]</td>
<td>属性值里面包含val字符并且在“开始”位置</td>
</tr>
<tr>
<td>E[attr$&#x3D;val]</td>
<td>属性值里面包含val字符并且在“结束”位置</td>
</tr>
<tr>
<td>E[attr*&#x3D;val]</td>
<td>属性值里面包含val字符并且在“任意”位置</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 获取到 拥有 该属性的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=font]</span> &#123; <span class="comment">/*  class^=font 表示 font 开始位置就行了 */</span></span><br><span class="line">			<span class="attribute">color</span>: pink;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=footer]</span> &#123; <span class="comment">/*  class$=footer 表示 footer 结束位置就行了 */</span></span><br><span class="line">			<span class="attribute">color</span>: skyblue;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class*=tao]</span> &#123; <span class="comment">/* class*=tao  *=  表示tao 在任意位置都可以 */</span></span><br><span class="line">			<span class="attribute">color</span>: green;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font12&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font12&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font24&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font24&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font24&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;24font&quot;</span>&gt;</span>属性选择器123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-footer&quot;</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jd-footer&quot;</span>&gt;</span>属性选择器footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-tao-nav&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-tao-header&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tao-header&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="存在和值（Presence-and-value）属性选择器节"><a href="#存在和值（Presence-and-value）属性选择器节" class="headerlink" title="存在和值（Presence and value）属性选择器节"></a>存在和值（Presence and value）属性选择器节</h3><p>这些属性选择器尝试匹配精确的属性值：</p>
<ul>
<li>[attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。</li>
<li>[attr&#x3D;val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。</li>
<li>[attr~&#x3D;val]：该选择器仅选择具有 attr 属性的元素，而且要求 val 值是 attr 值包含的被空格分隔的取值列表里中的一个。</li>
</ul>
<p>让我们看一个特别的例子，下面是它的的HTML代码： </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">我的食谱配料: &lt;i lang=&quot;fr-FR&quot;&gt;Poulet basquaise&lt;/i&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;1kg&quot; data-vegetable&gt;Tomatoes&lt;/li&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;3&quot; data-vegetable&gt;Onions&lt;/li&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;3&quot; data-vegetable&gt;Garlic&lt;/li&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;700g&quot; data-vegetable=&quot;not spicy like chili&quot;&gt;Red pepper&lt;/li&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;2kg&quot; data-meat&gt;Chicken&lt;/li&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;optional 150g&quot; data-meat&gt;Bacon bits&lt;/li&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;optional 10ml&quot; data-vegetable=&quot;liquid&quot;&gt;Olive oil&lt;/li&gt;</span><br><span class="line">  &lt;li data-quantity=&quot;25cl&quot; data-vegetable=&quot;liquid&quot;&gt;White wine&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div>





<p>和一个简单的样式表：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 所有具有&quot;data-vegetable&quot;属性的元素将被应用绿色的文本颜色 */</span><br><span class="line">[data-vegetable] &#123;</span><br><span class="line">  color: green</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 所有具有&quot;data-vegetable&quot;属性且属性值刚好为&quot;liquid&quot;的元素将被应用金色的背景颜色 */</span><br><span class="line">[data-vegetable=&quot;liquid&quot;] &#123;</span><br><span class="line">  background-color: goldenrod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 所有具有&quot;data-vegetable&quot;属性且属性值包含&quot;spicy&quot;的元素，</span><br><span class="line">即使元素的属性中还包含其他属性值，都会被应用红色的文本颜色 */</span><br><span class="line">[data-vegetable~=&quot;spicy&quot;] &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="伪元素选择器（CSS3"><a href="#伪元素选择器（CSS3" class="headerlink" title="伪元素选择器（CSS3)"></a>伪元素选择器（CSS3)</h2><ol>
<li>E::first-letter文本的第一个单词或字（如中文、日文、韩文等）</li>
<li>E::first-line 文本第一行；</li>
<li>E::selection 可改变选中文本的样式；</li>
</ol>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首行特殊样式 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="comment">/* font-size: 50px; */</span></span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>4、E::before和E::after</p>
<p>在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>::befor &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;开始&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;结束&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>E:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。</p>
<p>E:after、E:before后面的练习中会反复用到，目前只需要有个大致了解</p>
<p>“:” 与 “::” 区别在于区分伪类和伪元素</p>
<h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p>
<h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p>
<p>示例： .selector { }</p>
<p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p>
<p>示例：</p>
<p>font-size: 12px;</p>
<h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 正例 */</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 反例 */</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">#username input &#123;&#125;</span><br><span class="line">.comment .avatar &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.page .header .login #username input &#123;&#125;</span><br><span class="line">.comment div * &#123;&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure></div>

<p>【强制】 属性定义后必须以分号结尾。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* good */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* bad */</span><br><span class="line">.selector &#123;</span><br><span class="line">    margin: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p>
<table>
<thead>
<tr>
<th>background-color</th>
<th>背景颜色</th>
</tr>
</thead>
<tbody><tr>
<td>background-image</td>
<td>背景图片地址</td>
</tr>
<tr>
<td>background-repeat</td>
<td>是否平铺</td>
</tr>
<tr>
<td>background-position</td>
<td>背景位置</td>
</tr>
<tr>
<td>background-attachment</td>
<td>背景固定还是滚动</td>
</tr>
<tr>
<td>背景的合写（复合属性）</td>
<td></td>
</tr>
<tr>
<td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td>
<td></td>
</tr>
</tbody></table>
<h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><p>语法： </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : none | url (url) </span><br></pre></td></tr></table></figure></div>

<p>参数： </p>
<p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像 </p>
<p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p>
<p>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</p>
<h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><p>语法： </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure></div>

<p>参数： </p>
<p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p>
<p>no-repeat : 　背景图像不平铺</p>
<p>repeat-x : 　背景图像在横向上平铺</p>
<p>repeat-y : 　背景图像在纵向平铺 </p>
<p>设置背景图片时，默认把图片在垂直方向平铺以铺满整个元素。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/y.png"
                      width="600"
                >

<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/q.png"
                      width="600"
                >

<h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置(position)"></a>背景位置(position)</h2><p>语法： </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span> : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position </span><br></pre></td></tr></table></figure></div>

<p>参数： </p>
<p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　top | center | bottom | left | center | right </p>
<p>说明： </p>
<p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p>
<p>注意：</p>
<ol>
<li>position 后面是x坐标和y坐标。 可以使用方位名词或者精确单位。</li>
<li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li>
</ol>
<p>实际工作用的最多的，就是背景图片居中对齐了。</p>
<h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><p>设置或检索背景图像是随对象内容滚动还是固定的。</p>
<p>语法： </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : scroll | fixed </span><br></pre></td></tr></table></figure></div>

<p>参数： </p>
<p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定 </p>
<h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><p>background属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p>
<p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y  scroll <span class="number">50%</span> <span class="number">0</span> ;</span><br></pre></td></tr></table></figure></div>



<h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><p>CSS3支持背景半透明的写法语法格式是:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure></div>

<p> 最后一个参数是alpha 透明度  取值范围 0~1之间</p>
<p> 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p>
<h2 id="背景缩放-CSS3"><a href="#背景缩放-CSS3" class="headerlink" title="背景缩放(CSS3)"></a>背景缩放(CSS3)</h2><p>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p>
<p>其参数设置如下：</p>
<p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高；设置px的时候，尽量之改一个值，防止失真，改的那个值是宽度）</p>
<p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。<strong>我们平时用的cover 最多</strong></p>
<p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/gyt.jpg&#x27;</span>);</span><br><span class="line">			<span class="attribute">background-size</span>: <span class="number">300px</span> <span class="number">100px</span>;</span><br><span class="line">			<span class="comment">/* background-size: contain; */</span></span><br><span class="line">			<span class="comment">/* background-size: cover; */</span></span><br></pre></td></tr></table></figure></div>



<h2 id="多背景-CSS3"><a href="#多背景-CSS3" class="headerlink" title="多背景(CSS3)"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p>
<ul>
<li>一个元素可以设置多重背景图像。 </li>
<li>每组属性间使用逗号分隔。 </li>
<li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li>
<li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li>
</ul>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">test1.jpg</span>) no-repeat scroll <span class="number">10px</span> <span class="number">20px</span>/<span class="number">50px</span> <span class="number">60px</span>  ,</span><br><span class="line">	   <span class="built_in">url</span>(<span class="string">test1.jpg</span>) no-repeat scroll <span class="number">10px</span> <span class="number">20px</span>/<span class="number">70px</span> <span class="number">90px</span> ,</span><br><span class="line">	   <span class="built_in">url</span>(<span class="string">test1.jpg</span>) no-repeat scroll <span class="number">10px</span> <span class="number">20px</span>/<span class="number">110px</span> <span class="number">130px</span> c <span class="number">#aaa</span>;</span><br></pre></td></tr></table></figure></div>



<h2 id="凹凸文字"><a href="#凹凸文字" class="headerlink" title="凹凸文字"></a>凹凸文字</h2><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">        	<span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="selector-tag">div</span> &#123;</span><br><span class="line">			<span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">			<span class="attribute">font</span>: <span class="number">700</span> <span class="number">80px</span> <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">			<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">			<span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">			<span class="comment">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span></span><br><span class="line">			<span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#000</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;我是凸起的文字&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;我是凹下的文字&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498467533412.png"
                      alt="1498467533412"
                ></p>
<h2 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h2><h3 id="文本的装饰"><a href="#文本的装饰" class="headerlink" title="文本的装饰"></a>文本的装饰</h3><p>text-decoration   通常我们用于给链接修改装饰效果</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认。定义标准的文本。</td>
</tr>
<tr>
<td>underline</td>
<td>定义文本下的一条线。下划线 也是我们链接自带的</td>
</tr>
<tr>
<td>overline</td>
<td>定义文本上的一条线。</td>
</tr>
<tr>
<td>line-through</td>
<td>定义穿过文本下的一条线。</td>
</tr>
</tbody></table>
<p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* background-color: orange; */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">display</span>: inline-block;  <span class="comment">/* 把a 行内元素转换为行内块元素 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">text-align</span>: center;  <span class="comment">/* 文字水平居中 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">line-height</span>: <span class="number">50px</span>;  <span class="comment">/* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">text-decoration</span>: none;  <span class="comment">/* 取消下划线 文本装饰 */</span></span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/* 鼠标经过 给我们的链接添加背景图片*/</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/h.png</span>) no-repeat; </span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>专区说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>申请资格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>兑换奖励<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>下载游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><p>层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。</p>
<h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p>所谓层叠性是指多种CSS样式的叠加。</p>
<p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p>
<p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p>
<p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p>
<ol>
<li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li>
<li>样式不冲突，不会层叠</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure></div>

<h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p>
<p>简单的理解就是：  子承父业。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</span><br></pre></td></tr></table></figure></div>

<h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p>
<p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</span><br><span class="line"></span><br><span class="line">行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。</span><br><span class="line"></span><br><span class="line">权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。</span><br><span class="line"></span><br><span class="line">CSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</span><br></pre></td></tr></table></figure></div>



<h3 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h3><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p>
<p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p>
<table>
<thead>
<tr>
<th>继承或者* 的贡献值</th>
<th>0,0,0,0</th>
</tr>
</thead>
<tbody><tr>
<td>每个元素（标签）贡献值为</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>每个类，伪类贡献值为</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>每个ID贡献值为</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>每个行内样式贡献值</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>每个!important贡献值</td>
<td>∞ 无穷大</td>
</tr>
</tbody></table>
<p>权重是可以叠加的</p>
<p> 比如的例子：</p>
 <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">div ul  li   ------&gt;      0,0,0,3</span><br><span class="line"></span><br><span class="line">.nav ul li   ------&gt;      0,0,1,2</span><br><span class="line"></span><br><span class="line">a:hover      -----—&gt;      0,0,1,1</span><br><span class="line"></span><br><span class="line">.nav a       ------&gt;      0,0,1,1   </span><br><span class="line"></span><br><span class="line">#nav p       -----&gt;       0,1,0,1</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/w.jpg"
                      
                > 注意： </p>
<p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 &#x3D;0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p>
<ol start="2">
<li>继承的 权重是 0</li>
</ol>
<p>总结优先级：</p>
<ol>
<li>使用了 !important声明的规则。</li>
<li>内嵌在 HTML 元素的 style属性里面的声明。</li>
<li>使用了 ID 选择器的规则。</li>
<li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li>
<li>使用了元素选择器的规则。</li>
<li>只包含一个通用选择器的规则。</li>
<li>同一类选择器则遵循就近原则。</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结：权重是优先级的算法，层叠是优先级的表现</span><br></pre></td></tr></table></figure></div>

<h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>其实，CSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。  </p>
<p>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p>
<h2 id="看透网页布局的本质"><a href="#看透网页布局的本质" class="headerlink" title="看透网页布局的本质"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/t.png"
                      
                >



<p>牛奶是怎样运输，让消费者购买的呢？</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/m.jpg"
                      
                >



<p>我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。</p>
<p>看透网页布局的本质：  把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/t1.png"
                      
                >



<p>CSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/j.jpg"
                      width="300" 
                >

<h2 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h2><p>这里略过 老旧的ie盒子模型（IE6以下），对不起，我都没见过IE5的浏览器。 </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/d.jpg"
                      
                >

<p>。首先，我们来看一张图，来体会下什么是盒子模型。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/box.png"
                       width="700" 
                >

<p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color: #f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/boxs.png"
                       width="700" 
                >

<h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><p>边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。</p>
<p>语法： </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color </span><br></pre></td></tr></table></figure></div>

<p>边框属性—设置边框样式（border-style）</p>
<p>边框样式用于定义页面中边框的风格，常用属性值如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">none：没有边框即忽略所有边框的宽度（默认值）</span><br><span class="line"></span><br><span class="line">solid：边框为单实线(最为常用的)</span><br><span class="line"></span><br><span class="line">dashed：边框为虚线  </span><br><span class="line"></span><br><span class="line">dotted：边框为点线</span><br><span class="line"></span><br><span class="line">double：边框为双实线</span><br></pre></td></tr></table></figure></div>



<h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>设置内容</td>
<td>样式属性</td>
<td>常用属性值</td>
</tr>
<tr>
<td>上边框</td>
<td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>下边框</td>
<td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>左边框</td>
<td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>右边框</td>
<td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>样式综合设置</td>
<td>border-style:上边 [右边 下边 左边];</td>
<td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td>
</tr>
<tr>
<td>宽度综合设置</td>
<td>border-width:上边 [右边 下边 左边];</td>
<td>像素值</td>
</tr>
<tr>
<td>颜色综合设置</td>
<td>border-color:上边 [右边 下边 左边];</td>
<td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td>
</tr>
<tr>
<td>边框综合设置</td>
<td>border:四边宽度 四边样式 四边颜色;</td>
<td></td>
</tr>
</tbody></table>
<h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。</p>
<p>table{ border-collapse:collapse; }  collapse 单词是合并的意思</p>
<p>border-collapse:collapse; 表示边框合并在一起。</p>
<h3 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h3><p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: 左上角  右上角  右下角  左下角;</span><br></pre></td></tr></table></figure></div>

<p>课堂案例:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;  <span class="comment">/* 结构伪类选择器 选亲兄弟 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">10px</span>;  <span class="comment">/*  一个数值表示4个角都是相同的 10px 的弧度 */</span> </span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */</span></span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">50%</span>;   <span class="comment">/*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */</span></span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">40px</span>;  <span class="comment">/* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */</span></span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">40px</span>  <span class="number">80px</span>;   <span class="comment">/* 左上角 10    右上角  左下角 40   右下角80 */</span></span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">40px</span>  <span class="number">80px</span>  <span class="number">100px</span>;   <span class="comment">/* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */</span></span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">100px</span>;  </span></span><br><span class="line"><span class="language-css">			<span class="attribute">height</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">		&#125;</span></span><br><span class="line"><span class="language-css">		<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">7</span>) &#123;</span></span><br><span class="line"><span class="language-css">			<span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">0</span>;  </span></span><br><span class="line"><span class="language-css">		&#125;	</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p>
<p>padding-top:上内边距</p>
<p>padding-right:右内边距</p>
<p>padding-bottom:下内边距</p>
<p>padding-left:左内边距</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/w.jpg"
                     
                >注意：  后面跟几个数值表示的意思是不一样的。</p>
<table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>1个值</td>
<td>padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</td>
</tr>
<tr>
<td>2个值</td>
<td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</td>
</tr>
<tr>
<td>3个值</td>
<td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</td>
</tr>
<tr>
<td>4个值</td>
<td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px   <strong>顺时针</strong></td>
</tr>
</tbody></table>
<p>课堂案例：  新浪导航</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/al.gif"
                      
                >

<h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p>
<p>margin-top:上外边距</p>
<p>margin-right:右外边距</p>
<p>margin-bottom:下外边距</p>
<p>margin-left:上外边距</p>
<p>margin:上外边距 右外边距  下外边距  左外边</p>
<p>取值顺序跟内边距相同。</p>
<h3 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p>
<ol>
<li>必须是块级元素。     </li>
<li>盒子必须指定了宽度（width）</li>
</ol>
<p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p>
<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h3><ol>
<li>文字水平居中是  text-align: center</li>
<li>盒子水平居中  左右margin 改为 auto</li>
</ol>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center; <span class="comment">/*  文字居中水平 */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> auto;  <span class="comment">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span></span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>插入图片 我们用的最多 比如产品展示类</li>
<li>背景图片我们一般用于小图标背景 或者 超大背景图片</li>
</ol>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">img</span> &#123;  </span><br><span class="line">		<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">		<span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">		<span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line">		<span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">		<span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">images/sun.jpg</span>) no-repeat;</span><br><span class="line">	</span><br><span class="line">		<span class="attribute">background-size</span>: <span class="number">200px</span> <span class="number">210px</span>; <span class="comment">/*  背景图片更改大小只能用 background-size */</span></span><br><span class="line">		<span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更该位置 我用 background-position */</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p>
<p>我们尽量不要给行内元素指定上下的内外边距就好了。</p>
<h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
<h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/www.png"
                      
                >

<p>解决方案：  避免就好了。</p>
<h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/n.png"
                      
                >

<p>解决方案：</p>
<ol>
<li>可以为父元素定义1像素的上边框或上内边距。</li>
<li>可以为父元素添加overflow:hidden。</li>
</ol>
<p>待续。。。。</p>
<h2 id="content宽度和高度"><a href="#content宽度和高度" class="headerlink" title="content宽度和高度"></a>content宽度和高度</h2><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p>
<p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p>
<p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*外盒尺寸计算（元素空间尺寸）*/</span><br><span class="line">Element空间高度 = content height + padding + border + margin</span><br><span class="line">Element 空间宽度 = content width + padding + border + margin</span><br><span class="line">/*内盒尺寸计算（元素实际大小）*/</span><br><span class="line">Element Height = content height + padding + border （Height为内容高度）</span><br><span class="line">Element Width = content width + padding + border （Width为内容宽度）</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p>
<p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p>
<p>3、<strong>如果一个盒子没有给定宽度&#x2F;高度或者继承父亲的宽度&#x2F;高度，则padding 不会影响本盒子大小</strong>。</p>
<h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p>
<p>答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p>
<p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p>
<p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p>
<p>原因：</p>
<ol>
<li><p>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p>
</li>
<li><p>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p>
</li>
<li><p>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p>
</li>
</ol>
<h2 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h2><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p>
<p>可以分成两种情况：</p>
<p>1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode</p>
<p>2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的</p>
<p>注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: skyblue;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  content-box是默认的设置，如果我们添加了 border属性 该容器的大小会发生改变</span></span><br><span class="line"><span class="comment">  因为他要优先保证内部的内容所占区域不变</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  </span></span><br><span class="line"><span class="comment">  box-sizing  如果不设置 默认的值 就是 </span></span><br><span class="line"><span class="comment">  content-box: 优先保证内容的大小 对盒子进行缩放;</span></span><br><span class="line"><span class="comment">  border-box: 让盒子优先保证自己所占区域的大小,对内容进行压缩;</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure></div>



<h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><p>语法格式：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:水平阴影 垂直阴影 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498467567011.png"
                      alt="1498467567011"
                ></p>
<ol>
<li>前两个属性是必须写的。其余的可以省略。</li>
<li>外阴影 (outset) 不能写出来，是默认的，写出来之后会报错。想要内阴影就写inset</li>
</ol>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">10px</span> solid orange;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">3px</span> <span class="number">3px</span> <span class="number">5px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><h2 id="普通流-normal-flow"><a href="#普通流-normal-flow" class="headerlink" title="普通流(normal flow)"></a>普通流(normal flow)</h2><p>这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。</p>
<p>前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  </p>
<p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p>
<p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/t.jpg"
                      
                >



<h2 id="浮动-float-1"><a href="#浮动-float-1" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/l.png"
                      style="width: 600px; border: 2px solid #000;"
                >

<p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/d.png"
                      
                >

<h2 id="什么是浮动？"><a href="#什么是浮动？" class="headerlink" title="什么是浮动？"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p>
<p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>元素向左浮动</td>
</tr>
<tr>
<td>right</td>
<td>元素向右浮动</td>
</tr>
<tr>
<td>none</td>
<td>元素不浮动（默认值）</td>
</tr>
</tbody></table>
<h2 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a>浮动详细内幕特性</h2><p>浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。 </p>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/one.jpg"
                      width="500" 
                > 

<p>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。  </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/two.jpg"
                      width="400" 
                >

<p>由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</p>
<p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p>
<p>元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少</p>
<p>浮动根据元素书写的位置来显示相应的浮动。</p>
<p>总结：  浮动 ——&gt;  浮漏特       </p>
<p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，这是特殊的使用，有很多的不好处，使用要谨慎。</p>
<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/dt.png"
                      
                >

<p>人生就像乘坐北京地铁一号线：</p>
<p>途经国贸，羡慕繁华；</p>
<p>途经天安门，幻想权力；</p>
<p>途经金融街，梦想发财；</p>
<p>经过公主坟，遥想华丽家族；</p>
<p>经过玉泉路，依然雄心勃勃…</p>
<p>这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！</p>
<p>顿时醒悟：人生苦短，有始有终。 </p>
<p>好比我们的浮动，有浮动开始，则就应该有浮动结束。</p>
<h2 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h2><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 。 </p>
<p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p>
<p>准确的说，不是清除浮动，<strong>而是清除浮动造成的影响</strong>。</p>
<p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p>
<h2 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/n.jpg"
                      
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/no.jpg"
                      
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/kc.jpg"
                      
                >

<h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p>
<p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>
</tr>
<tr>
<td>right</td>
<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>
</tr>
<tr>
<td>both</td>
<td>同时清除左右两侧浮动的影响</td>
</tr>
</tbody></table>
<h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure></div>

<p>优点： 通俗易懂，书写方便</p>
<p>缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。</p>
<h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">可以给父级添加： <span class="attribute">overflow</span>为 hidden|auto|scroll  都可以实现。</span><br></pre></td></tr></table></figure></div>
<p>优点：  代码简洁</p>
<p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p>
<h3 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h3><p>使用方法：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;*zoom: <span class="number">1</span>;&#125;   <span class="comment">/* IE6、7 专有 */</span></span><br></pre></td></tr></table></figure></div>

<p>注意： content:”.”  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p>
<p>优点： 符合闭合浮动思想  结构语义化正确</p>
<p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p>
<p>代表网站： 百度、淘宝网、网易等</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/163.png"
                      style="border: 1px dashed #3c3c3c;"
                >




<h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;	<span class="comment">/*触发BFC，防止外边距合并*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>优点：  代码更简洁</p>
<p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p>
<p>代表网站： 小米、腾讯等</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/mi.png"
                      style="border: 1px dashed #3c3c3c;"
                > 

<h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p>
<p>“版心”是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p>
<h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p>
<p>1、确定页面的版心（可视区）。</p>
<p>2、分析页面中的行模块，以及每个行模块中的列模块。</p>
<p>3、制作HTML页面，CSS文件。</p>
<p>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p>
<h2 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/yl.jpg"
                      width="400" 
                >

<p>最普通的，最为常用的结构</p>
<h2 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/ll.jpg"
                      width="400" 
                >

<p>比如小米    <a class="link"   href="http://www.mi.com"  target="_blank"> 小米官网  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/tl.jpg"
                      width="600" 
                >

<p>比如锤子    <a class="link"   href="http://www.smartisan.com/"  target="_blank"> 锤子官网  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="Photoshop"><a href="#Photoshop" class="headerlink" title="Photoshop"></a>Photoshop</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498465020015.png"
                      alt="1498465020015"
                ></p>
<p>要求：</p>
<ol>
<li>简单的抠图</li>
<li>会简单的修改PSD效果图</li>
<li><strong>熟练的切图</strong></li>
</ol>
<h2 id="Photoshop基本使用"><a href="#Photoshop基本使用" class="headerlink" title="Photoshop基本使用"></a>Photoshop基本使用</h2><h2 id="PS界面组成："><a href="#PS界面组成：" class="headerlink" title="PS界面组成："></a>PS界面组成：</h2><p>菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口<br>​    窗口菜单，可显示隐藏所有面板</p>
<p>工作区：（新建）</p>
<p>1、调整浮动面板</p>
<p>2、选项栏后方，新建工作区，命名。</p>
<p>删除工作区：先选择其他工作区，再操作删除工作区。</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>文件下拉菜单：<br>​    1、新建      新建文档      CTRL+N</p>
<p>单位：像素   厘米   毫米</p>
<p>屏幕显示： 单位  像素      72像素&#x2F;英寸    RGB颜色模式</p>
<p>印刷行业： 单位  CM&#x2F;MM   300像素&#x2F;英寸   CMYK颜色模式</p>
<p>2、关闭文档     CTRL+W </p>
<p>3、存储    CTRL+S    （替存）</p>
<p>4、存储为  CTRL+SHIFT+S    另存一份文件</p>
<p>5、格式：<br>​      .psd     PS源文件格式   图层、文字、样式等，可再次编辑<br>​      （给自己）<br>​      .jpg     有损压缩格式   （给客户）  品质  最高12</p>
<p>6、文件打开：<br>​      1）文件下拉菜单-打开（CTRL+O欧）（双击软件空白处&#x3D;打开）<br>​      2）拖拽文件至选项栏上方，释放鼠标</p>
<h2 id="移动工具-V"><a href="#移动工具-V" class="headerlink" title="移动工具 V"></a>移动工具 V</h2><p>1、不同文件之间拖拽图像。</p>
<h2 id="自由变形"><a href="#自由变形" class="headerlink" title="自由变形"></a>自由变形</h2><p>CTRL+T</p>
<h2 id="图层操作"><a href="#图层操作" class="headerlink" title="图层操作"></a>图层操作</h2><p> 图层面板快捷键   F7</p>
<p> 图层选择： 使用移动工具V </p>
<p> 1、图层缩览图判断</p>
<p> 2、按住CTRL,在目标图像上单击</p>
<p> 3、将光标放置在目标图像上右键，选择图层名称</p>
<h3 id="图层面板中加选图层："><a href="#图层面板中加选图层：" class="headerlink" title="图层面板中加选图层："></a>图层面板中加选图层：</h3><p>1、按SHIFT，单击另一目标图层     中间所有图层被选中</p>
<p>2、按CTRL，单击另一目标图层     只选中目标图层</p>
<h3 id="复制图层：选中目标图层后（移动工具状态下）"><a href="#复制图层：选中目标图层后（移动工具状态下）" class="headerlink" title="复制图层：选中目标图层后（移动工具状态下）"></a>复制图层：选中目标图层后（移动工具状态下）</h3><p>   1、按ALT拖拽图像</p>
<p>   2、CTRL+J      （重合）</p>
<p>   3、拖拽目标至创建新图层按钮</p>
<h2 id="图层编组"><a href="#图层编组" class="headerlink" title="图层编组"></a>图层编组</h2><p>选中目标图层，CTRL+G   </p>
<p>取消编组：CTRL+SHIFT+G</p>
<p>双击图层名称可重新命名</p>
<p>双击组名称，可命名组</p>
<p>  移动工具V选择组或图层时，需设置选项栏</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498465862231.png"
                      alt="1498465862231"
                ></p>
<h2 id="图层上下位置移动"><a href="#图层上下位置移动" class="headerlink" title="图层上下位置移动"></a>图层上下位置移动</h2><p>1、选中目标图层，在图层面拖拽</p>
<p>2、CTRL+]    向上移动图层<br>​       CTRL+[    向下移动图层</p>
<p>3、CTRL+SHIFT+]   图层置顶<br>​       CTRL+SHIFT+[   图层置底</p>
<p>移动选区或图像时：</p>
<p>移动过程中，没释放鼠标，按住SHIFT，可同一水平线、同一垂线、45度移动。</p>
<h2 id="图层透明度"><a href="#图层透明度" class="headerlink" title="图层透明度"></a>图层透明度</h2><p>CTRL+e  合并图层</p>
<p>不透明度：设置图层的不透明程度    0%完全透明，不可见</p>
<p>​                                  100%完全不透明，真实可见</p>
<p>填充：与不透明度效果类似</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498465905203.png"
                      alt="1498465905203"
                >)</p>
<p>键盘数字键，可快速设置透明度数值     </p>
<h2 id="套索工具-L"><a href="#套索工具-L" class="headerlink" title="套索工具 L"></a>套索工具 L</h2><p>1、套索工具      L  在屏幕上拖拽鼠标左键，释放后生成选区</p>
<p>2、多边形套索    L  连续单击绘制多边形选区</p>
<p>​                  闭合方法：1、单击起始点  2、双击任意位置</p>
<p>​                  DELETE删除当前点</p>
<p>3、磁性套索工具  L  单击颜色交界后，沿交界线拖拽鼠标，可生成选区。</p>
<h2 id="磁性套索-L"><a href="#磁性套索-L" class="headerlink" title="磁性套索 L"></a>磁性套索 L</h2><p>L   在颜色交界的位置单击后拖动。单击起始点后，生成选区。      大小写键：CAPSLOCK   可控制光标精确状态。</p>
<h2 id="魔棒工具-W"><a href="#魔棒工具-W" class="headerlink" title="魔棒工具   W"></a>魔棒工具   W</h2><p>以单击位置为选择色，选择相似颜色生成选区。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498465928343.png"
                      alt="1498465928343"
                > </p>
<p>容差：选择颜色的范围     容差小，颜色选择精确。    0-255</p>
<p>连续：勾选连续时，相连颜色生成选区。</p>
<p>​     不勾选，画面中所有相似颜色被选中生成选区。</p>
<p>按SHIFT在未生成选区位置单击，可选区相加。</p>
<p>选区反选：CTRL+SHIFT+I </p>
<h2 id="选区布尔运算"><a href="#选区布尔运算" class="headerlink" title="选区布尔运算"></a>选区布尔运算</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498465944087.png"
                      alt="1498465944087"
                ></p>
<p>选区面积大小的变化。</p>
<p>新选区：保持选中状态</p>
<p>添加到选区：相加运算（按住SHIFT再绘制选区）</p>
<p>从选区减去：相减（按住ALT再绘制选区）</p>
<p>与选区交叉：重合部分保留。（按住ALT+SHIFT再绘制选区）</p>
<h2 id="钢笔工具：-P"><a href="#钢笔工具：-P" class="headerlink" title="钢笔工具：   P"></a>钢笔工具：   P</h2><p>作用：绘制路径，生成选区，抠图。</p>
<p>组成;路径线和锚点</p>
<p>想要取消弧线，按住alt点击锚点</p>
<p>绘制路径后，CTRL+回车，生成选区。</p>
<p>路径类型：</p>
<p>直线型路径：连续单击</p>
<p>曲线型路径：第一点单击，第二点拖动鼠标。</p>
<h2 id="Photoshop-切图"><a href="#Photoshop-切图" class="headerlink" title="Photoshop 切图"></a>Photoshop 切图</h2><p>PS切图 可以 分为 手动 利用切片切图 以及 利用PS的插件快速切图</p>
<h3 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498466173246.png"
                      alt="1498466173246"
                ></p>
<ol>
<li><p>利用切片工具手动划出</p>
</li>
<li><p>图层—新建基于图层的切片</p>
</li>
<li><p>利用标尺   基础参考线的切片</p>
</li>
<li><p>先选个一个整个的切片，切片选择工具——属性面板中有“划分”可以等分数平分切图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498466734205.png"
                      alt="1498466734205"
                ></p>
</li>
</ol>
<h3 id="切图插件"><a href="#切图插件" class="headerlink" title="切图插件"></a>切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p>
<p>官网: <a class="link"   href="http://www.cutterman.cn/zh/cutterman" >http://www.cutterman.cn/zh/cutterman <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/sample1.gif"
                      
                >

<h1 id="项目案例：-学成网"><a href="#项目案例：-学成网" class="headerlink" title="项目案例： 学成网"></a>项目案例： 学成网</h1><p>案例练习目的是总结以前的css和html</p>
<p>还有ps的使用。</p>
<p>制作步骤：</p>
<ol>
<li><p>准备相关文件。（内部样式表) html文件(index.html)   图片文件</p>
</li>
<li><p>准备CSS 初始化。 书写结构和样式</p>
</li>
<li><p>确定版心（是1200像素)和各个模块。</p>
</li>
</ol>
<h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h1><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。</p>
<p>PS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p>
<h2 id="为什么要用定位？"><a href="#为什么要用定位？" class="headerlink" title="为什么要用定位？"></a>为什么要用定位？</h2><p>那么定位，最长运用的场景再那里呢？   来看几幅图片，你一定会有感悟！</p>
<p>第一幅图， 小黄色块可以再图片上移动：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1.gif"
                      style="border: 1px dashed #3c3c3c;"
                >

<p>第二幅图， 左右箭头压住图片：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/2.gif"
                      style="border: 1px dashed #3c3c3c;"
                >

<p>第三幅图,  hot 在盒子外面多出一块，更加突出：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/it.png"
                      style="border: 1px dashed #3c3c3c;"
                >

<p>以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！</p>
<h2 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p>
<p>1、边偏移</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>top</td>
<td>顶端偏移量，定义元素相对于其父元素上边线的距离</td>
</tr>
<tr>
<td>bottom</td>
<td>底部偏移量，定义元素相对于其父元素下边线的距离</td>
</tr>
<tr>
<td>left</td>
<td>左侧偏移量，定义元素相对于其父元素左边线的距离</td>
</tr>
<tr>
<td>right</td>
<td>右侧偏移量，定义元素相对于其父元素右边线的距离</td>
</tr>
</tbody></table>
<p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等</p>
<p>2、定位模式（定位的分类）</p>
<p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p>
<p>选择器{position:属性值;}</p>
<p>position属性的常用值</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>自动定位（默认定位方式）</td>
</tr>
<tr>
<td>relative</td>
<td>相对定位，相对于其原文档流的位置进行定位</td>
</tr>
<tr>
<td>absolute</td>
<td>绝对定位，相对于其上一个已经定位的父元素进行定位</td>
</tr>
<tr>
<td>fixed</td>
<td>固定定位，相对于浏览器窗口进行定位</td>
</tr>
</tbody></table>
<h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。</p>
<p>上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p>
<p>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p>
<p>一般用来清除定位的</p>
<p>PS： 静态定位其实没啥可说的。</p>
<h2 id="相对定位relative-自恋型"><a href="#相对定位relative-自恋型" class="headerlink" title="相对定位relative(自恋型)"></a>相对定位relative(自恋型)</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">小笑话： </span><br><span class="line">刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/smail.gif"
                      width="100"
                >

<p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p>
<p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是<strong>它在文档流中的位置仍然保留</strong>。如下图所示，即是一个相对定位的效果展示：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/r.png"
                       
                >

<p>注意：    </p>
<ol>
<li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li>
<li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li>
</ol>
<p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p>
<p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p>
<h2 id="绝对定位absolute-拼爹型"><a href="#绝对定位absolute-拼爹型" class="headerlink" title="绝对定位absolute (拼爹型)"></a>绝对定位absolute (拼爹型)</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">小笑话：</span><br><span class="line"></span><br><span class="line">吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” </span><br><span class="line"></span><br><span class="line">我一阵感动，刚想夸他两句。 </span><br><span class="line"></span><br><span class="line">儿子接着说：“以后全靠你让我拼爹了！”</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/smail.gif"
                      width="100"
                >

<p>　[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p>
<p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。</p>
<p>注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，<strong>但是它完全脱标，完全不占位置</strong>。</p>
<h3 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h3><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/ab.png"
                      
                >

<h3 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h3><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/ab1.png"
                      
                >

<h3 id="绝对定位的盒子没有边偏移"><a href="#绝对定位的盒子没有边偏移" class="headerlink" title="绝对定位的盒子没有边偏移"></a>绝对定位的盒子没有边偏移</h3><p>如果只是给盒子指定了 定位，但是没有给与边偏移，则改盒子以标准流来显示排序，和上一个盒子的底边对齐，但是不占有位置。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/ab2.png"
                      
                >

<h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p>
<p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p>
<p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p>
<p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p>
<p>但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/zi.png"
                       style="border: 1px dashed #3c3c3c;"
                >

<p>草图就是如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/zifu.png"
                       style="border: 1px dashed #3c3c3c;"
                >

<p>所以，我们可以得出如下结论：</p>
<p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p>
<p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位. </p>
<p>这就是子绝父相的由来。</p>
<h2 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平&#x2F;垂直居中"></a>绝对定位的盒子水平&#x2F;垂直居中</h2><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了</p>
<p>定位的盒子也可以水平或者垂直居中，有一个算法。</p>
<ol>
<li><p>首先left 50%   父盒子的一半大小</p>
</li>
<li><p>然后走自己外边距负的一半值就可以了 margin-left。</p>
</li>
</ol>
<h2 id="固定定位fixed-认死理型"><a href="#固定定位fixed-认死理型" class="headerlink" title="固定定位fixed(认死理型)"></a>固定定位fixed(认死理型)</h2><p>固定定位是绝对定位的一种特殊形式，它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p>
<p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p>
<p>固定定位有两点：</p>
<ol>
<li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li>
<li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li>
</ol>
<p>记忆法：  就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/sun.jpg"
                      width="100"
                >

<p>ie6等低版本浏览器不支持固定定位。</p>
<h2 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h2><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/zzz.png"
                      
                >

<p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p>
<p>比如：  z-index: 2;</p>
<p>注意：</p>
<ol>
<li><p>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</p>
</li>
<li><p>如果取值相同，则根据书写顺序，后来居上。</p>
</li>
<li><p>后面数字一定不能加单位。</p>
</li>
<li><p>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p>
</li>
</ol>
<h1 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h1><table>
<thead>
<tr>
<th>定位模式</th>
<th>是否脱标占有位置</th>
<th>是否可以使用边偏移</th>
<th>移动位置基准</th>
</tr>
</thead>
<tbody><tr>
<td>静态static</td>
<td>不脱标，正常模式</td>
<td>不可以</td>
<td>正常模式</td>
</tr>
<tr>
<td>相对定位relative</td>
<td>不脱标，占有位置</td>
<td>可以</td>
<td>相对自身位置移动(自恋型)</td>
</tr>
<tr>
<td>绝对定位absolute</td>
<td>完全脱标，不占有位置</td>
<td>可以</td>
<td>相对于定位父级移动位置（拼爹型）</td>
</tr>
<tr>
<td>固定定位fixed（特殊的绝对定位）</td>
<td>完全脱标，不占有位置</td>
<td>可以</td>
<td>相对于浏览器移动位置（认死理型）</td>
</tr>
</tbody></table>
<h1 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式， 因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后，可以不用转换模式，直接给高度和宽度就可以了。</p>
<h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p>
<p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p>
<h2 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p>
<p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p>
<p>特点： <strong>隐藏之后，不再保留位置</strong>。</p>
<h2 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p>
<p>visible : 　对象可视</p>
<p>hidden : 　对象隐藏</p>
<p>特点： <strong>隐藏之后，继续保留原有位置</strong>。（停职留薪）</p>
<h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p>
<p>visible : 　不剪切内容也不添加滚动条。</p>
<p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p>
<p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p>
<p>scroll : 　不管超出内容否，总是显示滚动条</p>
<h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><p> 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p>
<h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</span><br></pre></td></tr></table></figure></div>

<p> 鼠标放我身上查看效果哦：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:default&quot;</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:pointer&quot;</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:move&quot;</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:text&quot;</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p> 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用</p>
<h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline</span> : outline-color ||outline-style || outline-width </span><br></pre></td></tr></table></figure></div>

<p> 但是我们都不关心可以设置多少，我们平时都是去掉的。</p>
<p>最直接的写法是 ：  outline: 0; </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;outline: 0;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p>
<p>右下角可以拖拽： </p>
<textarea></textarea>

<p>右下角不可以拖拽： </p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p>以前我们讲过让带有宽度的块级元素居中对齐，是margin: 0 auto;</p>
<p>以前我们还讲过让文字居中对齐，是 text-align: center;</p>
<p>但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。</p>
<p>vertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/xian.jpg"
                      
                >

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure></div>

<p>设置或检索对象内容的垂直对其方式。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498467742995.png"
                      alt="1498467742995"
                ></p>
<p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片和表单与文字的对齐</strong>等。</p>
<h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p>
<h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 如果一个元素没有基线，比如图片或者表单等行内块元素，则他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p>
<p>解决的方法就是：  </p>
<ol>
<li><p>给img vertical-align:middle | top等等。  让图片不要和基线对齐。（用的比较多）<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1633.png"
                       width="500"  style="border: 1px dashed #ccc;" 
                ></p>
</li>
<li><p>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/sina1.png"
                      width="500" style="border: 1px dashed #ccc;"
                ></p>
</li>
</ol>
<h1 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h1><h2 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h2><p>normal   使用浏览器默认的换行规则。</p>
<p>break-all   允许在单词内换行。</p>
<p>keep-all    只能在半角空格或连字符处换行。</p>
<p>主要处理英文单词</p>
<h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </p>
<p>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</p>
<p>可以处理中文</p>
<h2 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h2><p>text-overflow : clip | ellipsis</p>
<p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p>
<p>clip : 　不显示省略标记（…），而是简单的裁切 </p>
<p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p>
<p>注意<strong>一定要首先强制一行内显示</strong>，再次和overflow属性  搭配使用</p>
<h1 id="CSS精灵技术（sprite）"><a href="#CSS精灵技术（sprite）" class="headerlink" title="CSS精灵技术（sprite）"></a>CSS精灵技术（sprite）</h1><h2 id="精灵技术产生的背景"><a href="#精灵技术产生的背景" class="headerlink" title="精灵技术产生的背景"></a>精灵技术产生的背景</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/sss.png"
                      
                >

<p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p>
<p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p>
<h2 id="精灵技术本质"><a href="#精灵技术本质" class="headerlink" title="精灵技术本质"></a>精灵技术本质</h2><p>简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/jds.png"
                       style="border: 1px dashed #ccc;" 
                >

<h2 id="精灵技术的使用"><a href="#精灵技术的使用" class="headerlink" title="精灵技术的使用"></a>精灵技术的使用</h2><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。</p>
<h2 id="制作精灵图"><a href="#制作精灵图" class="headerlink" title="制作精灵图"></a>制作精灵图</h2><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p>
<p>大部分情况下，精灵图都是网页美工做。</p>
<ul>
<li>我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</li>
<li>我们精灵图的宽度取决于最宽的那个背景。 </li>
<li>我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。</li>
<li>在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</li>
</ul>
<p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p>
<h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p>
<h2 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h2><ul>
<li>可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..</li>
<li>但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等…</li>
<li>本身体积更小，但携带的信息并没有削减。</li>
<li>几乎支持所有的浏览器</li>
<li>移动端设备必备良药…</li>
</ul>
<h2 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h2><p>总体来说，字体图标按照如下流程：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/fontt.png"
                      
                >

<h3 id="设计字体图标"><a href="#设计字体图标" class="headerlink" title="设计字体图标"></a>设计字体图标</h3><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/03.jpg"
                      
                >

<p>  之后保存为svg格式，然后给我们前端人员就好了。 </p>
<p>  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p>
<h3 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h3><p>   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p>
<p>​    推荐网站： <a class="link"   href="http://icomoon.io/" >http://icomoon.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>icomoon字库</strong></p>
<p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
<p>   推荐网站： <a class="link"   href="http://www.iconfont.cn/" >http://www.iconfont.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>阿里icon font字库</strong></p>
<p><a class="link"   href="http://www.iconfont.cn/" >http://www.iconfont.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p>
<p><strong>fontello</strong></p>
<p><a class="link"   href="http://fontello.com/" >http://fontello.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。</p>
<p><strong>Font-Awesome</strong></p>
<p><a class="link"   href="http://fortawesome.github.io/Font-Awesome/" >http://fortawesome.github.io/Font-Awesome/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p>
<p><strong>Glyphicon Halflings</strong></p>
<p><a class="link"   href="http://glyphicons.com/" >http://glyphicons.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。</p>
<p><strong>Icons8</strong></p>
<p><a class="link"   href="https://icons8.com/" >https://icons8.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>提供PNG免费下载，像素大能到500PX</p>
<h3 id="下载兼容字体包"><a href="#下载兼容字体包" class="headerlink" title="下载兼容字体包"></a>下载兼容字体包</h3><p>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了</p>
<p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/fontt1.png"
                      
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/fontt2.png"
                      
                >

<h3 id="字体引入到HTML"><a href="#字体引入到HTML" class="headerlink" title="字体引入到HTML"></a>字体引入到HTML</h3><p>最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p>
<ol>
<li><p>首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498032122244.png"
                      alt="1498032122244"
                ></p>
</li>
</ol>
<h4 id="第一步：在样式里面声明字体：-告诉别人我们自己定义的字体"><a href="#第一步：在样式里面声明字体：-告诉别人我们自己定义的字体" class="headerlink" title="第一步：在样式里面声明字体： 告诉别人我们自己定义的字体"></a>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h4>   <div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;			<span class="comment">/*声明字体*/</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="第二步：给盒子使用字体"><a href="#第二步：给盒子使用字体" class="headerlink" title="第二步：给盒子使用字体"></a>第二步：给盒子使用字体</h4>   <div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">		<span class="attribute">font-family</span>: <span class="string">&quot;icomoon&quot;</span>;		<span class="comment">/*和上面的font-family相同*/</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="第三步：盒子里面添加结构"><a href="#第三步：盒子里面添加结构" class="headerlink" title="第三步：盒子里面添加结构"></a>第三步：盒子里面添加结构</h4>   <div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">		 <span class="attribute">content</span>: <span class="string">&quot;\e900&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">或者  </span><br><span class="line">&lt;<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;  </span><br></pre></td></tr></table></figure></div>


<h3 id="追加新图标到原来库里面"><a href="#追加新图标到原来库里面" class="headerlink" title="追加新图标到原来库里面"></a>追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p>
<p>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/fontt5.png"
                      
                >

<h1 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h1><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/h.gif"
                      
                >

<h2 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h2><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/wxx.jpg"
                      
                >

<p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p>
<h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p>
<p>一般的经典布局都是这样的：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>总结： </p>
<ol>
<li>a 设置 背景左侧，padding撑开合适宽度。    </li>
<li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li>
<li>之所以a包含span就是因为 整个导航都是可以点击的。</li>
</ol>
<h1 id="before和after伪元素"><a href="#before和after伪元素" class="headerlink" title="before和after伪元素"></a>before和after伪元素</h1><p>之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。是伪元素在html代码机构中的展现，可以看出无法伪元素的结构无法审查</p>
<p><strong>注意</strong></p>
<p>伪元素:before和:after添加的内容默认是inline元素**；这个两个伪元素的<code>content</code>属性，表示伪元素的内容,设置:before和:after时必须设置其<code>content</code>属性，否则伪元素就不起作用。</p>
<h2 id="过渡-CSS3"><a href="#过渡-CSS3" class="headerlink" title="过渡(CSS3)"></a>过渡(CSS3)</h2><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
<p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498445034712.png"
                      alt="1498445034712"
                ></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/zhen.gif"
                      
                >

<p>在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p>
<p>语法格式:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">transition: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br><span class="line">如果有多组属性变化，还是用逗号隔开。</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>CSS</th>
</tr>
</thead>
<tbody><tr>
<td>transition</td>
<td>简写属性，用于在一个属性中设置四个过渡属性。</td>
<td>3</td>
</tr>
<tr>
<td>transition-property</td>
<td>规定应用过渡的 CSS 属性的名称。</td>
<td>3</td>
</tr>
<tr>
<td>transition-duration</td>
<td>定义过渡效果花费的时间。默认是 0。（单位是秒，单位必须写）</td>
<td>3</td>
</tr>
<tr>
<td>transition-timing-function</td>
<td>规定过渡效果的时间曲线。默认是 “ease”。</td>
<td>3</td>
</tr>
<tr>
<td>transition-delay</td>
<td>规定过渡效果何时开始。默认是 0。</td>
<td>3</td>
</tr>
</tbody></table>
<p>如果想要所有的属性都变化过渡， 写一个all 就可以</p>
<p>transition-duration  花费时间  单位是  秒     s    比如 0.5s    这个s单位必须写      ms 毫秒</p>
<p>运动曲线   默认是 ease</p>
<p> 何时开始  默认是 0s  立马开始</p>
<p>运动曲线示意图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498445454760.png"
                      alt="1498445454760"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">80px</span>; <span class="attribute">height</span>: <span class="number">80px</span>; <span class="attribute">border</span>:<span class="number">8px</span> solid <span class="number">#ccc</span>; <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transition</span>:transform <span class="number">0.5s</span> ease-in <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">			width: 200px;</span><br><span class="line">			height: 100px;</span><br><span class="line">			background-color: pink;</span><br><span class="line">			/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */</span><br><span class="line">			transition: width 0.6s ease 0s, height 0.3s ease-in 1s;</span><br><span class="line">			/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */</span><br><span class="line">  </span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">div:hover &#123;  /* 鼠标经过盒子，我们的宽度变为400 */</span><br><span class="line"></span><br><span class="line">			width: 600px;</span><br><span class="line">			height: 300px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transition: all 0.6s;  /* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */</span><br></pre></td></tr></table></figure></div>



<h2 id="2D变形-CSS3-transform"><a href="#2D变形-CSS3-transform" class="headerlink" title="2D变形(CSS3)transform"></a>2D变形(CSS3)transform</h2><p>transform转换是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、变形、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。</p>
<p>变形转换 transform  </p>
<ul>
<li>移动 translate(x, y)</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498443715586.png"
                      alt="1498443715586"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">translate</span>(<span class="number">50px</span>,<span class="number">50px</span>);</span><br></pre></td></tr></table></figure></div>

<p>使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。</p>
<p>可以改变元素的位置，x、y可为负值；</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</span><br><span class="line">translateX(x)仅水平方向移动（X轴移动）</span><br><span class="line">translateY(Y)仅垂直方向移动（Y轴移动）</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">499.9999px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);  <span class="comment">/* 走的自己的一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> 让定位的盒子水平居中</p>
<ul>
<li>缩放 scale(x, y)</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498444645795.png"
                      alt="1498444645795"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0.8</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>

<p>可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）</span><br><span class="line">scaleX(x)元素仅水平方向缩放（X轴缩放）</span><br><span class="line">scaleY(y)元素仅垂直方向缩放（Y轴缩放）</span><br></pre></td></tr></table></figure></div>

<p> scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大</p>
<ul>
<li>旋转 rotate(deg)</li>
</ul>
<p>可以对元素进行旋转，正值为顺时针，负值为逆时针；</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498443651293.png"
                      alt="1498443651293"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br></pre></td></tr></table></figure></div>

<p> 注意单位是 deg 度数  </p>
<ol>
<li><p>当元素旋转以后，坐标轴也跟着发生的转变</p>
</li>
<li><p>调整顺序可以解决，把旋转放到最后</p>
</li>
<li><p>注意单位是 deg 度数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform-origin: top right;		/* 设置旋转的中心点 */</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>案例旋转扑克牌</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">300px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform-origin</span>: top right;</span><br><span class="line">  <span class="comment">/* 添加过渡 */</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">240deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">300deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>倾斜 skew(deg, deg)</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498443827389.png"
                      alt="1498443827389"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">skew</span>(<span class="number">30deg</span>,<span class="number">0deg</span>);</span><br></pre></td></tr></table></figure></div>

<p>该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p>
<p> 可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。</p>
<h2 id="transform-origin可以调整元素转换的原点"><a href="#transform-origin可以调整元素转换的原点" class="headerlink" title="transform-origin可以调整元素转换的原点"></a>transform-origin可以调整元素转换的原点</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498443912530.png"
                      alt="1498443912530"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: left top;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>); &#125;  <span class="comment">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span>    </span><br></pre></td></tr></table></figure></div>

<p> 如果是4个角，可以用 left top这些，如果想要精确的位置， 可以用  px 像素。</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">transform-origin</span>: <span class="number">10px</span> <span class="number">10px</span>;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>); &#125;  <span class="comment">/* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</span> </span><br></pre></td></tr></table></figure></div>



<p>案例旋转楚乔传</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">			<span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">			<span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line">			<span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">			<span class="attribute">margin</span>: <span class="number">200px</span> auto;</span><br><span class="line">			<span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">			<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">			<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">			<span class="attribute">position</span>: absolute;</span><br><span class="line">			<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">			<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">			<span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">			<span class="attribute">transform-origin</span>: top right;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;  <span class="comment">/* 鼠标经过div  第一张图片旋转 */</span></span><br><span class="line">			<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;  </span><br><span class="line">			<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;  </span><br><span class="line">			<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;  </span><br><span class="line">			<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">240deg</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;  </span><br><span class="line">			<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">300deg</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;  </span><br><span class="line">			<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure></div>

<p>案例：  菱形照片        三角盒子  </p>
<h2 id="3D变形（CSS3）"><a href="#3D变形（CSS3）" class="headerlink" title="3D变形（CSS3）"></a>3D变形（CSS3）</h2><p>左手坐标系</p>
<p>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。如下图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498445587576.png"
                      alt="1498445587576"
                ></p>
<p>CSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度，如下图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498459001951.png"
                      alt="1498459001951"
                ></p>
<p>简单记住他们的坐标：</p>
<p> x左边是负的，右边是正的</p>
<p>y 上面是负的， 下面是正的</p>
<p>z 里面是负的， 外面是正的</p>
<h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX()"></a>rotateX()</h3><p> 就是沿着 x 立体旋转.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498445756802.png"
                      alt="1498445756802"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>:hove &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY()"></a>rotateY()</h3><p>沿着y轴进行旋转</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498446043198.png"
                      alt="1498446043198"
                ></p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all <span class="number">0.5s</span> ease <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>:hove &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="rotateZ-"><a href="#rotateZ-" class="headerlink" title="rotateZ()"></a>rotateZ()</h3><p>沿着z轴进行旋转</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>:all .<span class="number">25s</span> ease-in <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* transform:rotateX(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateY(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateZ(180deg); */</span></span><br><span class="line">  <span class="comment">/* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视(perspective)"></a>透视(perspective)</h3><p>电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p>
<p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。</p>
<ul>
<li>透视原理： 近大远小 。</li>
<li>浏览器透视：把近大远小的所有图像，透视在屏幕上。</li>
<li>perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置</li>
</ul>
<p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p>
<p>perspective有两种写法</p>
<ol>
<li>作为一个属性，设置给父元素，作用于所有3D转换的子元素</li>
<li>作为transform属性的一个值，做用于元素自身</li>
</ol>
<p>理解透视距离原理：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498446715314.png"
                      alt="1498446715314"
                ></p>
<h3 id="开门案例"><a href="#开门案例" class="headerlink" title="开门案例"></a>开门案例</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/dog.gif&#x27;</span>) no-repeat center/cover;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: left center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: brown;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right center;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid whitesmoke;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">130deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.door</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">130deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="translateX-x"><a href="#translateX-x" class="headerlink" title="translateX(x)"></a>translateX(x)</h3><p>仅水平方向移动**（X轴移动）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498459697576.png"
                      alt="1498459697576"
                ></p>
<p>主要目的实现移动效果</p>
<h3 id="translateY-y"><a href="#translateY-y" class="headerlink" title="translateY(y)"></a>translateY(y)</h3><p>仅垂直方向移动（Y轴移动）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498459770252.png"
                      alt="1498459770252"
                ></p>
<h3 id="translateZ-z"><a href="#translateZ-z" class="headerlink" title="translateZ(z)"></a>translateZ(z)</h3><p>transformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p>
<h3 id="3D呈现（transform-style）"><a href="#3D呈现（transform-style）" class="headerlink" title="3D呈现（transform-style）"></a>3D呈现（transform-style）</h3><p>设置内嵌的元素在 3D 空间如何呈现，这些子元素必须为转换原素。</p>
<p>flat：所有子元素在 2D 平面呈现</p>
<p>preserve-3d：保留3D空间</p>
<p>3D元素构建是指某个图形是由多个元素构成的，可以给这些元素的父元素设置transform-style: preserve-3d来使其变成一个真正的3D图形。</p>
<p>一般而言，该声明应用在3D变换的兄弟元素们的父元素上。</p>
<h3 id="翻转盒子案例-百度钱包"><a href="#翻转盒子案例-百度钱包" class="headerlink" title="翻转盒子案例(百度钱包)"></a>翻转盒子案例(百度钱包)</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#B3C04C</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.wallet</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/bg.png</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: right top;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background-position</span>: left top;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wallet</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="动画-CSS3"><a href="#动画-CSS3" class="headerlink" title="动画(CSS3)"></a>动画(CSS3)</h2><p>动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498461096243.png"
                      alt="1498461096243"
                ></p>
<p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意r</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123; 开始位置 &#125;  <span class="number">0%</span></span><br><span class="line">  <span class="selector-tag">to</span>&#123;  结束  &#125;  <span class="number">100%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">animation-iteration-count:infinite;  无限循环播放</span><br><span class="line">animation-play-state:paused;   暂停动画&quot;</span><br></pre></td></tr></table></figure></div>

<h3 id="小汽车案例"><a href="#小汽车案例" class="headerlink" title="小汽车案例"></a>小汽车案例</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: goback;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> goback &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;&#125;</span><br><span class="line">  <span class="number">49%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">1000px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">55%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">1000px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">95%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="伸缩布局-CSS3"><a href="#伸缩布局-CSS3" class="headerlink" title="伸缩布局(CSS3)"></a>伸缩布局(CSS3)</h2><p>CSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p>
<p>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向</p>
<p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p>
<p>方向：默认主轴从左向右，侧轴默认从上到下</p>
<p>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/CSS-notes/media/1498441839910.png"
                      alt="1498441839910"
                ></p>
<p>Flex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多</p>
<h3 id="各属性详解"><a href="#各属性详解" class="headerlink" title="各属性详解"></a>各属性详解</h3><p>1.flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配</p>
<p>min-width  最小值      min-width: 280px  最小宽度  不能小于 280</p>
<p>max-width: 1280px  最大宽度  不能大于 1280</p>
<p>2.flex-direction调整主轴方向（默认为水平方向）</p>
<p>flex-direction: column 垂直排列</p>
<p>flex-direction: row  水平排列</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><a class="link"   href="http://m.ctrip.com/html5/" >http://m.ctrip.com/html5/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>   携程网手机端地址</p>
<h3 id="justify-content调整主轴对齐（水平对齐）"><a href="#justify-content调整主轴对齐（水平对齐）" class="headerlink" title="justify-content调整主轴对齐（水平对齐）"></a>justify-content调整主轴对齐（水平对齐）</h3><p>子盒子如何在父盒子里面水平对齐</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
<th>白话文</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>默认值。项目位于容器的开头。</td>
<td>让子元素从父容器的开头开始排序但是盒子顺序不变</td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于容器的结尾。</td>
<td>让子元素从父容器的后面开始排序但是盒子顺序不变</td>
</tr>
<tr>
<td>center</td>
<td>项目位于容器的中心。</td>
<td>让子元素在父容器中间显示</td>
</tr>
<tr>
<td>space-between</td>
<td>项目位于各行之间留有空白的容器内。</td>
<td>左右的盒子贴近父盒子，中间的平均分布空白间距</td>
</tr>
<tr>
<td>space-around</td>
<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>
<td>相当于给每个盒子添加了左右margin外边距</td>
</tr>
</tbody></table>
<h3 id="align-items调整侧轴对齐（垂直对齐）"><a href="#align-items调整侧轴对齐（垂直对齐）" class="headerlink" title="align-items调整侧轴对齐（垂直对齐）"></a>align-items调整侧轴对齐（垂直对齐）</h3><p>子盒子如何在父盒子里面垂直对齐（单行）</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
<th>白话文</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>默认值。项目被拉伸以适应容器。</td>
<td>让子元素的高度拉伸适用父容器（子元素不给高度的前提下)</td>
</tr>
<tr>
<td>center</td>
<td>项目位于容器的中心。</td>
<td>垂直居中</td>
</tr>
<tr>
<td>flex-start</td>
<td>项目位于容器的开头。</td>
<td>垂直对齐开始位置 上对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于容器的结尾。</td>
<td>垂直对齐结束位置 底对齐</td>
</tr>
</tbody></table>
<h3 id="flex-wrap控制是否换行"><a href="#flex-wrap控制是否换行" class="headerlink" title="flex-wrap控制是否换行"></a>flex-wrap控制是否换行</h3><p>当我们子盒子内容宽度多于父盒子的时候如何处理</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>默认值。规定灵活的项目不拆行或不拆列。  不换行，则 收缩（压缩） 显示  强制一行内显示</td>
</tr>
<tr>
<td>wrap</td>
<td>规定灵活的项目在必要的时候拆行或拆列。</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td>
</tr>
</tbody></table>
<h3 id="flex-flow是flex-direction、flex-wrap的简写形式"><a href="#flex-flow是flex-direction、flex-wrap的简写形式" class="headerlink" title="flex-flow是flex-direction、flex-wrap的简写形式"></a>flex-flow是flex-direction、flex-wrap的简写形式</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: flex-direction  flex-wrap;  </span><br></pre></td></tr></table></figure></div>

<p>白话记：    flex-flow: 排列方向   换不换行; </p>
<p>两个中间用空格</p>
<p>例如：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="comment">/* flex-direction: row;</span></span><br><span class="line"><span class="comment">flex-wrap: wrap;   这两句话等价于下面的这句话*/</span></span><br><span class="line"><span class="attribute">flex-flow</span>: column wrap;  <span class="comment">/* 两者的综合 */</span></span><br></pre></td></tr></table></figure></div>



<h3 id="align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐"><a href="#align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐" class="headerlink" title="align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐"></a>align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐</h3><p>align-content是针对flex容器里面多轴(多行)的情况,align-items是针对一行的情况进行排列。</p>
<p>必须对父元素设置自由盒属性display:flex;，并且设置排列方式为横向排列flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>默认值。项目被拉伸以适应容器。</td>
</tr>
<tr>
<td>center</td>
<td>项目位于容器的中心。</td>
</tr>
<tr>
<td>flex-start</td>
<td>项目位于容器的开头。</td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于容器的结尾。</td>
</tr>
<tr>
<td>space-between</td>
<td>项目位于各行之间留有空白的容器内。</td>
</tr>
<tr>
<td>space-around</td>
<td>项目位于各行之前、之间、之后都留有空白的容器内。</td>
</tr>
</tbody></table>
<h3 id="order控制子项目的排列顺序，正序方式排序，从小到大"><a href="#order控制子项目的排列顺序，正序方式排序，从小到大" class="headerlink" title="order控制子项目的排列顺序，正序方式排序，从小到大"></a>order控制子项目的排列顺序，正序方式排序，从小到大</h3><p>用css 来控制盒子的前后顺序。  用order 就可以</p>
<p>用整数值来定义排列顺序，数值小的排在前面。<strong>可以为负值</strong>。 默认值是 0</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">order</span>: <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>



<p>此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 setup ts如何使用this.$xxx全局变量</title>
    <url>/page/20230803192333/</url>
    <content><![CDATA[<blockquote>
<p><strong>目录</strong></p>
</blockquote>
<p>在vue2中，我们知道vue2.x是使用Vue.prototype.$xxxx&#x3D;xxx来定义全局变量，然后通过this.$xxx来获取全局变量。</p>
<p>但是在vue3中，这种方法显然不行了。因为vue3中在setup里面我们是无法获取到this的，因此按照官方文档我们使用下面方法来定义全局变量：</p>
<p>  首先在main.js里写一个我们要定义的全局变量，比如一个系统id吧（这里$systemId是在data(){..}可以用this.$systemId来使用）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$http</span> = http</span><br></pre></td></tr></table></figure></div>

<p>  现在在页面里需要使用这个变量，只需要从vue中引入getCurrentInstance即可，注意不能在页面中使用this.</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> context = <span class="title function_">getCurrentInstance</span>()?.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context);<span class="comment">//控制台可以看到输出了</span></span><br></pre></td></tr></table></figure></div>



<p>原文：<a class="link"   href="https://blog.csdn.net/m0_54864585/article/details/123369501" >https://blog.csdn.net/m0_54864585/article/details/123369501 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>作者：<a class="link"   href="http://www.cnblogs.com/silentdoer/" >Silentdoer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Elelment UI 导航菜单设置路由</title>
    <url>/page/20230706180638/</url>
    <content><![CDATA[<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>在 <code>&lt;el-menu&gt;</code>里面添加一个属性 router</p>
<p><code>router</code> 属性 是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230706/Snipaste_2023-07-06_17-58-26.4gtekgubzpg0.jpg"
                      alt="Snipaste_2023-07-06_17-58-26"
                ><br>也可以这样写</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230706/Snipaste_2023-07-06_17-59-46.6tsdw4kmbns0.jpg"
                      alt="Snipaste_2023-07-06_17-59-46"
                ></p>
<p>然后就在<code> &lt;el-menu-item&gt;</code> 把index设置成路径</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230706/Snipaste_2023-07-06_17-57-16.7kai2q16gos0.jpg"
                      alt="Snipaste_2023-07-06_17-57-16"
                ></p>
<p>效果<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230706/Snipaste_2023-07-06_18-00-28.42vmr8149dq0.jpg"
                      alt="Snipaste_2023-07-06_18-00-28"
                ></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>RSI技术分析</title>
    <url>/page/20240831223321/</url>
    <content><![CDATA[<h1 id="RIS-背离"><a href="#RIS-背离" class="headerlink" title="RIS 背离"></a>RIS 背离</h1><h2 id="1-RSI-趋势转变的背离"><a href="#1-RSI-趋势转变的背离" class="headerlink" title="1.RSI 趋势转变的背离"></a>1.RSI 趋势转变的背离</h2><h3 id="顶背离"><a href="#顶背离" class="headerlink" title="顶背离"></a>顶背离</h3><blockquote>
<p>股价<strong>高点</strong>不断上升，RSI不断<strong>下降</strong>，代表动能不断<strong>减弱</strong>，上升趋势即将转变为<strong>下跌趋势</strong></p>
</blockquote>
<h4 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240902000341086.7zqdetwkki.webp"
                      alt="image-20240902000341086"
                ></p>
<h4 id="eg2"><a href="#eg2" class="headerlink" title="eg2:"></a>eg2:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831224310535.8hgf3euzit.webp"
                      alt="image-20240831224310535"
                ></p>
<h3 id="底背离"><a href="#底背离" class="headerlink" title="底背离"></a>底背离</h3><blockquote>
<p>股价<strong>低点</strong>不断<strong>下跌</strong>，RSI不断<strong>上升</strong>，代表动能不断<strong>增加</strong>，<strong>下降趋势</strong>即将转变为<strong>上升趋势</strong></p>
</blockquote>
<h4 id="eg1-1"><a href="#eg1-1" class="headerlink" title="eg1:"></a>eg1:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831224243978.6m3uaslycn.webp"
                      alt="image-20240831224243978"
                ></p>
<h4 id="eg2-1"><a href="#eg2-1" class="headerlink" title="eg2:"></a>eg2:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831224456796.5fkj26x6o7.webp"
                      alt="image-20240831224456796"
                ></p>
<h2 id="2-RSI趋势延续的背离"><a href="#2-RSI趋势延续的背离" class="headerlink" title="2.RSI趋势延续的背离"></a>2.RSI趋势延续的背离</h2><h3 id="上升趋势的背离"><a href="#上升趋势的背离" class="headerlink" title="上升趋势的背离"></a>上升趋势的背离</h3><blockquote>
<p>当股价处在<strong>上升趋势</strong>，低点一个比一个高，但<strong>RSI低点一个比一个低</strong>，意味着有<strong>卖家在进行抛售</strong>，但抛售力量不足以让股价趋势反转</p>
</blockquote>
<h4 id="eg1-2"><a href="#eg1-2" class="headerlink" title="eg1:"></a>eg1:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831224853134.9nzqc0p9z7.webp"
                      alt="image-20240831224853134"
                ></p>
<h4 id="eg2-2"><a href="#eg2-2" class="headerlink" title="eg2:"></a>eg2:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831225001178.8l0114u4m8.webp"
                      alt="image-20240831225001178"
                ></p>
<h3 id="下跌趋势的背离"><a href="#下跌趋势的背离" class="headerlink" title="下跌趋势的背离"></a>下跌趋势的背离</h3><blockquote>
<p>当股价处在<strong>下跌趋势</strong>，<strong>高点一个比一个低</strong>，但<strong>RSI低点一个比一个高</strong>，意味着有<strong>买家在进行买入</strong>，但买入力量不足以让股价趋势反转</p>
</blockquote>
<h4 id="eg1-3"><a href="#eg1-3" class="headerlink" title="eg1:"></a>eg1:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831225232630.175bsdajms.webp"
                      alt="image-20240831225232630"
                ></p>
<h4 id="eg2-3"><a href="#eg2-3" class="headerlink" title="eg2:"></a>eg2:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831225257000.6wqo3y5365.webp"
                      alt="image-20240831225257000"
                ></p>
<h1 id="RSI交易策略"><a href="#RSI交易策略" class="headerlink" title="RSI交易策略"></a>RSI交易策略</h1><h2 id="1-RSI背离-关键价位"><a href="#1-RSI背离-关键价位" class="headerlink" title="1.RSI背离+关键价位"></a>1.RSI背离+关键价位</h2><h4 id="eg1-4"><a href="#eg1-4" class="headerlink" title="eg1:"></a>eg1:</h4><p>这里可以看到是一个上升的趋势，这里发现了一个RSI顶背离</p>
<p>我们可以画一条趋势线，当股价跌破趋势线，意味趋势反转</p>
<p>这是 RSI顶背离和趋势线跌破的双重确认下 大概率后市看跌，我们可以入场做空</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831225827062.8hgf3f2grb.webp"
                      alt="image-20240831225827062"
                ></p>
<h4 id="eg2-4"><a href="#eg2-4" class="headerlink" title="eg2:"></a>eg2:</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240831/image-20240831230604272.6m3uasq86o.webp"
                      alt="image-20240831230604272"
                ></p>
<h2 id="2-大时间级别关键价位-小时间RSI背离-小时间级别关键价位"><a href="#2-大时间级别关键价位-小时间RSI背离-小时间级别关键价位" class="headerlink" title="2.大时间级别关键价位+小时间RSI背离+小时间级别关键价位"></a>2.大时间级别关键价位+小时间RSI背离+小时间级别关键价位</h2><h2 id="3-大事件级别RSI背离-小时间级别RSI背离-关键价位"><a href="#3-大事件级别RSI背离-小时间级别RSI背离-关键价位" class="headerlink" title="3.大事件级别RSI背离+小时间级别RSI背离+关键价位"></a>3.大事件级别RSI背离+小时间级别RSI背离+关键价位</h2>]]></content>
      <categories>
        <category>技术分析</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>vue配置代理解决跨域问题</title>
    <url>/page/20230704175132/</url>
    <content><![CDATA[<p>在 <code>vue.config.js</code> 文件中，你可以使用 <code>devServer.proxy</code> 选项来设置代理以解决跨域问题。下面是一个示例配置：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8000&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个示例中，我们设置了一个代理，将以 <code>/api</code> 开头的请求代理到 <code>http://localhost:8000</code>。其中的选项解释如下：</p>
<ul>
<li><code>target</code>：代理的目标地址。</li>
<li><code>changeOrigin</code>：是否修改请求头中的 <code>Host</code> 字段为目标地址。</li>
<li><code>pathRewrite</code>：路径重写规则，用于修改请求路径。</li>
</ul>
<p>通过这个配置，当你在开发环境中发送 <code>/api/users</code> 的请求时，它会被代理到 <code>http://localhost:8000/users</code>。</p>
<p>你可以根据你的具体需求和后端配置进行相应的修改。确保在项目根目录下的 <code>vue.config.js</code> 文件中添加这个配置，然后重新启动开发服务器，代理配置就会生效。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>三十年，解决人生三大问题</title>
    <url>/page/20240629012142/</url>
    <content><![CDATA[<h1 id="科技爱好者周刊（第-300-期）：三十年，解决人生三大问题"><a href="#科技爱好者周刊（第-300-期）：三十年，解决人生三大问题" class="headerlink" title="科技爱好者周刊（第 300 期）：三十年，解决人生三大问题"></a>科技爱好者周刊（第 300 期）：三十年，解决人生三大问题</h1><p>作者： <a class="link"   href="https://www.ruanyifeng.com/" >阮一峰 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>日期： <a class="link"   href="https://www.ruanyifeng.com/blog/2024/05/" >2024年5月17日 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这里记录每周值得分享的科技内容，周五发布。</p>
<p>本杂志<a class="link"   href="https://github.com/ruanyf/weekly" >开源 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，欢迎<a class="link"   href="https://github.com/ruanyf/weekly/issues" >投稿 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。另有<a class="link"   href="https://github.com/ruanyf/weekly/issues/4390" >《谁在招人》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>服务，发布程序员招聘信息。合作请<a class="link"   href="mailto:yifeng.ruan@gmail.com" >邮件联系 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（<a class="link"   href="mailto:&#x79;&#x69;&#102;&#x65;&#x6e;&#103;&#46;&#x72;&#117;&#97;&#x6e;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;" >&#x79;&#x69;&#102;&#x65;&#x6e;&#103;&#46;&#x72;&#117;&#97;&#x6e;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）。</p>
<h2 id="封面图"><a href="#封面图" class="headerlink" title="封面图"></a>封面图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.beekka.com/blogimg/asset/202405/bg2024051501.webp"
                      alt="img"
                ></p>
<p>本周，太阳活动剧烈，引起几十年来最大的地磁暴。地球的中高纬度地区，普遍可以看到极光，就连北京这样的中纬度城市，都出现了极光，上图是长城。（<a class="link"   href="https://m.bjnews.com.cn/detail/1715495546129388.html" >via <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</p>
<h2 id="三十年，解决人生三大问题"><a href="#三十年，解决人生三大问题" class="headerlink" title="三十年，解决人生三大问题"></a>三十年，解决人生三大问题</h2><p>我最近看到<a class="link"   href="https://huyenchip.com/2024/04/17/personal-growth.html" >一篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，很有意思，分享给大家。</p>
<p>文章大意是，<strong>人的一生就是解决三个基本问题：事业、家庭和财务。</strong></p>
<p>一份有成就的事业，一个幸福的家庭，一个健康的财务状况，人生就没有遗憾了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.beekka.com/blogimg/asset/202405/bg2024051513.webp"
                      alt="img"
                ></p>
<p>我们的人生规划，就是朝着解决这三个问题努力。哪怕其中只有一个没有解决，你的人生就过不好。</p>
<p>原文作者提出了他的规划。他说，这三个问题要分阶段解决，每个阶段重点解决一个问题。而且<strong>他估计，每个阶段要花费十年</strong>，总共需要三十年。</p>
<p><strong>（1）第一个十年</strong>。你搞清楚自己想干什么，找到方向，为事业打下基础，从此全力投入。</p>
<p><strong>（2）第二个十年</strong>。你结婚、买房、养育后代。</p>
<p><strong>（3）第三个十年</strong>。你努力赚钱，积蓄退休金。</p>
<p>如果将18岁成年作为起点，过完这三个十年，你就已经48岁了。</p>
<p>也就是说，你的目标是，到了48岁，基本解决人生三大问题。48岁以后的时间，就是自己的选择，追求梦想，照顾家人，或者继续推进事业，积累更多财富。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.beekka.com/blogimg/asset/202405/bg2024051607.webp"
                      alt="img"
                ></p>
<p>原文作者没有解释，为什么每个阶段需要十年。我倒是觉得，十年是一个合理的时间。</p>
<p>如果是八年、七年、甚至五年，那样固然很好，不过难度也会相应变大，多少人能做到呢。如果更长一点，每个阶段需要十二年，甚至十五年，那样就有点太晚了，你都要退休了。更重要的是，年纪越大，人生改变的可能性越小，五十岁以后其实能做的有限。</p>
<p>总之，我认为，这是一个很新颖的视角，可以用作思考人生问题的框架，对我很有启发。</p>
<p>凡事就看它是否有助于”事业、家庭和财务”，我们的目标就是在48岁前解决好这些问题。</p>
]]></content>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack笔记</title>
    <url>/page/20230619145350/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习<code>webpack</code>过程当中整理的一系列笔记，如有不对的地方请各位老哥指导。</p>
<h2 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h2><p>​		官方解释： 本质上，<strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 <em>静态模块打包工具</em>。当 <strong>webpack</strong>处理应用程序时，它会在内部从一个或多个入口点构建一个 <a class="link"   href="https://webpack.docschina.org/concepts/dependency-graph/" >依赖图(dependency graph) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em>，它们均为静态资源，用于展示你的内容。</p>
<p>​		简单<strong>webpack</strong>主要是用于打包前端代码的，它可以将JavaScript、CSS、图片等资源打包成一个或多个文件，用于浏览器端的加载。而Express框架是一个Node.js的后端框架，用于搭建Web应用程序。因此，<strong>webpack</strong>并不适用于打包Express框架本身，但是你可以使用<strong>webpack</strong>打包你的前端代码，并将打包后的文件引入到Express框架中。这样可以将前端代码和后端代码分离，便于管理和维护。</p>
<h2 id="webpack的下载和基本使用"><a href="#webpack的下载和基本使用" class="headerlink" title="webpack的下载和基本使用"></a>webpack的下载和基本使用</h2><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><p>局部安装<br><code>npm install webpack webpack-cli --save</code><br>全局安装<br><code>npm install webpack webpack-cli -g</code></p>
<p><strong>如果要运行 局部安装的可以使用 <code>npx webpack</code>来运行 全局安装可以直接调用<code>webpack</code>命令</strong></p>
<h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><p>局部 <code>npx webpack -v</code><br>全局 <code>webpack -v</code></p>
<h3 id="设置打包"><a href="#设置打包" class="headerlink" title="设置打包"></a>设置打包</h3><p>在项目目录创建webpack.config.js</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path=<span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line">moudule.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">resolve</span>(_dirname,<span class="string">&quot;项目入口文件&quot;</span>),</span><br><span class="line">    <span class="comment">//多入口</span></span><br><span class="line">    <span class="attr">entry</span>:[<span class="string">&#x27;./src/js/index.js&#x27;</span>,<span class="string">&#x27;./js/one.js&#x27;</span>],</span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">        <span class="attr">ind</span>:<span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">        <span class="attr">on</span>:<span class="string">&#x27;./js/one.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//输出设置</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">reslove</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>),<span class="comment">//输出的路径</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;bundle.js&#x27;</span>,<span class="comment">//输出文件的名字</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">       <span class="attr">filename</span>: <span class="string">&#x27;js/webpack02.[name].js&#x27;</span>,</span><br><span class="line">       <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="配置文件-可跳过"><a href="#配置文件-可跳过" class="headerlink" title="配置文件 (可跳过)"></a>配置文件 (可跳过)</h3><p>找到 <code>package.json</code> 文件, 如果没有可以使用<code>npm init</code>进行初始化<br>添加下面一段话</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></div>
<p>意思是 添加一个脚本 可以通过 <code>npm run build</code> 命令来执行 <code>npx webpack</code></p>
<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><h4 id="配置-html-webpack-plugin"><a href="#配置-html-webpack-plugin" class="headerlink" title="配置 html-webpack-plugin"></a>配置 html-webpack-plugin</h4><ul>
<li>安装依赖库</li>
</ul>
<p><code>npm install html-webpack-plugin --save-dev</code></p>
<ul>
<li>配置webpack.config.js<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>) <span class="comment">// 引入 html-webpack-plugin</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">		<span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">		<span class="attr">output</span>: &#123;</span><br><span class="line">			<span class="attr">path</span>: __dirname + <span class="string">&quot;/dist&quot;</span>,</span><br><span class="line">			<span class="attr">filename</span>: <span class="string">&quot;dist.js&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(</span><br><span class="line">            &#123;</span><br><span class="line">				<span class="attr">title</span>:<span class="string">&quot;test html&quot;</span> <span class="comment">// 设置更改默认标题名字</span></span><br><span class="line">                <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> <span class="comment">// 把打包的模板设置成自己页面</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="配置-css-less-sass-等文件"><a href="#配置-css-less-sass-等文件" class="headerlink" title="配置 css less sass 等文件"></a>配置 css less sass 等文件</h4><ul>
<li>安装依赖库</li>
</ul>
<p><code>npm install style-loader css-loader less-lader --save-dev</code></p>
<ul>
<li>配置webpack.config.js<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   	<span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">		<span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">		<span class="attr">output</span>: &#123;</span><br><span class="line">			<span class="attr">path</span>: __dirname + <span class="string">&quot;/dist&quot;</span>,</span><br><span class="line">			<span class="attr">filename</span>: <span class="string">&quot;dist.js&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(less|css)$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&quot;style-loader&quot;</span>,<span class="comment">// 注意 style-loader必须写前面 不然会报错</span></span><br><span class="line">                <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="配置clean-webpack-plugin"><a href="#配置clean-webpack-plugin" class="headerlink" title="配置clean-webpack-plugin"></a>配置clean-webpack-plugin</h4><p>使用clean-webpack-plugin 在打包之前做清空dist(打包生成的路径文件夹)的操作</p>
<ul>
<li>安装依赖库</li>
</ul>
<p><code>npm install clean-webpack-plugin --save-dev</code></p>
<ul>
<li>配置webpack.config.js<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125;=<span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="comment">// 在打包之前做清空dist的操作</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="配置资源模块"><a href="#配置资源模块" class="headerlink" title="配置资源模块"></a>配置资源模块</h3><p>资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p>
<p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p>
<ul>
<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li>
<li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 <code>url-loader</code> 实现。</li>
<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li>
<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(jpg|jpeg|png|gif)$/i</span>, <span class="comment">// 图片后缀名</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><p><code>webpack</code>有 5 个核心概念：<code>entry</code>、<code>output</code>、<code>mode</code>、<code>loaders</code>、<code>plugins</code>。</p>
<h5 id="entry"><a href="#entry" class="headerlink" title="entry"></a><code>entry</code></h5><p><strong>入口起点(entry point)</strong> 指示 webpack 应该使用哪个模块，来作为构建其内部 <a class="link"   href="https://webpack.docschina.org/concepts/dependency-graph/" >依赖图(dependency graph) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>
<p>默认值是 <code>./src/index.js</code>，但你可以通过在 <a class="link"   href="https://webpack.docschina.org/configuration" >webpack configuration <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 中配置 <code>entry</code> 属性，来指定一个（或多个）不同的入口起点。例如：</p>
<p><strong>webpack.config.js</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h5 id="output"><a href="#output" class="headerlink" title="output"></a><code>output</code></h5><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p>
<p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p>
<p><strong>webpack.config.js</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>在上面的示例中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。可能你想要了解在代码最上面导入的 path 模块是什么，它是一个 <a class="link"   href="https://nodejs.org/api/modules.html" >Node.js 核心模块 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，用于操作文件路径。</p>
<h5 id="loader"><a href="#loader" class="headerlink" title="loader"></a><code>loader</code></h5><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a class="link"   href="https://webpack.docschina.org/concepts/modules" >模块 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，以供应用程序使用，以及被添加到依赖图中。</p>
<p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p>
<ul>
<li><p><code>test</code> 属性，识别出哪些文件会被转换。</p>
</li>
<li><p><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;my-first-webpack.bundle.js&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">	<span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">&#x27;raw-loader&#x27;</span> &#125;],</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h5 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a><code>plugin</code></h5><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p>
<p>查看 <a class="link"   href="https://webpack.docschina.org/api/plugins" >插件接口(plugin interface) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，学习如何使用它来扩展 webpack 能力。</p>
<p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">&#x27;raw-loader&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h5 id="mode"><a href="#mode" class="headerlink" title="mode"></a><code>mode</code></h5><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>想要了解更多，请查阅 <a class="link"   href="https://webpack.docschina.org/configuration/mode" >mode 配置 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这里有具体每个值相应的优化行为。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a class="link"   href="https://webpack.docschina.org/concepts/" >https://webpack.docschina.org/concepts/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>什么时候卖出股票</title>
    <url>/page/20240930145057/</url>
    <content><![CDATA[<h2 id="什么时候卖出股票？"><a href="#什么时候卖出股票？" class="headerlink" title="什么时候卖出股票？"></a>什么时候卖出股票？</h2><p>最好永远不需要卖出股票，也就是巴菲特所说的：</p>
<blockquote>
<p>“Our favourite holding period is forever.”</p>
</blockquote>
<p>当然，很多人不理解他的意思，认为股票迟早有一天要卖掉，否则买它干什么呢？</p>
<p>接下来我分享一下我的三个原则。</p>
<hr>
<h3 id="1-卖出原因要匹配买入原因"><a href="#1-卖出原因要匹配买入原因" class="headerlink" title="1. 卖出原因要匹配买入原因"></a>1. 卖出原因要匹配买入原因</h3><p>你不应该只问“什么时候卖股票”，而是应该问“你为什么买那只股票”。换句话说，卖出的理由应该与买入的初衷一致。</p>
<ul>
<li><strong>原则1：你是一个什么样的投资者？</strong>（投资逻辑&#x2F;哲学决定卖出原因）</li>
</ul>
<p>不同的投资者在参与的是不同的游戏。</p>
<p>如果你是指数基金的长期投资者，并且手动管理不同基金仓位的配比，你可能需要定期卖出部分持仓以重新平衡。但如果你持有的是标普500指数，你可能不需要进行这些调整，因此这种卖出规则对你无效。</p>
<p>同样地，如果你是短期投资者，止盈或止损可能是卖出的原因，但对于长期投资者，这些就不适用了。</p>
<h3 id="2-止盈止损，对冲？—-小心你使用的词汇"><a href="#2-止盈止损，对冲？—-小心你使用的词汇" class="headerlink" title="2. 止盈止损，对冲？— 小心你使用的词汇"></a>2. 止盈止损，对冲？— 小心你使用的词汇</h3><p>“止盈止损”通常是频繁交易者的概念。如果你是一个长期投资者，暴露在这些交易术语中时，可能会误以为自己也必须止盈止损。当你手中只有一只股票时，听到其他人调整仓位的建议，可能会使你也想购买更多不同的股票。</p>
<p>不知不觉中，你可能会开始使用一些不适合自己的词汇，从而参与了一场本不属于你的投资游戏。</p>
<p>这就是为什么视频作者更强调“思维模型”的重要性。了解自己是什么样的投资者后，你就能轻松地找到适合自己的卖出方法。</p>
<h3 id="3-视频作者的卖出规则"><a href="#3-视频作者的卖出规则" class="headerlink" title="3. 视频作者的卖出规则"></a>3. 视频作者的卖出规则</h3><ul>
<li>特别需要钱的时候</li>
<li>公司发生质变</li>
<li><strong>有更好的投资机会</strong>，或者遇到<strong>不同性质的投资</strong></li>
</ul>
<hr>
<h2 id="决策正确与否，取决于主观感受（是否后悔）"><a href="#决策正确与否，取决于主观感受（是否后悔）" class="headerlink" title="决策正确与否，取决于主观感受（是否后悔）"></a>决策正确与否，取决于主观感受（是否后悔）</h2><ul>
<li><strong>原则2：后悔最小化原则</strong></li>
</ul>
<p>不要小看这个“后悔最小化原则”。</p>
<p>牛顿曾经投资南海公司的股票，最初在低点买入，但看到朋友没有卖出后，他感到后悔，于是再次买入。结果股票泡沫破裂，牛顿因此损失了毕生积蓄，他于是说出了那句著名的话：</p>
<blockquote>
<p>“我可以计算出天体运行的轨迹，却无法计算出人类内心的疯狂。”</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/sudo0m/picx-images-hosting/raw/master/20240930/image.64dtr2lopy.webp"
                      alt="image"
                ></p>
<h3 id="1-抛弃幻想，接受不确定性"><a href="#1-抛弃幻想，接受不确定性" class="headerlink" title="1. 抛弃幻想，接受不确定性"></a>1. 抛弃幻想，接受不确定性</h3><p>人们后悔卖出股票，通常是因为他们期望股票卖出后会按自己的预测下跌。我们需要接受这样一个事实：卖出股票后，股票的走势大概率不会如你所愿。</p>
<h3 id="2-排除最不可接受的结果（即最让你后悔的可能性）"><a href="#2-排除最不可接受的结果（即最让你后悔的可能性）" class="headerlink" title="2. 排除最不可接受的结果（即最让你后悔的可能性）"></a>2. 排除最不可接受的结果（即最让你后悔的可能性）</h3><h3 id="3-重要决策需要“沙盘推演”"><a href="#3-重要决策需要“沙盘推演”" class="headerlink" title="3. 重要决策需要“沙盘推演”"></a>3. 重要决策需要“沙盘推演”</h3><ul>
<li>重要的决策 –&gt; 沙盘推演，为各种情况做好准备</li>
<li>不重要的决策 –&gt; 直接行动</li>
</ul>
<hr>
<h2 id="场外-场内原则"><a href="#场外-场内原则" class="headerlink" title="场外 &gt; 场内原则"></a>场外 &gt; 场内原则</h2><p>视频作者将股票市场比作一个游戏，而在这个游戏之外，还有一个更大的游戏：你的生活和整体财务状况。</p>
<p>无论你在股票市场中如何计划周密，如果场外的生活没有运营好，卖出股票的决定可能并不掌握在你自己手中。</p>
<p>作者坦诚道：<a class="link"   href="https://youtu.be/bCrYXDi-br0?si=Kvb4UqDiOcRu79Yy" >大多数人无法靠股票投资致富，还需要拥有自己的生意 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<blockquote>
<p>不要让股市成为你最大的财富游戏。因为在自己的事业和生意中，你有更多的控制力。让股市投资占你资产的一小部分，不仅能降低整体财务风险，也能影响你在股市中的决策。比如当你决定卖出时，你会更加理性，不至于因为一个错误决定而患得患失，甚至毁掉你人生的整体规划。</p>
</blockquote>
<blockquote>
<p>最大的安全边界在“场外”。</p>
</blockquote>
<p>当你在场外的生活经营得足够好，拥有足够的安全边界时，根本不需要急于变现手中的资产，这就是：</p>
<blockquote>
<p>“最好的持有时间是‘永久’。”</p>
</blockquote>
<hr>
<h3 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h3><p><a class="link"   href="https://www.youtube.com/watch?v=F4Smc2Q0xys" >https://www.youtube.com/watch?v=F4Smc2Q0xys <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>视频笔记</category>
      </categories>
      <tags>
        <tag>理财</tag>
        <tag>视频笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>屯比特币文章部分</title>
    <url>/page/20240806170450/</url>
    <content><![CDATA[<blockquote>
<p>比特币是人类历史上第一次，用技术手段实现了私有财产神圣不可侵犯。—— 李笑来</p>
</blockquote>
<p>在真正读懂比特币白皮书的瞬间，我的感觉是无法用文字来形容的。充满了惊叹、兴奋与懊悔。惊叹于中本聪巧夺天工的设计，兴奋于比特币即将引发的社会巨变，懊悔于自己竟然没有在第一次听到这个词的时候就来读白皮书。</p>
<p>一路走来，我感觉到很多人都变味了。近朱者赤，近墨者黑。在大染缸里呆久了，想独善其身很难。局外人看得很清楚的坏事，局内人总会编织各种理由来麻痹自己。</p>
<h2 id="囤币：我们需要多长时间可以实现财富自由？"><a href="#囤币：我们需要多长时间可以实现财富自由？" class="headerlink" title="囤币：我们需要多长时间可以实现财富自由？"></a><a class="link"   href="https://coxxa.github.io/bitcoin-ahr999-HODL/#/di-san-zhang?id=%E5%9B%A4%E5%B8%81%EF%BC%9A%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%A4%9A%E9%95%BF%E6%97%B6%E9%97%B4%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%EF%BC%9F" >囤币：我们需要多长时间可以实现财富自由？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p>一线城市财富自由的门槛是2.9亿（请自行百度）。在这里，我们放宽一点要求，把门槛降低到1.6亿元，也就是20年后1个比特币的价值。</p>
<p>根据指数递减增长模型：</p>
<ul>
<li>如果你想4年后实现财富自由，你需要拥有339个比特币；</li>
<li>如果你想8年后实现财富自由，你需要拥有47个比特币；</li>
<li>如果你想12年后实现财富自由，你需要拥有10个比特币；</li>
<li>如果你想16年后实现财富自由，你需要拥有3个比特币；</li>
<li>如果你想20年后实现财富自由，你需要拥有1个比特币；</li>
</ul>
<p><strong>很多人会告诉你，拥有1个比特币，未来你就可以财富自由。我认为我百分比认同。</strong></p>
<p>但我的问题是，你是否愿意等20年？或者你到底愿意等几年？或者你现在能买得起几个币？</p>
<p>现实是，以今天的币价，绝大多数人拿出10%-30%的资产，只能拥有10个或更少的比特币。因此，想要通过囤币实现财富自由，需要至少12年。你是否已经做好了长期囤币的打算？</p>
<p><strong>所以，哪怕你明知囤币可以实现财富自由，你也囤不住的，只因为你等不了这么久。</strong></p>
<p>矛盾之处恰恰也在这里。你买1个币，需要等20年才能财富自由，你觉得太久，不愿意等，很懊恼。但是，如果你不买，4年之后，你可能连懊恼的机会都没有了，因为那个时候，你连1个币都买不起了。</p>
<h2 id="我们是否有捷径可以走？"><a href="#我们是否有捷径可以走？" class="headerlink" title="我们是否有捷径可以走？"></a><a class="link"   href="https://coxxa.github.io/bitcoin-ahr999-HODL/#/di-san-zhang?id=%E6%88%91%E4%BB%AC%E6%98%AF%E5%90%A6%E6%9C%89%E6%8D%B7%E5%BE%84%E5%8F%AF%E4%BB%A5%E8%B5%B0%EF%BC%9F" >我们是否有捷径可以走？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p><strong>首先，你可能需要反省一下，是不是自己的要求太高了？</strong>绝大多数人，这辈子都没有实现财富自由的可能性，能够实现财富自由的是极少数。囤1个比特币，等上20年，除此之外啥都不需要干，已经是捷径中的捷径了。</p>
<p><strong>其次，疯狂提升圈外赚钱能力，多赚法币多囤币，可以缩短实现财富自由的时间。</strong>但是，要缩短1个周期，币量大约要翻3-4倍，对每个人来说都是很艰难的。我选择的就是这条路径，至少很稳。</p>
<p><strong>再次，快速实现财富自由的途径永远存在，也可以不局限于币圈，但总体上概率极低。</strong>万众创新，那么多企业，又有几家能成为拼多多呢？我也在践行这条路径，但是我不抱什么希望。</p>
<p><strong>人往往就是这样，其实已经走在捷径上了，还在拼命的到处找捷径。</strong></p>
<p><strong>对于孤独，我的建议是，疯狂写东西。有的事情你想跟别人说，别人又不认可，你憋着又难受，你就把它全部写下来。</strong>等到你适应孤独的时候，你会发现，不仅你的思维更成熟了，而且你的文笔更好了。</p>
<blockquote>
<p>比特币第一次使得我们可以把财富储存在一串“虚幻的”私钥字符串上，这是革命性的，它意味着人类社会最大的需求之一，每个人都有的储存财富的需求，其方式发生了重大革新。</p>
</blockquote>
<ul>
<li>如果你用现金储存财富，当拥有巨额财富时，你的现金可能会放满1间屋子。实际上，你并不拥有这些财富，因为你拿不走。你的现金会慢慢发霉，或某天被人开卡车拖走，并且烧坏几十台验钞机。</li>
<li>如果你用银行存款储值，提取转账都很方便，但你的账户存在被银行冻结的风险。</li>
<li>即使你现金不多，能随身携带，存款也不被冻结，你依然存在被增发货币稀释财富的风险。20年前的1万元存单，放到今天还剩下多少购买力？</li>
<li>如果你用黄金储值，你同样无法拿走，于是你可能会跟某证券大佬一样，偷运44公斤黄金出海关被查。</li>
<li>如果你用不动产储值，那就不仅仅是无法带走的问题了，还有被强拆强征的风险。</li>
<li>如果你用股票储值，你也很危险，弄不好会意外死亡，股份被捐给慈善机构。</li>
</ul>
]]></content>
      <categories>
        <category>比特币</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>坚果Pro3 root教程 Magisk</title>
    <url>/page/20220820190032/</url>
    <content><![CDATA[<p><strong>需要降级为下方链接中的系统版本，如果不刷机下面可能无法操作</strong></p>
<p><strong>刷机包版本为7.2没有全面屏动画，一步横屏，桌面光影</strong></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong>刷机包地址</strong>：</p>
<p><a class="link"   href="https://smartisan-ota.oss-cn-beijing.aliyuncs.com/ota/mol.delta-rom-7.0.0-SEKSA.delta-user/201911190615/7.2.0-201911190108-user-dlt-fab3f7b929-root.zip" >https://smartisan-ota.oss-cn-beijing.aliyuncs.com/ota/mol.delta-rom-7.0.0-SEKSA.delta-user/201911190615/7.2.0-201911190108-user-dlt-fab3f7b929-root.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>一键root包文件下载</strong>:</p>
<p><a class="link"   href="https://wwr.lanzoui.com/iv5wdu66dje" >坚果Pro3_root.zip - 蓝奏云 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><p>手机连接到电脑上，开启usb调试,解压下载的一键root包解压然后运行 一键安装root面具.bat</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/7BoPQ18JbANmlDO.2p46ep7vkx20.webp"
                      alt="7BoPQ18JbANmlDO"
                ></p>
<p>界面和我的差不多就说明成功了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/ZWEJCxvRqn95Faw.570zgueui1s0.webp"
                      alt="ZWEJCxvRqn95Faw"
                ></p>
<p>然后发现手机多了两个应用</p>
<p>一个magisk 一个magiskenabler</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/89snweWGt3YVup1.5djtl55lqzk0.webp"
                      alt="89snweWGt3YVup1"
                ></p>
<p>需要给magiskenabler开机自启权限和存储权限</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/tZE4bliYSr8mxLp.4lfm11433ek0.webp"
                      alt="tZE4bliYSr8mxLp"
                ></p>
<p>打开MagiskEnabler设置开机启动</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/oSjQGX5I92kq3cy.6z5h21j2vvk0.webp"
                      alt="oSjQGX5I92kq3cy"
                ></p>
<p>保存完后运行，我这个可能跟你们不一样，因为我已经运行过了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/Zu75xN3VAKfPcOm.o3kzia2ite8.webp"
                      alt="Zu75xN3VAKfPcOm"
                ></p>
<p>已经获取root了，重启后也不会掉，如果没有检查自动启动是否给了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/t1Az2jlQDZS7moB.2904k0tqpgsg.webp"
                      alt="t1Az2jlQDZS7moB"
                ></p>
<h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><p>如果提示这样错误，你没有开存储权限</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/v9FC2rUIVuHeipo.1yh1g0zr9000.webp"
                      alt="v9FC2rUIVuHeipo"
                ></p>
<p>如果开机没启动，等一会，如果还是没有请检查自启权限是否给了</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不要升级Magisk，只能修改system分区，模块若有问题请尝试热重启</p>
<p>本教程完全免费，root不是很完美不，介意</p>
<p>不强迫刷</p>
<h2 id="教程参考"><a href="#教程参考" class="headerlink" title="教程参考"></a>教程参考</h2><p><a class="link"   href="https://forum.xda-developers.com/t/amazing-temp-root-for-mediatek-armv8-2020-08-24.3922213/page-50#post-82081703" >https://forum.xda-developers.com/t/amazing-temp-root-for-mediatek-armv8-2020-08-24.3922213/page-50#post-82081703 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.coolapk.com/feed/24833705?shareKey=YTMwODU5OWQyNjQyNjE0M2U3YTk" >https://www.coolapk.com/feed/24833705?shareKey=YTMwODU5OWQyNjQyNjE0M2U3YTk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>~</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a class="link"   href="https://www.coolapk.com/u/%E6%97%A0%E6%95%8C%E6%88%98%E7%A5%9E%E9%A2%86%E4%B8%BB" >@无敌战神领主  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>开发工具包和app</p>
<p><a class="link"   href="https://www.coolapk.com/u/WWDC2021" >@WWDC2021 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>@lly</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Andorid</tag>
        <tag>Magisk</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的登录和支付流程</title>
    <url>/page/20230814085510/</url>
    <content><![CDATA[<h2 id="一、小程序登录流程"><a href="#一、小程序登录流程" class="headerlink" title="一、小程序登录流程"></a>一、小程序登录流程</h2><p>1、当用户进入微信小程序时，首先我们先判断用户是否授权过此小程序</p>
<p>2、如果没有授权，我们通过一个按钮来实现授权登录</p>
<p>3、通过bindgetuserinfo事件，我们可以获取到个人的信息、加密偏移数据、加密用户信息（e.detail获取）</p>
<p>4、用户可以授权登录，也可以取消授权</p>
<p>5、根据登录接口返回的code码，判断用户是否时新用户</p>
<p>6、当用户注册成功后，在调登录接口，保存token。在有些页面需要使用token</p>
<p>7、在步骤1中，当我们授权过时，我们要看token是否存在</p>
<p>8、当token存在时，我们直接执行逻辑代码</p>
<p>9、当token不存在时，我们就需要登录，登录后判断返回的code码，在根据code码判断用户是否是新用户。最后保存token</p>
<h2 id="二、小程序支付流程"><a href="#二、小程序支付流程" class="headerlink" title="二、小程序支付流程"></a>二、小程序支付流程</h2><p>1、注册微信支付商户号</p>
<p>2、注册小程序账号(由上级或者领导注册)，企业一般注册为企业小程序</p>
<p>3、登录之前注册好的商户账号，将当前小程序ID绑定至此商户，表明此小程序可以调用此商户支付相关接口</p>
<p>4.后端工程师书写接口</p>
<p>5、前端工程师调用接口</p>
<p>6、获取openid（当前用户真实id），需要先调用微信login接口登录，获取登录凭证code，在通过此code（登录凭证，5分钟有效），向微信服务器换取用户openid</p>
<p>7、调用公司后端接口，获取支付核心数据</p>
<p>8、调用微信官方支付接口，弹出支付界面</p>
<p>————————————————<br>原文链接：<a class="link"   href="https://blog.csdn.net/weixin_46058007/article/details/130405883" >https://blog.csdn.net/weixin_46058007/article/details/130405883 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>小程序</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>win10设置小鹤双拼</title>
    <url>/page/20230626203311/</url>
    <content><![CDATA[<h3 id="可以使用注册表双击执行或者按步骤操作"><a href="#可以使用注册表双击执行或者按步骤操作" class="headerlink" title="可以使用注册表双击执行或者按步骤操作"></a>可以使用注册表双击执行或者按步骤操作</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\InputMethod\Settings\CHS]</span><br><span class="line">&quot;Enable Cloud Candidate&quot;=dword:00000000</span><br><span class="line">&quot;Enable Dynamic Candidate Ranking&quot;=dword:00000001</span><br><span class="line">&quot;EnableExtraDomainType&quot;=dword:00000001</span><br><span class="line">&quot;Enable self-learning&quot;=dword:00000001</span><br><span class="line">&quot;EnableSmartSelfLearning&quot;=dword:00000001</span><br><span class="line">&quot;EnableLiveSticker&quot;=dword:00000000</span><br><span class="line">&quot;Enable EUDP&quot;=dword:00000001</span><br><span class="line">&quot;Enable Double Pinyin&quot;=dword:00000001</span><br><span class="line">&quot;UserDefinedDoublePinyinScheme0&quot;=&quot;小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt&quot;</span><br><span class="line">&quot;DoublePinyinScheme&quot;=dword:0000000a</span><br></pre></td></tr></table></figure></div>
<p>保存到记事本里改后缀<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/QQ%E6%88%AA%E5%9B%BE20230619174425.ehofv2p5n14.webp"
                      alt="QQ截图20230619174425"
                ></p>
<h3 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h3><p>按住 <code>windows</code> + <code>r</code> 输入 <code>regedit</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/Snipaste_2023-06-19_17-26-07.1ooxkzs7ekyo.webp"
                      alt="Snipaste_2023-06-19_17-26-07"
                ></p>
<p>在最上面地址输入 <code>计算机\HKEY_CURRENT_USER\Software\Microsoft\InputMethod\Settings\CHS</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/7BoPQ18JbANmlDO.5cpaq8tdoz40.webp"
                      alt="7BoPQ18JbANmlDO"
                ></p>
<h3 id="创建字符串值"><a href="#创建字符串值" class="headerlink" title="创建字符串值"></a>创建字符串值</h3><p>新建一个名为 <code>UserDefinedDoublePinyinScheme0</code>  的 <code>字符串值</code></p>
<p>数值数据为  <code>小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/Snipaste_2023-06-19_17-28-25.x44bx8wuv1c.webp"
                      alt="Snipaste_2023-06-19_17-28-25"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230619/Snipaste_2023-06-19_17-35-19.69qg4cw4y100.webp"
                      alt="Snipaste_2023-06-19_17-35-19"
                ></p>
]]></content>
      <categories>
        <category>Windows配置</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>手相分析</title>
    <url>/page/20240810230056/</url>
    <content><![CDATA[<h2 id="感情线"><a href="#感情线" class="headerlink" title="感情线"></a>感情线</h2><p>通常判断 一个人性格 找对象也可以参考这个</p>
<p>比较长的人 容易闪婚 一见钟情之类的</p>
<p>比较长的 就容易考虑很多一般不轻易告白 一旦喜欢就比较长情</p>
<p> 找男女朋友的话，可以找一个和感情线非常像的人 ，情感类型差不多的话，不太容易产生摩擦</p>
<h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>感情线短的人 容易大喜大悲 容易上头</p>
<p>感情线长的人 比较容易情绪稳定</p>
<p>长度判断 以食指为分界线</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230810/image-20240810230251835.5fkj279vgu.webp"
                      alt="image-20240810230251835"
                ></p>
<h3 id="弯度"><a href="#弯度" class="headerlink" title="弯度"></a>弯度</h3><p>快速上扬，代表这个人容易感情化 但 在感情上容易思虑多 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230810/image-20240810230410281.1vylce7bng.webp"
                      alt="image-20240810230410281"
                ></p>
<h3 id="向下弯折"><a href="#向下弯折" class="headerlink" title="向下弯折"></a>向下弯折</h3><p>比较冷血，或者cool 感情对自己没有这么重要</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230810/image-20240810230517338.2don0z8u1u.webp"
                      alt="image-20240810230517338"
                ></p>
<h3 id="末端分叉"><a href="#末端分叉" class="headerlink" title="末端分叉"></a>末端分叉</h3><p>必须是三叉的， 这种叫 <strong>幸运女神线</strong></p>
<p>这个人容易给周围人带来幸运</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230810/image-20240810230553334.32hwkzwieq.webp"
                      alt="image-20240810230553334"
                ></p>
<h2 id="命运线-幸运线-成功线-事业线"><a href="#命运线-幸运线-成功线-事业线" class="headerlink" title="命运线 &#x2F; 幸运线 &#x2F;  成功线  &#x2F; 事业线"></a>命运线 &#x2F; 幸运线 &#x2F;  成功线  &#x2F; 事业线</h2><p>这条线不是所有人有，有的也不是上下连着的，在中间断掉了</p>
<p>没有的可能是辅助性的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230810/image-20240810231059288.6m3uaszd89.webp"
                      alt="image-20240810231059288"
                ></p>
]]></content>
      <categories>
        <category>神秘学</category>
      </categories>
  </entry>
  <entry>
    <title>普通人理财攻略</title>
    <url>/page/20240614010638/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p>钱是变出来的还是攒出来的? </p>
<ol>
<li>如果是攒出来的, 你攒一辈子, 攒了一百万可以, 一千万可以嘛? 如果是攒钱, 那么有上限</li>
<li>如果是变出来的, 该怎么变呢?</li>
</ol>
</blockquote>
<h2 id="炒股"><a href="#炒股" class="headerlink" title="炒股"></a>炒股</h2><blockquote>
<p>来炒股的人都是为了赚钱, 毫不夸张的说, 都是为了一夜暴富. 但是股市就是这么神奇, 想一夜暴富的人, 总是股市里边亏钱的人,<br>只有那些不着急的人, 慢慢的人, 才能在股市里赚到钱.<br>倘若你是为了赚钱, 那么你一定要慢慢来, 如果是为了暴富, 股市明显不适合你. 在股市里, 慢就是快, 你只要慢下来, 才能快起来.<br>一天看不出来效果, 一周看不出来, 一个月才能看出来一点效果, 一年下来, 效果就特别明显了.   </p>
</blockquote>
<h2 id="投资的基本原则"><a href="#投资的基本原则" class="headerlink" title="投资的基本原则"></a>投资的基本原则</h2><h3 id="1-天上不会掉馅饼"><a href="#1-天上不会掉馅饼" class="headerlink" title="1.天上不会掉馅饼"></a>1.天上不会掉馅饼</h3><p>​			回报率收益率越高（&gt;7%)，风险越高</p>
<h3 id="2-坚持长线投资、价值投资"><a href="#2-坚持长线投资、价值投资" class="headerlink" title="2.坚持长线投资、价值投资"></a>2.坚持长线投资、价值投资</h3><p>​			拒绝短线操作，拒绝人工看k线瞎猜</p>
<h3 id="3-好的资产一定是昂贵的，好货不便宜"><a href="#3-好的资产一定是昂贵的，好货不便宜" class="headerlink" title="3.好的资产一定是昂贵的，好货不便宜"></a>3.好的资产一定是昂贵的，好货不便宜</h3><h3 id="4-牢记雌蝉和商业的第一性原理："><a href="#4-牢记雌蝉和商业的第一性原理：" class="headerlink" title="4.牢记雌蝉和商业的第一性原理："></a>4.牢记雌蝉和商业的第一性原理：</h3><p>​			创造价值的省生意，就是好的生意</p>
<p>​			持有优质公司的股票（因为股票有财报都是透明的）</p>
<h3 id="4-你的主业是学习和工作，不是华尔街交易员"><a href="#4-你的主业是学习和工作，不是华尔街交易员" class="headerlink" title="4.你的主业是学习和工作，不是华尔街交易员"></a>4.你的主业是学习和工作，不是华尔街交易员</h3><p>​			不要在投资商过分浪费精力</p>
<p>​			将投资交给专业的机构</p>
<h2 id="美股指数基金"><a href="#美股指数基金" class="headerlink" title="美股指数基金"></a>美股指数基金</h2><p>可以拿出总资产的 <em><strong>30%-50%</strong></em> 的钱</p>
<p>投在 <em><strong>标普500(S%P 500，SPY)</strong></em></p>
<p>以及 <em><strong>纳斯达克100(Nasdaq-100,QQQ)</strong></em></p>
<p>长期每月定投</p>
<p>持有10-50年以上，会得到非常可观的收入</p>
<p>不要看美国今年怎么怎么样了</p>
<p>基金这个东西不是短线操作，是长期持有</p>
<p>投机可以去 炒美股，区块链</p>
<h2 id="优质美股"><a href="#优质美股" class="headerlink" title="优质美股"></a>优质美股</h2><ol>
<li>Microsoft</li>
<li>Nvidia</li>
<li>Apple</li>
<li>Google</li>
<li>Amazon</li>
<li>Meta</li>
</ol>
<blockquote>
<p>前提：</p>
<ol>
<li>相信美国国运</li>
<li>相信科技互联网科的力量</li>
<li>相信北美大厂的稳定商业模式</li>
<li>相信硅谷科技和商业区动力</li>
</ol>
</blockquote>
<h2 id="高分红港股"><a href="#高分红港股" class="headerlink" title="高分红港股"></a>高分红港股</h2><ul>
<li>股价常年稳定</li>
<li>分红常年稳定 （5%-7%左右）</li>
<li>中国工商银行、中国银行等</li>
</ul>
<h2 id="其他的股份、股票指数-——-不懂不要碰"><a href="#其他的股份、股票指数-——-不懂不要碰" class="headerlink" title="其他的股份、股票指数 —— 不懂不要碰"></a>其他的股份、股票指数 —— 不懂不要碰</h2><p>高增长经济体： 印度、越南、台湾 —— 不懂不要碰</p>
<p>巴菲特买入：日本 —— 不懂不要碰</p>
<p>半导体、石油等指数 —— 不懂不要碰</p>
<p>港股 —— 政治因素太复杂，不懂不要碰</p>
<p>常年3000点A股 —— 暗箱和黑幕太多，不懂不要碰 （适合投机，风险比较大）</p>
<h2 id="美国国债-（5-）"><a href="#美国国债-（5-）" class="headerlink" title="美国国债 （5%）"></a>美国国债 （5%）</h2><p>相信美国国运</p>
<p>相信美国科技和商业创新能力</p>
<p>相信美元全球基础地位</p>
<p>无脑买入</p>
<h2 id="中国国债、地方债-（零风险）"><a href="#中国国债、地方债-（零风险）" class="headerlink" title="中国国债、地方债 （零风险）"></a>中国国债、地方债 （零风险）</h2><p>中央超长期国债（2.57%）	</p>
<p>沿海地方债、专项债（2.5%~4%）</p>
<p>特点：</p>
<ol>
<li>中国政府不会债务延期、重组</li>
<li>无理由刚性兑付 （绝不会不兑付，如果违约对中国是一个巨大的金融问题）</li>
<li>靠财政、税收长期和政府信誉的保证</li>
</ol>
<p>（宁可停掉教师、公交车司机公司也要保证兑付）</p>
<h2 id="中国商品房"><a href="#中国商品房" class="headerlink" title="中国商品房"></a>中国商品房</h2><p>卖房，卖房，卖房 （巨大的泡沫资产）</p>
<blockquote>
<p>目前是正在破碎的阶段 2024 开始下降，预计2030年左右才开始上涨，在此之前都会下跌</p>
<p>香港 日本 等 都经历过 这是一个基本经济学原理</p>
</blockquote>
<p>租售比低（绝大多数低于3%，甚至低于1%）</p>
<p>房价&#x2F;年收入过高（中国绝大多城市&gt;20倍，韩国也就15-20) </p>
<p>能和中国上海深圳相提并论的也就香港、新加坡、大马士革、叙利亚</p>
<p>原理： 土地财政是基层政府吸血工具</p>
<p>地方财政对土地依赖高于70%</p>
<p>3万&#x2F;平米的房子：</p>
<p>建房成本：&lt;3000&#x2F;平米</p>
<p>营销成本：&lt;1000-3000&#x2F;平米</p>
<p>楼面价（土地出让金）+税费：20000+ &#x2F;平米 （这些是要交给政府的）</p>
<p>中国土地是用不完的</p>
<p><em><strong>贷款买房子要想清楚，不存在刚需，你可以租，养活你的房子，养不活就是你的债务</strong></em></p>
<p>假如在北京一套房子1000w的房子 每年租金差不多5-10w左右 房东在吃亏 有1000w投资房产</p>
<h2 id="其他国家上商品房（增值、出租）"><a href="#其他国家上商品房（增值、出租）" class="headerlink" title="其他国家上商品房（增值、出租）"></a>其他国家上商品房（增值、出租）</h2><p>美国商品房：管理维修成本搞，增值速度慢</p>
<p>泰国、印尼、马来西亚商品房：割韭菜</p>
<p>新加坡商品房：价格虚高、谁高</p>
<p>香港商品房：价格虚高</p>
<p>日本商品房（东京）：增值速度慢，规则复杂</p>
<p>英法德等欧洲房产：价格虚高</p>
<p>房子就是买回来住的，不然巴菲特就投资房产了</p>
<p>房子需要管理成本，不如股票基金买完等着就行了</p>
<p>总结：<em><strong>全世界的商品房，都不是好的投资资产</strong></em></p>
<h2 id="投资你懂的领域和行业：餐饮、消费、实体经济"><a href="#投资你懂的领域和行业：餐饮、消费、实体经济" class="headerlink" title="投资你懂的领域和行业：餐饮、消费、实体经济"></a>投资你懂的领域和行业：餐饮、消费、实体经济</h2><ul>
<li>景点周边旅馆</li>
<li>老社区周围的餐饮</li>
<li>办公楼旁边自助餐、咖啡、便利店</li>
<li>学校周围德炸串</li>
<li>市中心商业街的小吃</li>
</ul>
<p>只投资 “人尽皆知德大品牌“ ，能长期运营&gt;10年</p>
<p>美国：麦当劳、subway、必胜客</p>
<p>中国：蜜雪冰城、瑞星咖啡、本土餐饮（老乡鸡）</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><ol>
<li>计算客流和周边商业生态 （消费群体是那些，什么样的客流做什么样的生意）</li>
<li>计算盈亏平衡点（房租、水电、人工、毛利率、固定成本、客单价）</li>
<li>计算投资总成本、回本周期</li>
<li>考虑其他因素</li>
</ol>
<p>可以看 <code>勇哥餐饮创业说</code> 和 <code>大刘聊实体</code></p>
<h2 id="特殊投资品"><a href="#特殊投资品" class="headerlink" title="特殊投资品"></a>特殊投资品</h2><p>炒期货、炒外汇：不懂别碰，绝大多数人不懂</p>
<p>黄金： 供需市场复杂，情绪化投机多，难以量化，交易成本高&gt;80%成熟投资机构从来不碰黄金（除了国家） （没必要非得投黄金，有比黄金更好的投资产品，如果没有强烈的执念不要碰）</p>
<p>区块链：</p>
<ul>
<li>Bitcoin：比黄金市场还复杂，分析成本高，杂音多，不懂别碰</li>
<li>Ethereum：与Bitcoin关联大，不懂别碰</li>
<li>技术型项目（Solana、Aptos、Sui、Chainlink）：咋用多，不懂技术，不看源代码别碰</li>
<li>Meme coin&#x2F;NFT （土狗）：韭菜盘，不懂别碰</li>
<li>DeFi协议、质押收益：项目方复杂，流动性无法预测，不懂别碰</li>
</ul>
<p>结论：<em><strong>Crypto资产很复杂，不懂技术别碰</strong></em></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>​		在华尔街工作他每天的工作就是干这个活，就每天干投机的事情，对于这些人来说投机短线操作是正确的，除此之外对于咱们普通人，每天要工作要上班的人来说，要做<strong>价值投资</strong>者，要做时间的朋友，要长期持有，要懂自己懂的资产，要用第一性原理去思考世界的商业本质好的生意，投能够让你持续持有10年的好资产。</p>
</blockquote>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/page/20230626193331/</url>
    <content><![CDATA[<h2 id="正则表达式用于定义一些字符串的规则"><a href="#正则表达式用于定义一些字符串的规则" class="headerlink" title="正则表达式用于定义一些字符串的规则"></a>正则表达式用于定义一些字符串的规则</h2><p>用法: 计算机可以根据正则表达式，来检查一个字符串是否符合规则，或者将字符串中符合规则的内容提取出来</p>
<p>它是一个对象</p>
<p>语法：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匹配模式是可选的，可以是</span></span><br><span class="line"><span class="comment">//  i  忽略大小写</span></span><br><span class="line"><span class="comment">//  g  全局匹配模式</span></span><br><span class="line"> <span class="comment">//构造函数创建，更灵活</span></span><br><span class="line"><span class="keyword">var</span> 变量 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>, <span class="string">&quot;匹配模式&quot;</span>);</span><br><span class="line"><span class="comment">//简写：（字面量的方式更简单）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>匹配模式;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这个正则表达式可以检查字符串中是否有a，并且不管位置，只要含有就行，严格区分大小写</span><br><span class="line">var reg = new RegExp(&quot;a&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="正则表达式的方法："><a href="#正则表达式的方法：" class="headerlink" title="正则表达式的方法："></a>正则表达式的方法：</h3><ul>
<li>test()<br>举例：<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个字符串里面是否含有a，而且必须是小写的</span></span><br><span class="line">reg = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;bhasd&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个字符串里面是否含有a或b，而且必须是小写的</span></span><br><span class="line">reg = <span class="regexp">/a|b/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;bhasd&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个字符串里面是否含有字母,而且必须是小写的</span></span><br><span class="line">reg = <span class="regexp">/[a-z]/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;bhasd&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个字符串里面是否含有任意字母,大写小写都可以</span></span><br><span class="line">reg = <span class="regexp">/[A-z]/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;bhasd&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个字符串里面是不是abc或adc或aec,而且必须是小写的</span></span><br><span class="line">reg = <span class="regexp">/a[bde]c/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ade&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个字符串除了ab以外有没有别的东西</span></span><br><span class="line">reg = <span class="regexp">/[^ab]/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ade&#x27;</span>));</span><br></pre></td></tr></table></figure></div>
<ul>
<li>使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，返回boolean</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>用多列布局实现瀑布流效果</title>
    <url>/page/20230525151930/</url>
    <content><![CDATA[<h4 id="多列布局一些其他设置"><a href="#多列布局一些其他设置" class="headerlink" title="多列布局一些其他设置"></a>多列布局一些其他设置</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">column-count</span> // 列数</span><br><span class="line"><span class="attribute">column-gap</span> // 列间距</span><br><span class="line"><span class="attribute">break-inside</span> // 列或区块发生中断时候的表现</span><br><span class="line"><span class="comment">/**更多属性查看其他文档*/</span></span><br><span class="line"><span class="attribute">column-rule-style</span> // 样式 solid</span><br><span class="line"><span class="attribute">column-rule-width</span> // 宽度</span><br><span class="line"><span class="attribute">column-rule-color</span> // 颜色</span><br><span class="line"><span class="attribute">column-rule</span> // 列边框</span><br><span class="line"><span class="attribute">column-span</span></span><br><span class="line"><span class="attribute">column-width</span></span><br></pre></td></tr></table></figure></div>


<h4 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s1.ax1x.com/2023/05/25/p9H2m4A.png"
                      alt="p9H2m4A.png"
                ></p>
<h4 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h4><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="comment">/* 设置 5 列显示 */</span></span><br><span class="line"><span class="attribute">column-count</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid green;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置不折行显示 */</span></span><br><span class="line"><span class="attribute">break-inside</span>: avoid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="html-结构"><a href="#html-结构" class="headerlink" title="html 结构"></a>html 结构</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/6.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/7.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/8.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/9.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/10.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/11.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/12.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/13.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>比特币相关文章</title>
    <url>/page/20240808141350/</url>
    <content><![CDATA[<p><a href="/download/%E6%AF%94%E7%89%B9%E5%B8%81%E7%99%BD%E7%9A%AE%E4%B9%A6.pdf">比特币白皮书</a></p>
<p><a href="/download/%E5%9B%A4BTC.pdf">比特币-九神-囤币</a></p>
<p><a class="link"   href="https://coxxa.github.io/bitcoin-ahr999-HOD" >原文链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
<p><a href="/download/%E5%90%8EBTC%E6%97%B6%E4%BB%A3.pdf">后BTC时代</a></p>
<p><a href="/download/%E6%96%B0%E4%BA%BA%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.pdf">新人加密货币常见问题汇总</a></p>
]]></content>
      <categories>
        <category>比特币</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>百元买鸡</title>
    <url>/page/20241002142002/</url>
    <content><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><ol>
<li>我国古代数学家张丘建在《算经》一书中提出了一个数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？请设计程序解答上述问题。</li>
</ol>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>每个类型都定义一个变量，找出变量范围，通过变量之间的联系计算求解</p>
<p>变量范围</p>
<ul>
<li>i:[0,100]</li>
<li>j:[0,100]</li>
<li>k:[0,100]</li>
</ul>
<p>必须同时满足：</p>
<ul>
<li>百钱：<code>5*i+3*j+k/3 == 100</code></li>
<li>百只：<code>i+j+k == 100</code></li>
<li>防止鸡雏出现小数问题<code> k%3==0</code></li>
</ul>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> i,j,k;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">               <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">100</span>;k++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(k%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; i+j+k ==<span class="number">100</span> &amp;&amp; (<span class="number">5</span>*i + <span class="number">3</span>*j + k/<span class="number">3</span> == <span class="number">100</span>))&#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;i=&quot;</span>+i+<span class="string">&quot;,j=&quot;</span>+j+<span class="string">&quot;,k=&quot;</span>+k);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<hr>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>缩短一下循环的范围</p>
<p>变量范围</p>
<ul>
<li>i:[0,20] 一只5元 最多可以买 20*5 &#x3D; 100</li>
<li>j:[0,33]  一只3元 最多可以买 3*33 &#x3D; 99</li>
<li>k:[0,100] 一只 1&#x2F;3元 最多可以买 300 ,但题目限制100只 , 所以最多100</li>
</ul>
<p>既然到这里了，我们还可以再优化一下缩短到2层循环</p>
<p>我们总共需要买100只鸡，只需要知道两个就能得出另一个卖多少只</p>
<p>那么 <code>k = 100 - i - j</code></p>
<p>那么还可以把条件满足改成</p>
<ul>
<li>百钱: <code>5*i+3*j+k/3 == 100</code></li>
<li>隐藏条件: k%3&#x3D;&#x3D;0</li>
</ul>
<p>不需要百只鸡了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> i,j,k;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">20</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">33</span>;j++)&#123;</span><br><span class="line">               k = <span class="number">100</span> - i - j;</span><br><span class="line">               <span class="keyword">if</span>(<span class="number">5</span>*i+<span class="number">3</span>*j+k/<span class="number">3</span>==<span class="number">100</span> &amp;&amp; k%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;公鸡&quot;</span>+i+<span class="string">&quot;只, 母鸡&quot;</span>+j+<span class="string">&quot;只, 小鸡&quot;</span>+k+<span class="string">&quot;只&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Windows 10 端口随机保留（占用）的问题</title>
    <url>/page/20230626105853/</url>
    <content><![CDATA[<p>原文章地址:<a class="link"   href="https://zhuanlan.zhihu.com/p/474392069" >链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>大概从半年前开始，我发现我的代理软件配置的端口有时会不能用，软件提示「没有权限访问端口」。这个问题会在什么时候出现完全随机，没有任何规律。对于这个问题，有时候重启可以解决，有时候重启好几次才能解决，并且如果运气不好，可能重启几次后这些端口还是不能用……</p>
<p>这让我非常困惑，我给代理软件开了管理员权限，但没有效果。我使用<code>netstat -ano</code>想看看这些端口被什么程序占用，却一无所获。当时，我误以为是代理软件出了一些神秘问题，在 google 无果后，因为大多数时候重启都能解决，我就没有再管。</p>
<p>直到前两天，我在做 Web 开发时，发现在<code>Windows 10</code>中使用<code>localhost:8088</code>死活访问不了 WSL 2 的<code>8088</code>端口。一开始我以为是<code>WSL 2</code>默认的端口转发出错了，便用<code>netsh interface portproxy</code>重新指定了端口转发，但还是访问不了。我又猜想可能是<code>WSL 2</code>中<code>Ubuntu</code>的防火墙规则有问题，但排查后发现不是。我又怀疑是<code>Windows 10</code>的防火墙设置有问题，但仔细核对后发现确实没有问题。正当我百思不得其解时，我随手把端口号换成了<code>3000</code>，发现居然能用了。并且在我再一次重启电脑之后，发现之前不能用的<code>8088</code>也又能用了。</p>
<p>这个灵异问题让我顿时联想到了半年前出现的那个代理软件端口不能用的问题，我试着又重启了几次，发现刚刚能用的<code>8088</code>端口又不能用了。面对这种奇葩情况，我只能推断可能是<code>Windows 10</code>因为某些原因，会随机保留这些端口号，不让用户使用。</p>
<p>但老重启也不是个事儿，这次我找对了搜索关键字，一番 google 后终于搞明白了问题的成因，并解决了这个困扰我半年之久的问题。</p>
<h1 id="1-问题背景"><a href="#1-问题背景" class="headerlink" title="1. 问题背景"></a>1. 问题背景</h1><p>这个问题的背景分为两部分：</p>
<ol>
<li>Windows 中有一个「TCP 动态端口范围」，处在这个范围内的端口，有时候会被一些服务占用。在 Windows Vista（或 Windows Server 2008）之前，动态端口范围是 1025 到 5000；在 Windows Vista（或 Windows Server 2008）之后，新的默认起始端口为 49152，新的默认结束端口为 65535。</li>
<li>如果安装了 Hyper-V，那么 Hyper-V 会为容器宿主网络服务（Windows Container Host Networking Service）随机保留一些端口号使用。</li>
</ol>
<p>正常情况下，Hyper-V 虽然会在「TCP 动态端口范围」中随机挑一些端口号保留（占用），不过保留的端口号普遍比较大，就算保留几百、几千个也影响不大。但是，Windows 自动更新有时会出错，导致这个范围的起始端口被重置为 1024……这可就麻烦了，一些常用端口动不动就因为被保留而无法使用了。</p>
<p>使用命令<code>netsh int ipv4 show dynamicport tcp</code>可以查看目前「TCP 动态端口」的范围，如图 1 所示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-be52a63d36544d8cb24582bb4e30d5e3_720w.webp"
                      alt="img"
                ></p>
<p>图 1 查看目前「TCP 动态端口」的范围</p>
<p>这只是一个「待选择」范围，并不代表其中的所有端口都会被保留，只是有一部分会被<code>Hyper-V</code>征用。使用<code>netsh int ipv4 show excludedportrange protocol=tcp</code>命令可以查看当前所有已经被征用了的端口，如图 2 所示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-f912347eeb3d218697d59a87bed8e356_720w.webp"
                      alt="img"
                ></p>
<p>图 2 当前所有已经被征用了的端口</p>
<p>如果这些被征用的端口范围随机挑选到<code>8088</code>、<code>8000</code>、<code>3000</code>等 Web 开发常用端口，那开发就会受到影响；如果挑选到其他应用软件要调用的端口，那这些应用软件就会受到影响，可以说非常坑爹了……</p>
<p>在说正确的解决方法前，我们先说一个在 Stack Overflow 上看到的错误解决方法，这个方法还在好几个地方被提到过。</p>
<h1 id="2-错误的解决方法"><a href="#2-错误的解决方法" class="headerlink" title="2. 错误的解决方法"></a>2. 错误的解决方法</h1><p>错误的解决方法是，运行<code>net stop winnat</code>停止 winnat 服务，然后再运行<code>net start winnat</code>启动 winnat 服务。</p>
<p>这个方法本质上就是重启电脑的简化版……让<code>Hyper-V</code>再随机初始化一些端口保留，如果正好没随机到要用的端口，那一次成功。如果还是随机到了要用的端口，那就只能多来几次。</p>
<p>在那个问题的回答下，我看到有一些网友说「对我有用」，也有一些网友说「对我没用」，原因就是这个方法解决问题的概率完全是随机的……</p>
<h1 id="3-正确的解决方法"><a href="#3-正确的解决方法" class="headerlink" title="3. 正确的解决方法"></a>3. 正确的解决方法</h1><p>正确的解决方法很简单，就是重新设置一下「TCP 动态端口范围」，让<code>Hyper-V</code>只在我们设定的范围内保留端口即可。可以以管理员权限运行下面的命令，将「TCP 动态端口范围」重新设定为<code>49152-65535</code>。如果你觉得这个范围太大，还可以改小一点。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-006623272f7415e1c9c9d30e9f1800d4_720w.webp"
                      alt="img"
                ></p>
<p>然后重启电脑即可。</p>
<p>重启电脑后，再运行命令<code>netsh int ipv4 show dynamicport tcp</code>查看动态端口范围，发现确实已经修改为了<code>49152-65535</code>。现在只有这个范围内的端口可能会被保留了，基本不会影响日常使用（图 3）。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-4ab36ede1d1b569754d850b972dbfafe_720w.webp"
                      alt="img"
                ></p>
<p>图 3 重启后再查看动态端口范围</p>
]]></content>
      <categories>
        <category>Windows配置</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>郑州工业应用技术学院迎新系统抢床位脚本</title>
    <url>/page/20240824223321/</url>
    <content><![CDATA[<p>下载地址 ： <a class="link"   href="https://github.com/sudo0m/zzuit" >https://github.com/sudo0m/zzuit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="郑州工业应用技术学院迎新系统抢床位脚本"><a href="#郑州工业应用技术学院迎新系统抢床位脚本" class="headerlink" title="郑州工业应用技术学院迎新系统抢床位脚本"></a>郑州工业应用技术学院迎新系统抢床位脚本</h2><p>下载main.py<br>安装python 和 requests 模块</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></div>

<p>运行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure></div>

<p>这几个必须填写</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240824/image.45hljpora0.webp"
                      alt="image"
                ></p>
<p>进入这个网站登录账号</p>
<p><a class="link"   href="https://welcomepc.zzuit.edu.cn/#/" >https://welcomepc.zzuit.edu.cn/#/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>进入到 <em>自选宿舍</em></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240824/image.4xuh1g52a6.webp"
                      alt="image"
                ></p>
<p>打开控制台 刷新 然后 找到这一栏</p>
<h3 id="获取-Authorization"><a href="#获取-Authorization" class="headerlink" title="获取 Authorization"></a>获取 Authorization</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240824/image.60u6cbyg9c.webp"
                      alt="image"
                ></p>
<h3 id="获取-cookie"><a href="#获取-cookie" class="headerlink" title="获取 cookie"></a>获取 cookie</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240824/image.3d4q1z5sod.webp"
                      alt="image"
                ></p>
<h3 id="获取-BedId"><a href="#获取-BedId" class="headerlink" title="获取 BedId"></a>获取 BedId</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240824/image.wihzae8y5.webp"
                      alt="image"
                ></p>
<h2 id="StudentId-就是你的学号"><a href="#StudentId-就是你的学号" class="headerlink" title="StudentId 就是你的学号"></a>StudentId 就是你的学号</h2><p>把这些数据填写到脚本上即可</p>
]]></content>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>部署家庭服务器</title>
    <url>/page/20240703193128/</url>
    <content><![CDATA[<p>前几天装了个新电脑，然后家里的旧电脑就废弃了，我打算废物利用来做家庭服务器用</p>
<ul>
<li><strong>文件共享：</strong> 配置了SMB共享文件服务，设备间文件互传不再麻烦。</li>
<li><strong>网络打印：</strong> 设置网络打印机，无线打印。</li>
<li><strong>网心云：</strong>  利用闲置宽带赚钱。</li>
<li><strong>IP：</strong> 192.168.1.100</li>
<li><strong>端口:</strong> <ul>
<li>631 CUPS</li>
<li>18888 网心云</li>
</ul>
</li>
</ul>
<p>后续可能会添加一些自动化 RSS 或者 aria2 等等</p>
<p>系统我选择用的 Arch </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-06-21_13-54-42.2krsi5ahda.webp"
                      alt="Snipaste_2024-06-21_13-54-42"
                ></p>
<p>我这里用的另一块硬盘挂在到&#x2F;srv&#x2F;share 用来存放共享文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-06-21_16-09-50.60u4a7mxin.webp"
                      alt="Snipaste_2024-06-21_16-09-50"
                ></p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="配置远程"><a href="#配置远程" class="headerlink" title="配置远程"></a>配置远程</h3><p>在装完系统后安装 SSH </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S ssh</span><br></pre></td></tr></table></figure></div>

<p>设置开机自启动 ssh服务</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> sshd  </span><br></pre></td></tr></table></figure></div>

<p>然后就可以通过 ssh来远程来连接了</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh 用户名@ip地址</span><br><span class="line"></span><br><span class="line">ssh sudo0m@192.168.1.100</span><br></pre></td></tr></table></figure></div>



<h3 id="配置固定ip地址"><a href="#配置固定ip地址" class="headerlink" title="配置固定ip地址"></a>配置固定ip地址</h3><h5 id="创建网络配置文件"><a href="#创建网络配置文件" class="headerlink" title="创建网络配置文件"></a>创建网络配置文件</h5><p>在 <code>/etc/systemd/network/</code> 目录下创建一个新的 <code>.network</code> 文件，例如 <code>20-wired.network</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/network/*.network</span><br><span class="line">只要在network下面创建.network后缀的就可以</span><br></pre></td></tr></table></figure></div>

<h5 id="添加网络配置"><a href="#添加网络配置" class="headerlink" title="添加网络配置"></a>添加网络配置</h5><p>在文件中添加以下内容，替换实际的网卡名称和 IP 地址：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[Match]</span><br><span class="line">Name=eth0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Address=192.168.1.100/24</span><br><span class="line">Gateway=192.168.1.1</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure></div>

<p><code>Name</code>：替换为实际的网络接口名称，例如 <code>eth0</code>。</p>
<p><code>Address</code>：替换为所需的固定 IP 地址和子网掩码。</p>
<p><code>Gateway</code>：设置默认网关。</p>
<p><code>DNS</code>：指定 DNS 服务器。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/sudo0m/picx-images-hosting@master/20240703/Snipaste_2024-07-04_17-47-49.92q0d1dyxl.webp"
                      alt="Snipaste_2024-07-04_17-47-49"  
                >

<h5 id="重启-systemd-networkd"><a href="#重启-systemd-networkd" class="headerlink" title="重启 systemd-networkd"></a>重启 <code>systemd-networkd</code></h5><p>保存文件后，重启 <code>systemd-networkd</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart systemd-networkd</span><br></pre></td></tr></table></figure></div>

<h2 id="配置-smb-共享文件"><a href="#配置-smb-共享文件" class="headerlink" title="配置 smb 共享文件"></a>配置 smb 共享文件</h2><p>安装 samba 和 avahi</p>
<blockquote>
<p><a class="link"   href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85" >安装 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://archlinux.org/packages/?name=avahi" >avahi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>包 软件包， 然后<a class="link"   href="https://wiki.archlinuxcn.org/wiki/%E5%90%AF%E7%94%A8/%E5%90%AF%E5%8A%A8" >启用&#x2F;启动 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <code>avahi-daemon.service</code> 以通过 <a class="link"   href="https://wiki.archlinuxcn.org/wzh/index.php?title=Zeroconf&action=edit&redlink=1" >Zeroconf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 使 Samba 服务器可被发现。这应当在多数非 Windows 文件管理器上可用</p>
<p><a class="link"   href="https://wiki.archlinuxcn.org/wiki/Samba" >引用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>如果 <code>avahi-daemon.service</code> 尚未运行，服务器仍可被访问，仅不可被发现。也就是说，它不会出现在文件管理器中，但你仍可直接通过 IP 或者域名连接它。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S samba avahi</span><br></pre></td></tr></table></figure></div>

<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>Samba 需要 Linux 账户才能使用 - 可以使用已有账户或<a class="link"   href="https://wiki.archlinuxcn.org/wiki/%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84#%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86" >创建新用户 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -a 用户 <span class="comment"># 使用当前登录的用户</span></span><br></pre></td></tr></table></figure></div>

<h4 id="创建匿名共享"><a href="#创建匿名共享" class="headerlink" title="创建匿名共享"></a>创建匿名共享</h4><p>创建新 Linux 用户，匿名 Samba 用户将映射到该用户。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> useradd guest -s /bin/nologin</span><br></pre></td></tr></table></figure></div>

<p>修改<code>/etc/samba/smb.conf</code> 文件</p>
<p>配置文件可以参考</p>
<p><a class="link"   href="https://man.archlinux.org/man/smbd.8" >https://man.archlinux.org/man/smbd.8 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">   workgroup = WORKGROUP</span><br><span class="line">   server string = Arch Server</span><br><span class="line">   security = user</span><br><span class="line">   map to guest = bad user</span><br><span class="line">   guest account = smb</span><br><span class="line">   vfs objects = catia fruit streams_xattr</span><br><span class="line">   </span><br><span class="line">[Network Storage]</span><br><span class="line">   comment = Network Storage</span><br><span class="line">   path = /srv/share</span><br><span class="line">   force user = 用户</span><br><span class="line">   force group = 用户</span><br><span class="line">   guest ok = yes</span><br><span class="line">   writable = yes</span><br><span class="line">   create mask = 0777</span><br><span class="line">   directory mask = 0777</span><br></pre></td></tr></table></figure></div>

<h5 id="全局设置部分"><a href="#全局设置部分" class="headerlink" title="全局设置部分"></a>全局设置部分</h5><ul>
<li><strong><code>server string = Arch Server</code></strong>: 设置服务器的描述字符串。这个描述会在网络中显示，例如“Arch Server”。</li>
<li><strong><code>security = user</code></strong>: 定义了Samba的安全级别。<code>user</code>表示每个用户需要单独认证，这是比较常见的设置。</li>
<li><strong><code>map to guest = bad user</code></strong>: 任何身份验证失败的用户将被映射为访客用户。</li>
<li><strong><code>guest account = smb</code></strong>: 指定了用于访客访问的系统账户。在这里是“smb”用户。</li>
<li><strong><code>vfs objects = catia fruit streams_xattr</code></strong>: 支持iPhone 不添加会出现 名称过长的错误</li>
</ul>
<h5 id="共享资源设置部分"><a href="#共享资源设置部分" class="headerlink" title="共享资源设置部分"></a>共享资源设置部分</h5><ul>
<li><p><strong><code>comment = Network Storage</code></strong>: 这是对共享资源的描述，在网络浏览时显示。</p>
</li>
<li><p><strong><code>path = /srv/share</code></strong>: 指定了共享文件夹的路径，这里是<code>/srv/share</code>。</p>
</li>
<li><p><strong><code>guest ok = yes</code></strong>: 允许访客访问这个共享资源，不需要用户验证。</p>
</li>
<li><p><strong><code>writable = yes</code></strong>: 允许写入权限，即用户可以在这个文件夹中创建、修改和删除文件。</p>
</li>
<li><p><strong><code>create mask = 0777</code></strong>: 设置新创建的文件的权限为<code>rwxrwxrwx</code>（即所有用户具有完全访问权限）。这确保了新创建的文件对于所有用户都可以读写和执行。</p>
</li>
<li><p><strong><code>directory mask = 0777</code></strong>: 设置新创建的目录的权限为<code>rwxrwxrwx</code>，确保所有用户可以完全访问新创建的目录。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-07-04_17-50-24.7ljvbacubo.webp"
                      alt="Snipaste_2024-07-04_17-50-24"
                ></p>
</li>
</ul>
<p>配置完后重启samb avhi服务</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smb</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart avahi-daemon</span><br></pre></td></tr></table></figure></div>



<p>配置开机自启</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> smb</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> avahi-daemon</span><br></pre></td></tr></table></figure></div>



<p>然后就可以通过Smb访问服务器了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-07-03_15-13-28.6t6zrz1un9.webp"
                      alt="Snipaste_2024-07-03_15-13-28"
                ></p>
<p>也可以添加网络位置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-07-03_15-13-57.7zqb0kqr8m.webp"
                      alt="Snipaste_2024-07-03_15-13-57"
                ></p>
<h2 id="配置打印机"><a href="#配置打印机" class="headerlink" title="配置打印机"></a>配置打印机</h2><p>我这里的打印机是惠普的 所以我用 hplip + cups</p>
<p>Avahi  能够在网络中搜索到</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S hplip cups  Avahi </span><br></pre></td></tr></table></figure></div>

<p>安装完后运行,然后根据步骤一步一步确认</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hp-setup -i</span><br></pre></td></tr></table></figure></div>

<p>-i 命令行模式运行，我用装arch没有装图形界面</p>
<p>配置cpus</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/cups/cupsd.conf</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-07-03_19-15-50.3yebmf3tb1.webp"
                      alt="Snipaste_2024-07-03_19-15-50"
                ></p>
<p>启动cups 设置开启启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start cups.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> cups.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用 Avahi </span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start avahi-daemon.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> avahi-daemon.service</span><br></pre></td></tr></table></figure></div>

<p>启动完后可以通过 631端口进入cups控制打印机</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-07-03_19-17-57.969m9eyul9.webp"
                      alt="Snipaste_2024-07-03_19-17-57"
                ></p>
<p>可以在电脑中搜索到打印机服务了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/Snipaste_2024-06-21_17-45-45.1ovb2o3m0g.webp"
                      alt="Snipaste_2024-06-21_17-45-45"
                ></p>
<p>手机也可以搜到</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/sudo0m/picx-images-hosting@master/20240703/IMG_2376.2rv0djzfvw.webp"
                      alt="IMG_2376" style="zoom: 33%;" 
                >

<p>打印测试</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/sudo0m/picx-images-hosting@master/20240703/IMG_2375.45hjhlahwq.webp"
                      alt="IMG_2375" style="zoom: 25%;" 
                >

<h2 id="配置网心云"><a href="#配置网心云" class="headerlink" title="配置网心云"></a>配置网心云</h2><p>安装docker</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S docker</span><br></pre></td></tr></table></figure></div>

<p>配置开机启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></div>

<p>运行容器：</p>
<blockquote>
<p>请将dockerhub镜像仓库地址替换为 <strong>images-cluster.xycloud.com</strong></p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull images-cluster.xycloud.com/wxedge/wxedge:latest</span><br><span class="line"></span><br><span class="line">docker run -d --name=wxedge --restart=always --privileged --net=host --tmpfs /run --tmpfs /tmp -v 磁盘路径:/storage:rw  images-cluster.xycloud.com/wxedge/wxedge:latest</span><br></pre></td></tr></table></figure></div>

<p>“<strong>磁盘路径”是磁盘的目录，请根据自己实际磁盘目录更改，必须挂载到容器内的&#x2F;storage目录，推荐磁盘是ext4文件系统，至少需要50G以上的空间，建议是固态硬盘</strong>。</p>
<p><em>-e LISTEN_ADDR&#x3D;”0.0.0.0:28888” 支持设置绑定页面的监听地址和端口，监听全地址设置-e LISTEN_ADDR&#x3D;”:28888”，默认监听全地址18888端口。多开容器也可以参考用该参数，比如容器A使用参数-e LISTEN_ADDR&#x3D;”:18888”，容器B使用参数 -e LISTEN_ADDR&#x3D;”:28888”（已经实现同一业务可多次添加，不建议多开容器）</em></p>
<p><em>-v 磁盘路径:&#x2F;var&#x2F;lib&#x2F;containerd 如果系统盘较小时，可以增加该参数修改安装路径，</em></p>
<p>启动完后可以通过 18888端口访问</p>
<p>到手机上填写sn 和 激活码绑定设备就可以看到受益了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20240703/image-20240703192446248.67xc5wzkmv.webp"
                      alt="image-20240703192446248"
                ></p>
<p>跑了几天，收益还行</p>
<img   
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/sudo0m/picx-images-hosting@master/20240703/58fa7c1db885a998380fab5b7bfcb30.92q0bpinvn.webp"
                      alt="58fa7c1db885a998380fab5b7bfcb30" style="zoom:25%;" 
                >

<img   
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/sudo0m/picx-images-hosting@master/20240703/52f875553ac2de19c5ea3562d6bc13a.5mnojm90td.webp"
                      alt="52f875553ac2de19c5ea3562d6bc13a" style="zoom:25%;" 
                >
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>配置React 嵌套路由报错</title>
    <url>/page/20230818155150/</url>
    <content><![CDATA[<p>在配置嵌套路由 react-router 时候 遇到这个问题</p>
<p>报错信息：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">You rendered descendant &lt;Routes (or called `useRoutes()`) at &quot;/&quot; (under &lt;Route path=&quot;/&quot;&gt;) </span><br><span class="line">but the parent route path has no trailing &quot;*&quot;. This means if you navigate deeper, </span><br><span class="line">the parent won&#x27;t match anymore and therefore the child routes will never render.</span><br><span class="line"></span><br><span class="line">Please change the parent &lt;Route path=&quot;/&quot;&gt; to &lt;Route path=&quot;*&quot;&gt;.</span><br></pre></td></tr></table></figure></div>

<p>代码：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230818/image.2amf0tns9ssg.png"
                      alt="image"
                ></p>
<p>解决办法</p>
<blockquote>
<p><code>react-router-dom</code>路由路径默认是完全匹配，因此如果渲染子路由，则路径需要允许它们。更改<code>path=&quot;/&quot;</code>为<code>path=&quot;/*&quot;</code> .</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://sudo0m.github.io/picx-images-hosting/20230818/image.35v9q15ewu40.png"
                      alt="image"
                ></p>
<p>参考文章：</p>
<ul>
<li><a class="link"   href="https://stackoverflow.com/questions/70604020/please-change-the-parent-route-path-to-route-path" >https://stackoverflow.com/questions/70604020/please-change-the-parent-route-path-to-route-path <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>笔记</tag>
        <tag>react</tag>
      </tags>
  </entry>
</search>
